;;;
;;; FILE          : farmer.s (PSCM)
;;;

;;; 
;;; AUTHOR(3)     : Aladin.Akyurek [ Soar 6.0.7, 6.0.8 ]
;;; AUTHOR(2)     : Brian.G.Milnes [ Soar 5.1 ]
;;; AUTHOR(1)     : Jans.Aasman    [ Soar 4.3 ]
;;;

;;;   
;;; CREATED(3)    : Apr 26, 93
;;;

;;;
;;; MODIFIED(2)   : Aug  9, 94    [ Soar 6.2.3 PSCM ] Aladin.Akyurek
;;; MODIFIED(1)   : Jul 19, 94    [ Soar 6.2.3 PSCM ] Aladin.Akyurek
;;; 

;;;
;;; Jul 19, 94    : Removed copying down ^applied in the subgoals;
;;;                 Replaced "implement" in production names by "apply."
;;; Aug  9, 94    : Added a search-control production that is operative
;;;                 within the selection space. This effectively resolves
;;;                 the problem described in the comment accompanying
;;;                 the production farmer*better*operator*move-alone.
;;;                 Replaced the two productions for state failure 
;;;                 by a set of three similar productions.
;;;                 Renamed the attribute ^directed-at as ^abject
;;;                 in operator structures.
;;;

;;;
;;; ABSTRACT. This file provides a Soar system to solve the "farmer's
;;; dilemma" or problem. The problem consists of the farmer taking a wolf, 
;;; a goat, and a cabbage across a river, one at a time, without leaving 
;;; the goat alone with the cabbage or the wolf (i.e., PRESERVATION-GOAL).
;;;

;;;
;;; TOP GOAL: 
;;; FARMER
;;;

(sp top-goal*elaborate*goal*farmer
    (goal <g> ^object nil)
    -->
    (<g> ^name farmer ^desired <d>))

;;;
;;; TOP GOAL PROBLEM SPACE: 
;;; FARMER
;;;

(sp farmer*propose*space*farmer
    (goal <g> ^object nil ^name farmer)
    -->
    (<g> ^problem-space <p>)
    (<p> ^name farmer
         ^default-state-copy yes
         ^two-level-attributes holds + &
         ;Commented out, Jul 19, 94.
;        ^one-level-attributes applied + &
    ))

;;;
;;; FARMER PROBLEM SPACE: 
;;; INITIAL STATE
;;;

(sp farmer*propose*state*initial-state
    (goal <g> ^problem-space <p> ^object nil)
    (<p> ^name farmer)
    -->
    (<g> ^state <s>)
    (<s> ^farmer <farmer>
         ^wolf <wolf>
         ^goat <goat>
         ^cabbage <cabbage>
         ^location <leftbank> + &, <rightbank> + &
         ^holds <h1> + &, <h2> + &, <h3> + &, <h4> + & )
    (<h1> ^farmer <farmer> ^at <leftbank>)
    (<h2> ^wolf <wolf> ^at <leftbank>)
    (<h3> ^goat <goat> ^at <leftbank>)
    (<h4> ^cabbage <cabbage> ^at <leftbank>)
    (<farmer> ^name FARMER)
    (<wolf> ^name WOLF)
    (<goat> ^name GOAT)
    (<cabbage> ^name CABBAGE)
    (<leftbank> ^name LEFT-BANK ^opposite-of <rightbank>)
    (<rightbank> ^name RIGHT-BANK ^opposite-of <leftbank>))

;;;
;;; FARMER PROBLEM SPACE OPERATORS: 
;;; MOVE-ALONE AND MOVE-WITH
;;;

(sp farmer*propose*operator*move-alone
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h>)
    (<h> ^farmer <f> ^at <i>)
    (<i> ^opposite-of <j>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move-alone
         ^object self
         ^from <i>
         ^to <j>))

(sp farmer*propose*operator*move-with
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2>)
    (<h1> ^farmer <f> ^at <i>)
	(<h2> ^<< wolf goat cabbage >> <value> ^at <i>)
    (<i> ^opposite-of <j>)
    -->
    (<g> ^operator <o>)
    (<o> ^name move-with
         ^object <value>
         ^from <i>
         ^to <j>))

;;;
;;; FARMER PROBLEM SPACE: 
;;; OPERATOR APPLICATION
;;;

(sp apply*move-alone
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-alone
         ^object self
         ^from <i>
         ^to <j>)
    (<p> ^name farmer)
    (<s> ^holds <h>)
    (<h> ^farmer <f> ^at <i>)
    -->
    (<h> ^at <j> <i> - ))

(sp apply*move-with
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-with
         ^object <value>
         ^from <i>
         ^to <j>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2>)
    (<h1> ^farmer <f> ^at <i>)
    (<h2> ^<< wolf goat cabbage >> <value> ^at <i>)
    -->
    (<h1> ^at <j> <i> - )
    (<h2> ^at <j> <i> - ))

;These operator saving rules would fire also
;in subgoals for operator subgoaling. In this task
;operator subgoaling should not happen. Otherwise,
;add (goal <g> -^name operator-subgoal) to the condition
;parts of these rules. Jul 19, 94.
 
(sp farmer*save*operator*applied*a
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name <name>
         ^object <value>
         ^from <i>
         ^to <j>)
    (<p> ^name farmer)
    (<s> -^applied)
    -->
    (<s> ^applied <o>))
	    
(sp farmer*save*operator*applied*b
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name <name>
         ^object <value>
         ^from <i>
         ^to <j>)
    (<p> ^name farmer)
    (<s> ^applied <q> <> <o>)
    -->
    (<s> ^applied <o> <q> - ))
	    
;;;
;;; FARMER PROBLEM SPACE: 
;;; OPERATOR TERMINATION
;;;

(sp terminate*move-alone
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-alone
         ^to <i>)
    (<p> ^name farmer)
    (<s> ^holds <h>)
    (<h> ^farmer <f> ^at <i>)
    -->
    (<g> ^operator <o> @ ))

(sp terminate*move-with
    (goal <g> ^operator <o>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<o> ^name move-with
         ^object <value>
         ^to <i>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2>)
    (<h1> ^farmer <f> ^at <i>)
    (<h2> ^<< wolf goat cabbage >> <value> ^at <i>)
    -->
    (<g> ^operator <o> @ ))

;;;
;;; FARMER PROBLEM SPACE: 
;;; STATE EVALUATION
;;;

;;;
;;; EVALUATION: STATE FAILURE
;;;

(sp farmer*evaluate*state*failure*a
    "Wolf will eat goat."
    (goal <g> ^desired <d>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2> <h3> <h4>)
    (<h1> ^farmer <farmer> ^at <i>)
    (<h2> ^wolf <wolf> ^at <j>)
    (<h3> ^goat <goat> ^at <j>)
    (<h4> ^cabbage <cabbage> ^at <i>)
    (<i> ^opposite-of <j>)
    -->
    (<s> ^failure <d>))

(sp farmer*evaluate*state*failure*b
    "Goat will eat cabbage."
    (goal <g> ^desired <d>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2> <h3> <h4>)
    (<h1> ^farmer <farmer> ^at <i>)
    (<h2> ^wolf <wolf> ^at <i>)
    (<h3> ^goat <goat> ^at <j>)
    (<h4> ^cabbage <cabbage> ^at <j>)
    (<i> ^opposite-of <j>)
    -->
    (<s> ^failure <d>))

(sp farmer*evaluate*state*failure*c
    "Goat will eat cabbage."
    (goal <g> ^desired <d>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2> <h3> <h4>)
    (<h1> ^farmer <farmer> ^at <i>)
    (<h2> ^wolf <wolf> ^at <j>)
    (<h3> ^goat <goat> ^at <j>)
    (<h4> ^cabbage <cabbage> ^at <j>)
    (<i> ^opposite-of <j>)
    -->
    (<s> ^failure <d>))

;;;
;;; STATE EVALUATION: STATE SUCCESS/GOAL TEST
;;;

 ;; This also defines implicitly the desired state
 ;; of the problem.
  ;

(sp farmer*evaluate*state*success
    (goal <g> ^desired <d>)
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h1> <h2> <h3> <h4>)
    (<h1> ^farmer <farmer> ^at <i>)
    (<h2> ^wolf <wolf> ^at <i>)
    (<h3> ^goat <goat> ^at <i>)
    (<h4> ^cabbage <cabbage> ^at <i>)
    (<i> ^name RIGHT-BANK)
    -->
    (<s> ^success <d>))

;;;
;;; FARMER PROBLEM SPACE: 
;;; SEARCH CONTROL
;;;

 ;; Create "reject preference" for inverse operator.
 ;; Definition of Inverse Operator:
 ;; apply(a[i],s[i]) = s[j],
 ;; apply(a[j],S[j]) = s[i],
 ;; where a[i] and a[j] are different instantiations
 ;; of the operator A, and s stands for state. The
 ;; instantiation a[j] is the inverse of a[i].
 ;; Example: a[i] = walk(x,y), a[j] = walk(y,x).  
  ;

(sp farmer*operator*inverse*reject
    "Reject inverse operator."
    (goal <g> ^operator <o> + )
    (goal <g> ^problem-space <p> ^state <s>)
    (<s> ^applied <q>)
    (<o> ^name <oname> 
         ^object <value>
         ^from <x>
         ^to <y>)
    (<q> ^name <oname>
         ^object <value>
         ^from <y>
         ^to <x>)
    -->
    (<g> ^operator <o> - ))
    
 ;; Without the production below Soar may get into a situation
 ;; in which the following holds:
 ;;   AT(WOLF,LEFT-BANK)
 ;;   AT(CABBAGE,LEFT-BANK)
 ;;   AT(FARMER,RIGHT-BANK)
 ;;   AT(GOAT,RIGHT-BANK)
 ;; From this situation it is possible for Soar to repeatedly
 ;; select a Move-With operator to move the wolf, the goat, or
 ;; the cabbage. In the process, it will produce the situation
 ;; in which the goat is at the left-bank, a configuration close
 ;; to the goal state. Since the goal-state is implicit in this
 ;; system, it will not be able to recognize this configuration
 ;; as such and to produce 
 ;;   Move-Alone(LEFT-BANK,RIGHT-BANK)
 ;; and then 
 ;;   Move-With(GOAT,LEFT-BANK,RIGHT-BANK)
 ;; to solve the puzzle.
 ;; The production below biases Soar to always consider
 ;; Move-Alone before any Move-With.
  ;
    
(sp farmer*best*operator*move-alone
    (goal <g> ^operator <o> + )
    (<o> ^name evaluate-object 
         ^object <x>)
    (<x> ^name move-alone)
    -->
    (<g> ^operator <o> > ))
         
;;;
;;; FARMER PROBLEM SPACE: 
;;; MONITOR STATE AND OPERATORS
;;;

(sp farmer*monitor*predicate*holds
    (goal <g> ^problem-space <p> ^state <s>)
    (<p> ^name farmer)
    (<s> ^holds <h>)
    (<h> ^<x> <value> ^{ <> <x> at } <i>)
    (<i> ^name <iname>)
    -->
    (write (crlf)
           |  HOLDS | <h>
           |: at(| <x>
           |,| <iname>
           |)|))

(sp farmer*monitor*tied-operator*move-alone
    (goal <g> ^impasse tie 
              ^attribute operator 
              ^item <item>)
    (<item> ^name move-alone 
    	    ^object self 
    	    ^from <i> 
    	    ^to <j>)
    (<i> ^name <iname>)
    (<j> ^name <jname>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: move-alone(self,| <iname> 
    	   |,| <jname> 
    	   |)|))

(sp farmer*monitor*tied-operator*move-with
    (goal <g> ^impasse tie 
              ^attribute operator 
              ^item <item>)
    (<item> ^name move-with 
            ^object <x> 
            ^from <i> 
            ^to <j>)
    (<x> ^name <xname>)
    (<i> ^name <iname>)
    (<j> ^name <jname>)
    -->
    (write (crlf) 
           |  | <item> 
           |: move-with(| <xname> 
           |,| <iname> 
           |,| <jname> 
           |)|))

(sp farmer*monitor*operator-application*move-alone
    (goal <g> ^operator <o>)
    (<o> ^name move-alone 
    	 ^object self 
    	 ^from <i> 
    	 ^to <j>)
    (<i> ^name <iname>)
    (<j> ^name <jname>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
    	   |: move-alone(self,| <iname> 
    	   |,| <jname> 
    	   |)|))

(sp farmer*monitor*operator-application*move-with
    (goal <g> ^operator <o>)
    (<o> ^name <oname> 
         ^object <x> 
         ^from <i> 
         ^to <j>)
    (<x> ^name <xname>)
    (<i> ^name <iname>)
    (<j> ^name <jname>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
           |: move-with(| <xname> 
           |,| <iname> 
           |,| <jname> 
           |)|))

;;; eof of farmer.s (Version Type: PSCM)
