%!PS-Adobe-2.0
%%Title: giltdemoCHI.mss
%%DocumentFonts: (atend)
%%Creator: Brad Myers and Scribe 7(1700)
%%CreationDate: 7 August 1991 16:20
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath translate
    100.0 -100.0 scale pop /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale /showpage {} def} bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def
%%EndProlog
%%Page: 0 1
BS
0 SI
18 /Helvetica-Bold AF
7497 9421 MT
(SEPARATING APPLICATION CODE FROM TOOLKITS:)SH
9648 12173 MT
(ELIMINATING THE SPAGHETTI OF CALL-BACKS)SH
12 /Times-Italic AF
27083 15071 MT
(Brad A. Myers)SH
/Times-Roman SF
23716 18001 MT
(School of Computer Science)SH
23865 19398 MT
(Carnegie Mellon University)SH
25600 20795 MT
(5000 Forbes Avenue)SH
25415 22192 MT
(Pittsburgh, PA 15213)SH
9 /Helvetica-Bold AF
5400 24852 MT
(ABSTRACT)SH
10 /Times-Roman AF
31788 24882 MT
(toolkits today)
40 W( require the programmer to specify call-backs)41 W
31788 25980 MT
(for almost every widget in the)
60 W( interface, and some widgets)59 W
5400 26148 MT
(Conventional toolkits today require the programmer to at-)112 W
31788 27078 MT
(even take more than one call-back.)
31 W( For)
314 W( example, the slider)32 W
5400 27246 MT
(tach)SH
/Times-Italic SF
7658 XM
(call-back)SH
/Times-Roman SF
11971 XM
(procedures to most buttons,)
342 W( scroll bars,)343 W
31788 28176 MT
(widget in Motif)
146 W( has two call-backs, one for when the in-)145 W
5400 28344 MT
(menu items,)
261 W( and other widgets in the interface.  These)260 W
31788 29274 MT
(dicator is dragged and one for when it is released.)SH
5400 29442 MT
(procedures are called by the system when the)
38 W( user operates)39 W
5400 30540 MT
(the widget in order to notify the application of)
137 W( the user's)136 W
31788 31387 MT
(A typical user interface for a)
53 W( moderately complex program)54 W
5400 31638 MT
(actions. Unfortunately,)
379 W( real interfaces contain hundreds or)65 W
31788 32485 MT
(will contain hundreds or even thousands)
140 W( of widgets.  For)139 W
5400 32736 MT
(thousands of widgets, and therefore many call-back)557 W
31788 33583 MT
(example, the VUIT program from DEC uses over)
237 W( 2500)238 W
5400 33834 MT
(procedures, most)
143 W( of which perform trivial tasks, resulting)144 W
31788 34681 MT
(widgets. This)
655 W( means that the programmer must provide)202 W
5400 34932 MT
(in a maintenance nightmare.  This)
23 W( paper describes a system)22 W
31788 35779 MT
(many call-back procedures.  To add to the)
7 W( complexity, each)8 W
5400 36030 MT
(that allows the majority of these procedures to)
532 W( be)533 W
31788 36877 MT
(type of widget may)
415 W( have its own protocol for what)414 W
5400 37128 MT
(eliminated. The)
781 W( user interface designer can specify by)265 W
31788 37975 MT
(parameters are passed to the call-back procedures,)
29 W( and how)30 W
5400 38226 MT
(demonstration many of)
40 W( the desired actions and connections)41 W
31788 39073 MT
(the procedures access data from the widget.)SH
5400 39324 MT
(among the widgets, so call-backs are only needed for)
140 W( the)139 W
5400 40422 MT
(most significant application actions.  In addition,)
115 W( the call-)116 W
31788 41186 MT
(The use of all)
42 W( of these call-backs means that the user inter-)41 W
5400 41520 MT
(backs that remain are)
462 W( completely insulated from the)461 W
31788 42284 MT
(face code and the application code)
9 W( are not well separated or)10 W
5400 42618 MT
(widgets, so that the application code is better separated)244 W
31788 43382 MT
(modularized. In)
250 W( particular:)SH
5400 43716 MT
(from the user interface.)SH
/Symbol SF
31978 44835 MT
(\267)SH
/Times-Roman SF
32688 XM
(The call-backs closely tie the application code to a)
115 W( par-)114 W
9 /Helvetica-Bold AF
5400 45829 MT
(KEYWORDS:)SH
10 /Times-Roman AF
12039 XM
(Call-Back Procedures, Dialog Boxes,)789 W
32688 45940 MT
(ticular toolkit.  Since each toolkit has its own protocol for)3 W
5400 46927 MT
(UIMSs, Interface Builders.)SH
32688 47045 MT
(how the call-backs are)
295 W( called, moving an application)294 W
32688 48150 MT
(from one toolkit to another \050e.g., from Motif)
173 W( to Open-)174 W
32688 49255 MT
(Look\051 can require recoding hundreds of procedures.)SH
13 /Times-Bold AF
5400 49598 MT
(1. Introduction)SH
10 /Symbol AF
31978 50360 MT
(\267)SH
/Times-Roman SF
32688 XM
(The call-backs make maintaining and changing the)
116 W( user)115 W
5400 50696 MT
(The Gilt Interface)
80 W( Builder allows dialog boxes and similar)81 W
32688 51465 MT
(interface very difficult.  Changing even)
14 W( a small part of an)15 W
5400 51794 MT
(user interface windows to be created by)
116 W( selecting widgets)115 W
32688 52570 MT
(interface often)
2 W( requires rewriting many procedures.  Even)1 W
5400 52892 MT
(from a palette and laying them out using a)
119 W( mouse.  More)120 W
32688 53675 MT
(if a graphical interface builder is used to)
269 W( change the)270 W
5400 53990 MT
(interestingly, Gilt provides)
315 W( a variety of mechanisms to)314 W
32688 54780 MT
(widgets, the call-backs must be)
41 W( hand-edited afterwards if)40 W
5400 55088 MT
(reduce the number of)102 W
/Times-Italic SF
14583 XM
(call-back)SH
/Times-Roman SF
18656 XM
(procedures that)
102 W( are neces-)103 W
32688 55885 MT
(widgets are added, deleted, or modified.)SH
5400 56186 MT
(sary in graphical)
67 W( interfaces.  A ``call-back'' is a procedure)66 W
/Symbol SF
31978 56990 MT
(\267)SH
/Times-Roman SF
32688 XM
(The call-backs often are passed the text)
96 W( labels shown to)97 W
5400 57284 MT
(defined by)
80 W( the application programmer that is called when)81 W
32688 58095 MT
(the user, so if the natural language used)
26 W( in the dialog box)25 W
5400 58382 MT
(a)SH
/Times-Italic SF
6243 XM
(widget)SH
/Times-Roman SF
9309 XM
(is operated by the end user.  A ``widget'')
149 W( is an)148 W
32688 59200 MT
(is changed \050e.g., from English to)
271 W( French\051, the values)272 W
5400 59480 MT
(interaction technique such)
94 W( as a menu, button or scroll-bar.)95 W
32688 60305 MT
(passed to the call-backs will change,)
199 W( requiring the ap-)198 W
5400 60578 MT
(A collection of widgets is)
179 W( called a)178 W
/Times-Italic SF
20509 XM
(toolkit)SH
/Times-Roman SF
(. Examples)
606 W( of)178 W
32688 61410 MT
(plication code to be edited.)SH
5400 61676 MT
(toolkits are the Macintosh Toolbox,)
153 W( the Motif and Open-)154 W
5400 62774 MT
(Look toolkits for X windows, and NeXTStep.  Most)386 W
31788 63523 MT
(We have observed that)
157 W( many of the call-back procedures)158 W
31788 64621 MT
(are actually)
49 W( used to filter the values from widgets and con-)48 W
31788 65719 MT
(nect widgets to each other, rather)
95 W( than to perform real ap-)96 W
31788 66817 MT
(plication work.  By identifying some common tasks that)188 W
31788 67915 MT
(call-backs are used for,)
188 W( and providing other methods for)189 W
31788 69013 MT
(handling the tasks, we have been able)
29 W( to eliminate the need)28 W
31788 70111 MT
(for most)
161 W( call-backs.  The tasks can be classified into the)162 W
31788 71209 MT
(following categories:)SH
ES
%%Page: 1 2
BS
0 SI
10 /Times-Bold AF
5400 6311 MT
(Preparing the data)
200 W( for applications)199 W
/Times-Roman SF
(. Often,)
648 W( call-backs)199 W
13 /Times-Bold AF
31788 6496 MT
(2. Related Work)SH
10 /Times-Roman AF
7200 7416 MT
(are used)
121 W( to convert the values that the widgets return)122 W
31788 7594 MT
(Of course, there are a large number of)
233 W( commercial and)232 W
7200 8521 MT
(into a form)
138 W( that the application wants.  This may in-)137 W
31788 8692 MT
(research interface builders that lay out widgets, including)148 W
7200 9626 MT
(volve converting the type of a)
32 W( value, for example from)33 W
31788 9790 MT
(DialogEditor [3],)
SH( the Prototyper)
25 W( for the Macintosh)
24 W( [13],)
SH( the)24 W
7200 10731 MT
(a string to an enumerated type, or it may involve)
43 W( com-)42 W
31788 10888 MT
(NeXT Interface Builder,)
88 W( UIMX for Motif, and Druid)
89 W( [12].)SH
7200 11836 MT
(bining the values from multiple widgets into a)
133 W( single)134 W
31788 11986 MT
(However, these only have limited mechanisms for reducing)21 W
7200 12941 MT
(record structure.)SH
31788 13084 MT
(call-backs. Many)
737 W( of them support transitions from one)244 W
31788 14182 MT
(dialog box to another, and NeXT allows the output)
12 W( value of)11 W
/Times-Bold SF
5400 14518 MT
(Error checking)79 W
/Times-Roman SF
(. Before)
408 W( the data is)
79 W( passed to the applica-)78 W
31788 15280 MT
(one widget to be connected to)
139 W( the input of another, if no)140 W
7200 15623 MT
(tion, some error checking)
115 W( of it is often needed, along)116 W
31788 16378 MT
(filtering is needed.  Druid adds the ability to)
79 W( set the initial)78 W
7200 16728 MT
(with appropriate messages when there is an error.)SH
31788 17476 MT
(values for widgets \050but only statically, not)
63 W( application data)64 W
/Times-Bold SF
5400 18305 MT
(Preparing data to be shown to the user)89 W
/Times-Roman SF
(. Another)
428 W( set)
89 W( of)88 W
31788 18574 MT
(dependent\051, and to)
85 W( collect values of widgets for use as the)84 W
7200 19410 MT
(procedures is usually needed to set the widgets)
175 W( with)176 W
31788 19672 MT
(parameter to a procedure.  It allows the designer to specify)51 W
7200 20515 MT
(appropriate default values, which are often)
248 W( dynami-)247 W
31788 20770 MT
(some of)
196 W( these by demonstration.  However, in Gilt, sig-)195 W
7200 21620 MT
(cally determined by the application.)
291 W( For)
834 W( example,)292 W
31788 21868 MT
(nificantly more)
62 W( of the user interface can be specified with-)63 W
7200 22725 MT
(when a color dialog box)
60 W( is displayed, the widgets in it)59 W
31788 22966 MT
(out requiring call-backs, the call-backs are more independ-)61 W
7200 23830 MT
(will usually need to be set to the color of the)
49 W( currently)50 W
31788 24064 MT
(ent of the widgets, and)
38 W( a uniform framework is used for all)39 W
7200 24935 MT
(selected object.  In)
80 W( some cases, it may even be neces-)79 W
31788 25162 MT
(filtering.)SH
7200 26040 MT
(sary to)
17 W( change the)18 W
/Times-Italic SF
14769 XM
(number)SH
/Times-Roman SF
18092 XM
(of widgets in the dialog box)18 W
7200 27145 MT
(each time it is displayed, for example, if a)
168 W( button is)167 W
31788 27275 MT
(A primary influence on)
359 W( Gilt is the Peridot UIMS)
358 W( [6].)SH
7200 28250 MT
(needed for each application data value.)SH
31788 28373 MT
(Peridot was the first system to)
14 W( allow the designer to specify)15 W
31788 29471 MT
(the behavior of the interface by)
134 W( demonstration.  Gilt uses)133 W
/Times-Bold SF
5400 29827 MT
(Internal control)10 W
/Times-Roman SF
(. Many)
270 W( call-backs are used to)
10 W( control con-)11 W
31788 30569 MT
(some of the techniques in Peridot to)
93 W( guess the appropriate)94 W
7200 30932 MT
(nections between user interface elements, which re-)248 W
31788 31667 MT
(transformations based on the example values.)SH
7200 32037 MT
(quire little application intervention.  For)
372 W( example,)373 W
7200 33142 MT
(these procedures might cause a widget to)
120 W( be disabled)119 W
31788 33780 MT
(The filter)
45 W( expressions that the designer specifies in Gilt are)44 W
7200 34247 MT
(\050grey\051 when a radio)
180 W( button is selected, or cause one)181 W
31788 34878 MT
(implemented using)90 W
/Times-Italic SF
39858 XM
(constraints)SH
/Times-Roman SF
(. A)
432 W( constraint is a relation-)91 W
7200 35352 MT
(dialog box to appear when a button in another is hit.)SH
31788 35976 MT
(ship that is declared once)
93 W( and then maintained by the sys-)92 W
31788 37074 MT
(tem. Constraints)
288 W( have been used by many systems,)
19 W( starting)20 W
5400 37465 MT
(Gilt provides a standard style of window)
180 W( that allows the)179 W
31788 38172 MT
(with Sketchpad)
74 W( [14])
SH( and Thinglab)
74 W( [ThinglabToplas].)
SH( Uses)396 W
5400 38563 MT
(filter expressions to be entered.  The goal is to)
145 W( minimize)146 W
31788 39270 MT
(of constraints within user)
48 W( interface toolkits include GROW)49 W
5400 39661 MT
(the amount)
138 W( of code that needs to be typed to achieve the)137 W
32038 40368 MT
([1], Peridot [6], and Apogee [5].)SH
5400 40759 MT
(required transformation.  Therefore, much of the filter ex-)102 W
5400 41857 MT
(pression is generated automatically when the)
395 W( designer)394 W
31788 42481 MT
(Other systems have allowed the)
248 W( designer to specify the)247 W
/Times-Italic SF
5400 42955 MT
(demonstrates)SH
/Times-Roman SF
11061 XM
(the desired behavior.  Other parts can)
78 W( be en-)79 W
31788 43579 MT
(connections between the)
88 W( user interface and the application)89 W
5400 44053 MT
(tered by selecting items from menus.)
92 W( As)
433 W( a last resort, the)91 W
31788 44677 MT
(procedures at a high level.)
131 W( The)
511 W( Mickey system)
130 W( [11])
SH( uses)130 W
5400 45151 MT
(designer can type the required code.  If a call to an)
24 W( applica-)25 W
31788 45775 MT
(special comments in the)
191 W( procedure definition to describe)192 W
5400 46249 MT
(tion function is)
54 W( necessary in a filter expression, Gilt makes)53 W
31788 46873 MT
(the connection)
221 W( to the user interface.  The UIDE system)220 W
5400 47347 MT
(sure that the procedure is)
18 W( called with appropriate high-level)19 W
32038 47971 MT
([4] allows the application)
96 W( procedures to be defined in ad-)97 W
5400 48445 MT
(parameters, rather than such)
122 W( things as a widget pointer or)121 W
31788 49069 MT
(vance, and generates the interface)
8 W( partially from these.  Un-)7 W
5400 49543 MT
(the string labels.  Thus, the call-backs)
31 W( that remain are com-)32 W
31788 50167 MT
(like these systems, Gilt requires the designer to)
53 W( specify the)54 W
5400 50641 MT
(pletely insulated from the user interface.)SH
31788 51265 MT
(graphics, and then explicitly attach)
300 W( the graphics to the)299 W
31788 52363 MT
(procedures, but it infers)
174 W( the mapping between the values)175 W
5400 52754 MT
(Gilt is a part)
138 W( of the Garnet system)
137 W( [8].)
SH( Garnet)
524 W( is a com-)137 W
31788 53461 MT
(returned by the widgets)
304 W( and the values desired by the)303 W
5400 53852 MT
(prehensive user interface development)
246 W( environment con-)247 W
31788 54559 MT
(procedures.)SH
5400 54950 MT
(taining many high-level tools, including Gilt, the Lapidary)80 W
5400 56048 MT
(interactive design tool)
70 W( [7],)
SH( the C32 spreadsheet system)
71 W( [9],)SH
5400 57146 MT
(etc. Garnet)
586 W( also contains)
168 W( a complete toolkit, which uses)167 W
13 /Times-Bold AF
31788 57230 MT
(3. Example)SH
10 /Times-Roman AF
5400 58244 MT
(constraints [15])
SH( and a prototype-instance)
390 W( object model.)391 W
31788 58328 MT
(To show how easy it is to define dependencies)
229 W( without)230 W
5400 59342 MT
(Gilt stands for)
227 W( the Garnet Interface Layout Tool, and it)226 W
31788 59426 MT
(writing call-backs, we will first present)
300 W( an example of)299 W
722 50 13750 59542 UL
333 50 16947 59542 UL
611 50 20976 59542 UL
611 50 24285 59542 UL
5400 60440 MT
(supports interfaces built using either the Garnet)
120 W( look-and-)121 W
31788 60524 MT
(creating the dialog)
37 W( box of Figure 1.  There are a number of)38 W
8 SS 
26842 61208 MT
(1)SH
10 SS 
5400 61553 MT
(feel widget set or the Motif)
38 W( look-and-feel widget set.)39 W
27820 XM
(Gilt)SH
31788 61622 MT
(dependencies in this relatively simple interface.  The)
29 W( return)28 W
5400 62651 MT
(uses CommonLisp,)
238 W( but the ideas presented here are ap-)237 W
31788 62720 MT
(value of)
224 W( the dialog box is a font object.  If one of the)225 W
5400 63749 MT
(plicable to interface builder tools using)
88 W( conventional com-)89 W
31788 63818 MT
(standard fonts is selected, then the)
156 W( corresponding built-in)155 W
5400 64847 MT
(piled languages.)SH
31788 64916 MT
(font object should be returned.  Otherwise, the return value)38 W
31788 66014 MT
(will be)
285 W( a font specified by name, so the specified file)284 W
31788 67112 MT
(should be opened, and a new)
156 W( font object created for that)157 W
31788 68210 MT
(file.)SH
10800 50 5400 69155 UL
31788 70323 MT
(First, the)
61 W( user would create the graphics for the dialog box)62 W
6 SS 
6200 70494 MT
(1)SH
8 SS 
6500 70803 MT
(The Motif-style widgets in Garnet are implemented on top of)
217 W( the)216 W
10 SS 
31788 71421 MT
(by selecting the widgets from)
154 W( a palette and typing in the)153 W
8 SS 
5400 71727 MT
(Garnet Toolkit intrinsics and do not use any)
331 W( of the Xtk code in)332 W
10 SS 
31788 72519 MT
(correct labels, in the conventional direct manipulation man-)13 W
8 SS 
5400 72651 MT
(C. Although they look and behave like the standard Motif widgets,)
97 W( they)96 W
5400 73575 MT
(have the same procedural interface as the Garnet widget set.)SH
ES
%%Page: 2 3
BS
0 SI
10 SS 
5 10 0 28494 30725 GB 
%%BeginDocument: valuecontrola.PS
%!PS-Adobe-2.0
%%Title: Value Control
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 7:47 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.95 0.95 scale

%
% Begin new window
%
0 -230 translate
gsave
0 685 495 225 ClipToRectangle
0 0 translate
gsave
0 685 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 666 472 0 0 0 0 false (Exported Value Control for "Standard Font:") 18 /Courier-BoldOblique DrawText
12 634 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 634 108 0 0 0 0 false ("Standard Font:") 12 /Courier DrawText
302 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 634 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 634 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 634 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 596 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 620 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 618 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 618 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 604 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 490 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 488 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 488 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 474 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
14 475 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 488 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 486 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 486 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 475 108 0 0 0 0 false ("Standard Font:") 12 /Courier DrawText
grestore


%
% Begin new window
%
12 -94 translate
gsave
0 685 460 90 ClipToRectangle
0 0 translate
gsave
0 685 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 683 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 681 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 681 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 668 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 666 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 666 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 680 14 670 5 670 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 670 10 680 DrawLine
10 622 5 632 15 632 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 622 15 632 DrawLine
22 612 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 610 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 610 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 610 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 608 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 608 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 605 35 600 35 610 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 610 25 605 DrawLine
443 599 443 609 453 604 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 604 443 599 DrawLine
grestore


%
% Begin new window
%
20 0 translate
gsave
0 685 440 70 ClipToRectangle
0 0 translate
gsave
grestore


%
% Begin new window
%
0 0 translate
gsave
0 685 600 70 ClipToRectangle
0 0 translate
gsave
0 685 600 70 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 669 113 0 0 0 0 false (\050gv :self :value\051) 12 /Courier DrawText
grestore

grestore

% 0 685 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

% 0 685 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 72 289 540 502

%%EndDocument
 GE /Times-Roman SF
43239 17380 MT
(\050a\051)SH
63 100 0 -1872 36999 GB 
%%BeginDocument: fontwin.PS
%!PS-Adobe-2.0
%%Title: Gilt Work Window
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 3, 1991, 2:11 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def

%%EndProlog
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
48 -222 translate
gsave
0 648 372 203 ClipToRectangle
0 0 translate
gsave
0 648 372 203 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
21 602 27 608 33 602 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
21 602 27 596 33 602 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
38 598 95 0 0 0 0 false (Standard Font:) 12 /Courier-Bold DrawText
21 489 27 495 33 489 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
21 489 27 483 33 489 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
38 485 74 0 0 0 0 false (Other Font:) 12 /Courier-Bold DrawText
57 582 63 588 69 582 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
57 582 63 576 69 582 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
74 578 47 0 0 0 0 false (Courier) 12 /Courier DrawText
57 559 63 565 69 559 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
57 559 63 553 69 559 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
74 555 63 0 0 0 0 false (Helvetica) 12 /Courier DrawText
57 536 63 542 69 536 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
57 536 63 530 69 536 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
74 532 34 0 0 0 0 false (Times) 12 /Courier DrawText
234 582 240 588 246 582 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
234 582 240 576 246 582 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
251 578 34 0 0 0 0 false (Small) 12 /Courier DrawText
234 559 240 565 246 559 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
234 559 240 553 246 559 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
251 555 42 0 0 0 0 false (Medium) 12 /Courier DrawText
234 536 240 542 246 536 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
234 536 240 530 246 536 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
251 532 34 0 0 0 0 false (Large) 12 /Courier DrawText
234 513 240 519 246 513 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
234 513 240 507 246 513 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
251 509 69 0 0 0 0 false (Very Large) 12 /Courier DrawText
157 588 12 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
159 586 10 10 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
159 586 8 8 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
174 578 28 0 0 0 0 false (Bold) 12 /Courier DrawText
157 565 12 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
159 563 10 10 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
159 563 8 8 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
174 555 40 0 0 0 0 false (Italic) 12 /Courier DrawText
58 462 67 0.25 0 0 0 false (Font Name:) 12 /Courier DrawText
130 475 203 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
132 473 201 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
132 473 199 14 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
134 462 35 0.25 0 0 0 false (Field) 12 /Courier DrawText
6 625 149 0 0 0 0 false (Choose a font:) 18 /Courier-BoldOblique DrawText
0 0 0 0 false 0 0 [] 1 157 622 8 622 DrawLine
246 639 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
248 637 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
248 637 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
251 625 13 0 0 0 0 false (OK) 12 /Courier DrawText
306 639 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
308 637 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
308 637 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
311 625 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
grestore

grestore

0 648 372 203 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

pstack

showpage
%%Trailer
%%DocumentFonts: /Courier-BoldOblique /Courier /Courier-Bold 
%%BoundingBox: 120 295 492 498

%%EndDocument
 GE /Times-Bold SF
15198 20008 MT
(Figure 1:)SH
9 /Times-Roman AF
7200 21022 MT
(A font)
16 W( selection dialog box being created in Gilt.  When)15 W
7200 22036 MT
(the)SH
/Courier SF
8829 XM
(Standard Font)304 W
/Times-Roman SF
16682 XM
(radio button)
304 W( is pressed, the)305 W
/Courier SF
7200 23050 MT
(Font Name)240 W
/Times-Roman SF
12765 XM
(field is disabled)
240 W( \050grey\051, and when the)239 W
/Courier SF
7200 24064 MT
(Other Font)33 W
/Times-Roman SF
12891 XM
(radio button is selected,)
33 W( the three sets of)34 W
7200 25078 MT
(buttons under)112 W
/Courier SF
12574 XM
(Standard Font)112 W
/Times-Roman SF
20043 XM
(\050for the family, face)111 W
7200 26092 MT
(and size of the font\051 become disabled.)SH
24012 50 5400 27397 UL
10 SS 
5400 28988 MT
(ner as with)
224 W( other interface builders.  Next, the designer)223 W
5 10 0 28494 44499 GB 
%%BeginDocument: valuecontrolb.PS
%!PS-Adobe-2.0
%%Title: Value Control
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 7:44 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.95 0.95 scale

%
% Begin new window
%
0 -230 translate
gsave
0 685 495 225 ClipToRectangle
0 0 translate
gsave
0 685 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 666 472 0 0 0 0 false (Exported Value Control for "Standard Font:") 18 /Courier-BoldOblique DrawText
12 634 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 634 108 0 0 0 0 false ("Standard Font:") 12 /Courier DrawText
302 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 634 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 634 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 634 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 596 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 620 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 618 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 618 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 604 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 490 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 488 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 488 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 474 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
12 616 201 0 0 0 0 false (** type error in parameter **) 12 /Courier DrawText
14 475 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 488 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 486 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 486 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 475 20 0 0 0 0 false (NIL) 12 /Courier DrawText
grestore


%
% Begin new window
%
12 -94 translate
gsave
0 685 460 90 ClipToRectangle
0 0 translate
gsave
0 685 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 683 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 681 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 681 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 668 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 666 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 666 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 680 14 670 5 670 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 670 10 680 DrawLine
10 622 5 632 15 632 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 622 15 632 DrawLine
22 612 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 610 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 610 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 610 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 608 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 608 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 605 35 600 35 610 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 610 25 605 DrawLine
443 599 443 609 453 604 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 604 443 599 DrawLine
grestore


%
% Begin new window
%
20 0 translate
gsave
0 685 440 70 ClipToRectangle
0 0 translate
gsave
grestore


%
% Begin new window
%
0 0 translate
gsave
0 685 600 71 ClipToRectangle
0 0 translate
gsave
0 685 600 71 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 669 123 0 0 0 0 false (\050get-standard-font) 12 /Courier DrawText
5 655 200 0 0 0 0 false (  \050gv FAMILY :filtered-value\051) 12 /Courier DrawText
5 641 186 0 0 0 0 false (  \050gv FACE :filtered-value\051) 12 /Courier DrawText
5 627 200 0 0 0 0 false (  \050gv SIZE :filtered-value\051 \051) 12 /Courier DrawText
grestore

grestore

% 0 685 600 71 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

% 0 685 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 72 289 540 502

%%EndDocument
 GE 5400 30086 MT
(gives meaningful names to)
663 W( the widgets \050e.g., the)664 W
43211 31154 MT
(\050b\051)SH
/Courier SF
5400 31184 MT
(Bold/Italic)SH
/Times-Roman SF
12250 XM
(radio buttons are called "face"\051.)SH
5400 33297 MT
(The default value)
13 W( of a set of radio buttons is the string label)12 W
5400 34395 MT
(of the selected button.  We will now override)
8 W( this and make)9 W
5400 35493 MT
(the value of the)113 W
/Courier SF
12295 XM
(Standard Font)113 W
/Times-Roman SF
20570 XM
(branch instead be the)112 W
5400 36591 MT
(appropriate font)
136 W( object.  To do this, we bring up the Gilt)137 W
5400 37689 MT
(window in Figure 2-a.  When it is)
132 W( brought up, it initially)131 W
5400 38787 MT
(shows that the resulting exported value from the widget)
87 W( is)88 W
5400 39885 MT
(the same as the widget's value.)
29 W( To)
307 W( get the appropriate font)28 W
5400 40983 MT
(object, we)
11 W( need to call the Gilt function)12 W
/Courier SF
21576 XM
(get-standard-)SH
5400 42081 MT
(font)SH
/Times-Roman SF
(, so we)
167 W( choose this from a menu.  This inserts the)166 W
5400 43179 MT
(function call into the)
299 W( filter expression.  The procedure)300 W
5400 44277 MT
(should be passed the values)
193 W( of the three sets of widgets)192 W
5400 45375 MT
(under)SH
/Courier SF
8057 XM
(Standard Font)130 W
/Times-Roman SF
(. Therefore,)
510 W( we)
130 W( select the three)131 W
5 10 0 28494 59423 GB 
%%BeginDocument: valuecontrolc.PS
%!PS-Adobe-2.0
%%Title: Opal 2
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 5, 1991, 12:17 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.78 0.78 scale

%
% Begin new window
%
0 -250 translate
gsave
0 831 600 331 ClipToRectangle
0 0 translate
gsave
0 831 600 331 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
7 -7 translate
gsave
0 831 495 225 ClipToRectangle
0 0 translate
gsave
0 831 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 812 472 0 0 0 0 false (Exported Value Control for "Standard Font:") 18 /Courier-BoldOblique DrawText
12 780 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 780 20 0 0 0 0 false (NIL) 12 /Courier DrawText
302 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 780 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 780 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 780 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 742 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 766 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 764 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 764 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 750 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 636 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 634 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 634 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 620 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
14 621 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 634 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 632 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 632 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 621 20 0 0 0 0 false (NIL) 12 /Courier DrawText
grestore

gsave

%
% Begin new window
%
12 -94 translate
gsave
0 831 460 90 ClipToRectangle
0 0 translate
gsave
0 831 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 829 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 827 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 827 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 814 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 812 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 812 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 826 14 816 5 816 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 816 10 826 DrawLine
10 768 5 778 15 778 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 768 15 778 DrawLine
22 758 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 756 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 756 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 756 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 754 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 754 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 751 35 746 35 756 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 756 25 751 DrawLine
443 745 443 755 453 750 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 750 443 745 DrawLine
grestore

gsave

%
% Begin new window
%
20 0 translate
gsave
0 831 440 70 ClipToRectangle
0 0 translate
gsave
grestore

gsave

%
% Begin new window
%
0 0 translate
gsave
0 831 600 71 ClipToRectangle
0 0 translate
gsave
0 831 600 71 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 815 123 0 0 0 0 false (\050get-standard-font) 12 /Courier DrawText
5 801 305 0 0 0 0 false (  \050gv KR-DEBUG:FAMILY-20209 :filtered-value\051) 12 /Courier DrawText
5 787 291 0 0 0 0 false (  \050gv KR-DEBUG:FACE-21006 :filtered-value\051) 12 /Courier DrawText
5 773 305 0 0 0 0 false (  \050gv KR-DEBUG:SIZE-20569 :filtered-value\051 \051) 12 /Courier DrawText
grestore

grestore

0 831 600 71 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
37 -37 translate
gsave
0 831 495 225 ClipToRectangle
0 0 translate
gsave
0 831 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 812 384 0 0 0 0 false (Exported Value Control for "FAMILY") 18 /Courier-BoldOblique DrawText
12 780 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 780 59 0 0 0 0 false ("Courier") 12 /Courier DrawText
302 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 780 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 780 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 780 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 742 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 766 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 764 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 764 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 750 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 636 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 634 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 634 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 620 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
14 621 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 634 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 632 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 632 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 621 53 0 0 0 0 false (:COURIER) 12 /Courier DrawText
grestore

gsave

%
% Begin new window
%
12 -94 translate
gsave
0 831 460 90 ClipToRectangle
0 0 translate
gsave
0 831 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 829 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 827 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 827 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 814 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 812 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 812 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 826 14 816 5 816 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 816 10 826 DrawLine
10 768 5 778 15 778 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 768 15 778 DrawLine
22 758 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 756 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 756 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 756 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 754 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 754 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 751 35 746 35 756 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 756 25 751 DrawLine
443 745 443 755 453 750 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 750 443 745 DrawLine
grestore

gsave

%
% Begin new window
%
20 0 translate
gsave
0 831 440 70 ClipToRectangle
0 0 translate
gsave
grestore

gsave

%
% Begin new window
%
0 0 translate
gsave
0 831 600 70 ClipToRectangle
0 0 translate
gsave
0 831 600 70 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 815 253 0 0 0 0 false (\050Gilt:Make-Keyword \050gv :self :value\051\051) 12 /Courier DrawText
grestore

grestore

0 831 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
67 -67 translate
gsave
0 831 495 225 ClipToRectangle
0 0 translate
gsave
0 831 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 812 362 0 0 0 0 false (Exported Value Control for "FACE") 18 /Courier-BoldOblique DrawText
12 780 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 780 20 0 0 0 0 false (NIL) 12 /Courier DrawText
302 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 780 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 780 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 780 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 742 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 766 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 764 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 764 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 750 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 636 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 634 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 634 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 620 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
14 621 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 634 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 632 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 632 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 621 20 0 0 0 0 false (NIL) 12 /Courier DrawText
grestore

gsave

%
% Begin new window
%
12 -94 translate
gsave
0 831 460 90 ClipToRectangle
0 0 translate
gsave
0 831 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 829 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 827 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 827 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 814 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 812 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 812 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 826 14 816 5 816 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 816 10 826 DrawLine
10 768 5 778 15 778 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 768 15 778 DrawLine
22 758 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 756 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 756 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 756 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 754 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 754 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 751 35 746 35 756 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 756 25 751 DrawLine
443 745 443 755 453 750 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 750 443 745 DrawLine
grestore

gsave

%
% Begin new window
%
20 0 translate
gsave
0 831 440 70 ClipToRectangle
0 0 translate
gsave
grestore

gsave

%
% Begin new window
%
0 0 translate
gsave
0 831 600 70 ClipToRectangle
0 0 translate
gsave
0 831 600 70 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 815 113 0 0 0 0 false (\050gv :self :value\051) 12 /Courier DrawText
grestore

grestore

0 831 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

gsave

%
% Begin new window
%
97 -97 translate
gsave
0 831 495 225 ClipToRectangle
0 0 translate
gsave
0 831 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 812 362 0 0 0 0 false (Exported Value Control for "SIZE") 18 /Courier-BoldOblique DrawText
12 780 117 0 0 0 0 false (Unfiltered Value:) 12 /Courier-Bold DrawText
145 780 52 0 0 0 0 false ("Medium") 12 /Courier DrawText
302 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 780 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 780 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 794 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 792 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 792 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 780 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 742 123 0 0 0 0 false (Filter Expression:) 12 /Courier-Bold DrawText
329 766 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 764 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 764 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 750 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
385 636 87 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
387 634 85 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
387 634 83 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
390 620 77 0 0 0 0 false (Error Check) 12 /Courier DrawText
14 621 173 0 0 0 0 false (Resulting Filtered Value:) 12 /Courier-Bold DrawText
192 634 177 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
194 632 175 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
194 632 173 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
196 621 46 0 0 0 0 false (:MEDIUM) 12 /Courier DrawText
grestore

gsave

%
% Begin new window
%
12 -94 translate
gsave
0 831 460 90 ClipToRectangle
0 0 translate
gsave
0 831 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 829 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 827 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 827 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 814 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 812 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 812 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 826 14 816 5 816 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 816 10 826 DrawLine
10 768 5 778 15 778 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 768 15 778 DrawLine
22 758 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 756 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 756 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 756 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 754 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 754 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 751 35 746 35 756 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 756 25 751 DrawLine
443 745 443 755 453 750 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 750 443 745 DrawLine
grestore

gsave

%
% Begin new window
%
20 0 translate
gsave
0 831 440 70 ClipToRectangle
0 0 translate
gsave
grestore

gsave

%
% Begin new window
%
0 0 translate
gsave
0 831 600 70 ClipToRectangle
0 0 translate
gsave
0 831 600 70 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 815 253 0 0 0 0 false (\050Gilt:Make-Keyword \050gv :self :value\051\051) 12 /Courier DrawText
grestore

grestore

% 0 831 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

% 0 831 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

grestore

0 831 600 331 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 72 267 540 525

%%EndDocument
 GE 5400 46473 MT
(widget sets and hit the)96 W
/Courier SF
15074 XM
(Use-Value-of-Object)SH
/Times-Roman SF
26820 XM
(button)SH
43239 47178 MT
(\050c\051)SH
5400 47571 MT
(in the window.  This)
128 W( inserts references to all the selected)129 W
5400 48669 MT
(objects into the filter expression, resulting in)
178 W( Figure 2-b.)177 W
/Times-Bold SF
41586 48772 MT
(Figure 2:)SH
/Times-Roman SF
5400 49767 MT
(The references are inserted in the order the)
174 W( objects were)175 W
9 SS 
33588 49786 MT
(\050a\051 The Gilt window that allows the designer)
61 W( to control)62 W
33588 50800 MT
(how values)
56 W( for widgets are filtered.  Many of the fields)55 W
10 SS 
5400 50865 MT
(selected. These)
398 W( references will be to the)73 W
/Times-Italic SF
22453 XM
(filtered)SH
/Times-Roman SF
25665 XM
(values of)73 W
9 SS 
33588 51814 MT
(are filled)
177 W( in by Gilt as the designer demonstrates the)178 W
10 SS 
5400 51963 MT
(the widgets, which so far are the same)
3 W( as the default values:)4 W
9 SS 
33588 52828 MT
(desired behavior.)
165 W( The)554 W
/Courier SF
42521 XM
(Unfiltered Value)164 W
/Times-Roman SF
51714 XM
(shows)SH
10 SS 
5400 53061 MT
(the string)
121 W( names of the labels.  However, Gilt knows that)120 W
9 SS 
33588 53842 MT
(the value as currently)
5 W( provided by the widget before any)6 W
10 /Courier AF
5400 54159 MT
(get-standard-font)SH
/Times-Roman SF
16233 XM
(expects Lisp)
383 W( keywords as ar-)384 W
9 SS 
33588 54856 MT
(filtering. The)387 W
/Courier SF
39031 XM
(Filter Expression)81 W
/Times-Roman SF
48598 XM
(is the)
81 W( Lisp ex-)80 W
10 SS 
5400 55257 MT
(guments rather than strings)
396 W( \050a "keyword" is an atom)395 W
9 SS 
33588 55870 MT
(pression to filter the value.  The designer can hit)
165 W( the)166 W
10 SS 
5400 56355 MT
(prefixed by a colon, such as)84 W
/Courier SF
17318 XM
(:bold)SH
/Times-Roman SF
(\051. Therefore,)
419 W( Gilt can)85 W
9 /Courier AF
33588 56884 MT
(Use Value)
31 W( of Object)30 W
/Times-Roman SF
44194 XM
(button to insert a reference)30 W
10 SS 
5400 57453 MT
(tell that there is a mismatch, so it tries to determine a)
70 W( pos-)69 W
9 SS 
33588 57898 MT
(to the value of a selected object.  The default)
225 W( filter)226 W
10 SS 
5400 58551 MT
(sible transformation.  Another)654 W
/Courier SF
20321 XM
(Exported Value)655 W
9 /Times-Roman AF
33588 58912 MT
(simply copies)
246 W( the original value.  The)245 W
/Courier SF
49104 XM
(Resulting)SH
10 SS 
5400 59649 MT
(Control)SH
/Times-Roman SF
10274 XM
(window pops up for each of the)
424 W( selected)423 W
9 /Courier AF
33588 59926 MT
(Filtered Value)173 W
/Times-Roman SF
41719 XM
(field shows the final value after)174 W
10 SS 
5400 60747 MT
(widgets, and the designer can check)
47 W( that the inferred trans-)48 W
9 SS 
33588 60940 MT
(the filtering.)
266 W( This)
755 W( field can be edited to show the)265 W
10 SS 
5400 61845 MT
(formations are correct \050Figure 2-c\051.  If not, the designer can)15 W
9 SS 
33588 61954 MT
(transformation for the current)
112 W( widget by example.  \050b\051)113 W
10 SS 
5400 62943 MT
(give additional examples or explicitly edit)
215 W( the generated)216 W
9 SS 
33588 62968 MT
(shows the filter expression after)
210 W( a function has been)209 W
33588 63982 MT
(selected from a menu and)
159 W( the widget references have)160 W
10 SS 
5400 64041 MT
(code. In)
678 W( this example, however, the system)
214 W( guesses all)213 W
9 SS 
33588 64996 MT
(been filled in.  \050c\051 shows the additional)
142 W( windows that)141 W
10 SS 
5400 65139 MT
(cases correctly, so the designer simply hits "OK" on)
80 W( all of)81 W
9 SS 
33588 66010 MT
(appear to confirm the transformations)
114 W( that are inferred)115 W
10 SS 
5400 66237 MT
(the windows.  This will assert constraints)
162 W( so that the fil-)161 W
9 SS 
33588 67024 MT
(for the widgets that are referenced in \050b\051.)SH
10 SS 
5400 67335 MT
(tered values of the widgets will be keywords, as required.)SH
5400 69448 MT
(Now, the value)
244 W( for the other branch must be set.  The)243 W
5400 70546 MT
(designer selects the)49 W
/Courier SF
13573 XM
(Other Font)49 W
/Times-Roman SF
19921 XM
(radio button and brings)50 W
5400 71644 MT
(up the)50 W
/Courier SF
8222 XM
(Exported Value Control)49 W
/Times-Roman SF
21819 XM
(window for it.  By)49 W
5400 72742 MT
(selecting the)285 W
/Courier SF
11247 XM
(get-font-from-file)SH
/Times-Roman SF
22583 XM
(function from a)286 W
ES
%%Page: 3 4
BS
0 SI
10 /Times-Roman AF
31788 6311 MT
(designer selects the)182 W
/Courier SF
40359 XM
(Other Font)181 W
/Times-Roman SF
46971 XM
(radio button and hits)181 W
31788 7409 MT
(the)SH
/Courier SF
33425 XM
(Use Value Of Object)166 W
/Times-Roman SF
45739 XM
(button. This)
582 W( makes the)166 W
/Courier SF
31788 8507 MT
(Font Name)177 W
/Times-Roman SF
37792 XM
(enabled \050not grey\051)
177 W( when)176 W
/Courier SF
48495 XM
(Other Font)176 W
/Times-Roman SF
55097 XM
(is)SH
31788 9605 MT
(chosen. Similarly,)
418 W( the family, face and size buttons)
84 W( under)85 W
/Courier SF
31788 10703 MT
(Standard Font)147 W
/Times-Roman SF
40132 XM
(are enabled)
147 W( when)146 W
/Courier SF
47818 XM
(Standard Font)146 W
/Times-Roman SF
31788 11801 MT
(is selected.)SH
13 /Times-Bold AF
31788 14472 MT
(4. Filtering)SH
10 /Times-Roman AF
31788 15570 MT
(Each widget in Garnet will always first compute its default)44 W
5 10 0 2106 30825 GB 
%%BeginDocument: errorcheck.PS
%!PS-Adobe-2.0
%%Title: Error Check:  MOTIF-RADIO-BUTTON-3220-19975-20118
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 8:03 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.96 0.96 scale

%
% Begin new window
%
0 -226 translate
gsave
0 678 490 227 ClipToRectangle
0 0 translate
gsave
0 678 490 227 0 0 0 0 false 0 0 [] -1 0.0 .981 .981 .981 true DrawRectangle
4 653 318 0 0 0 0 false (Error Check for "Other Font:") 18 /Courier-BoldOblique DrawText
362 642 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 640 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 640 47 16 0 0 0 0 false 0 0 [] -1 0.0 .981 .981 .981 true DrawRectangle
367 628 13 0 0 0 0 false (OK) 12 /Courier DrawText
422 642 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 640 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 640 47 16 0 0 0 0 false 0 0 [] -1 0.0 .981 .981 .981 true DrawRectangle
427 628 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
16 642 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
18 640 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
18 640 139 20 0 0 0 0 false 0 0 [] -1 0.0 .981 .981 .981 true DrawRectangle
21 626 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
14 556 14 607 476 607 6 0 0.46 0.46 0.46 true 0 0 [] 2 -1 0 0 0 false DrawPolyline
13 556 476 556 476 608 6 0 1.00 1.00 1.00 true 0 0 [] 2 -1 0 0 0 false DrawPolyline
20 588 76 0 0 0 0 false (If value is) 12 /Courier-Bold DrawText
101 601 367 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
103 599 365 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
103 599 363 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
105 588 20 0 0 0 0 false (NIL) 12 /Courier DrawText
34 567 167 0 0 0 0 false (Error String or Function) 12 /Courier-Bold DrawText
206 580 262 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
208 578 260 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
208 578 258 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
210 567 249 0 0 0 0 false ("File" \050gv FONT-NAME :value\051 "not fo) 12 /Courier DrawText
14 495 14 546 476 546 6 0 0.46 0.46 0.46 true 0 0 [] 2 -1 0 0 0 false DrawPolyline
13 495 476 495 476 547 6 0 1.00 1.00 1.00 true 0 0 [] 2 -1 0 0 0 false DrawPolyline
20 527 76 0 0 0 0 false (If value is) 12 /Courier-Bold DrawText
101 540 367 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
103 538 365 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
103 538 363 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
105 527 60 0 0 0 0 false (:NOT-FONT) 12 /Courier DrawText
34 506 167 0 0 0 0 false (Error String or Function) 12 /Courier-Bold DrawText
206 519 262 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
208 517 260 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
208 517 258 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
210 506 250 0 0 0 0 false ("File" \050gv FONT-NAME :value\051 "is not) 12 /Courier DrawText
16 486 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
18 484 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
18 484 139 20 0 0 0 0 false 0 0 [] -1 0.0 .981 .981 .981 true DrawRectangle
21 470 133 0 0 0 0 false (Another Error Check) 12 /Courier DrawText
grestore

grestore

0 678 490 227 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier /Courier-BoldOblique 
%%BoundingBox: 72 287 540 504

%%EndDocument
 GE 31788 16668 MT
(value, which is then)
60 W( assigned to the widget's slot \050instance)59 W
8 SS 
42224 17436 MT
(2)SH
10 SS 
31788 17781 MT
(variable\051 called)72 W
/Courier SF
38374 XM
(:VALUE)SH
/Times-Roman SF
(.)SH
43268 XM
(This value can then be filtered)72 W
/Times-Bold SF
15198 18069 MT
(Figure 3:)SH
/Times-Roman SF
31788 18879 MT
(to derive the value seen by application programs, which is)78 W
9 SS 
7200 19083 MT
(This window allows)
4 W( the designer to specify the handling)3 W
10 SS 
31788 19977 MT
(set into the slot called)102 W
/Courier SF
41270 XM
(:FILTERED-VALUE)SH
/Times-Roman SF
(. This)
454 W( is im-)103 W
9 SS 
7200 20097 MT
(of error values.  When)22 W
/Courier SF
15610 XM
(Other Font)22 W
/Times-Roman SF
('s filtered value is)23 W
10 SS 
31788 21075 MT
(plemented as a constraint that sets the value of)
433 W( the)432 W
9 SS 
7200 21111 MT
(NIL, the first error string is printed,)
106 W( and when)105 W
/Courier SF
24876 XM
(Other)SH
7200 22125 MT
(Font)SH
/Times-Roman SF
9843 XM
(is the special value)258 W
/Courier SF
17925 XM
(:NOT-FONT)SH
/Times-Roman SF
(, the second)258 W
10 /Courier AF
31788 22173 MT
(:FILTERED-VALUE)SH
/Times-Roman SF
41488 XM
(slot whenever the value of)
450 W( the)451 W
9 SS 
7200 23139 MT
(string is printed.  The)55 W
/Courier SF
15425 XM
(Use Value of Object)54 W
/Times-Roman SF
26126 XM
(but-)SH
10 /Courier AF
31788 23271 MT
(:VALUE)SH
/Times-Roman SF
36026 XM
(slot changes.)
388 W( The)
1024 W( default constraint simply)387 W
9 SS 
7200 24153 MT
(ton is used to insert a reference to a selected)
185 W( object,)186 W
10 SS 
31788 24369 MT
(copies the value.  Experience has shown that most)
189 W( filter)190 W
9 SS 
7200 25167 MT
(here, the value of the)63 W
/Courier SF
15315 XM
(Font Name)63 W
/Times-Roman SF
20526 XM
(widget, which)
63 W( con-)62 W
10 SS 
31788 25467 MT
(expressions are rather short, often only)
168 W( one or two lines.)167 W
9 SS 
7200 26181 MT
(tains the current file name.  The)207 W
/Courier SF
20349 XM
(Another Error)207 W
10 /Times-Roman AF
31788 26565 MT
(Sometimes, it)
177 W( will be necessary to have longer, complex)178 W
9 /Courier AF
7200 27195 MT
(Check)SH
/Times-Roman SF
10406 XM
(button causes another)280 W
/Courier SF
19271 XM
(If value is)280 W
/Times-Roman SF
26276 XM
(and)SH
10 SS 
31788 27663 MT
(transformations or access to)
1162 W( application-specific)1161 W
9 /Courier AF
7200 28209 MT
(Error String)SH
/Times-Roman SF
13905 XM
(pair to appear.)SH
10 SS 
31788 28761 MT
(functionality and data.)
233 W( Here,)
717 W( a conventional text editor)234 W
24012 50 5400 29514 UL
31788 29859 MT
(would be)
260 W( used to create a function which will then be)259 W
31788 30957 MT
(called by the filter expression entered with)
50 W( Gilt.  However,)51 W
31788 32055 MT
(the function will be)
130 W( independent of the particular widgets)129 W
31788 33153 MT
(used since Gilt provides transformations of the arguments)120 W
31788 34251 MT
(and return values from the function.)SH
31788 36364 MT
(As was shown in the example, Gilt provides a number)
123 W( of)122 W
31788 37462 MT
(ways to specify the)
25 W( appropriate filtering of data and control)26 W
31788 38560 MT
(in the user interface, so the application code is)
35 W( independent)34 W
31788 39658 MT
(of the)
111 W( particular widgets used and the label strings shown)112 W
31788 40756 MT
(to the user.  All of these transformations)
226 W( use the same,)225 W
5 10 0 2106 55519 GB 
%%BeginDocument: enabledcontrolwin.PS
%!PS-Adobe-2.0
%%Title: Enable Control:  FONT-NAME-21317
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 7:54 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.95 0.95 scale

%
% Begin new window
%
0 -230 translate
gsave
0 685 495 225 ClipToRectangle
0 0 translate
gsave
0 685 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 666 350 0 0 0 0 false (Change my Enable for "Font Name") 18 /Courier-BoldOblique DrawText
14 634 109 0 0 0 0 false (Set enable with:) 12 /Courier-Bold DrawText
302 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 634 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 634 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 634 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 596 74 0 0 0 0 false (Expression:) 12 /Courier-Bold DrawText
329 620 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
331 618 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
331 618 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
334 604 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
14 475 159 0 0 0 0 false (Resulting Enable Value:) 12 /Courier-Bold DrawText
178 488 292 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
180 486 290 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
180 486 288 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
182 475 20 0 0 0 0 false (NIL) 12 /Courier DrawText
grestore


%
% Begin new window
%
12 -94 translate
gsave
0 685 460 90 ClipToRectangle
0 0 translate
gsave
0 685 460 90 0 0 0 0 false 0 0 [] -1 0.0 .999 .999 .999 true DrawRectangle
2 683 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 681 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 681 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 668 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 666 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 666 8 29 0 0 0 0 false 0 0 [] -1 0.0 .999 .999 .999 true DrawRectangle
10 680 14 670 5 670 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 .999 .999 .999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 670 10 680 DrawLine
10 622 5 632 15 632 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 .999 .999 .999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 622 15 632 DrawLine
22 612 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 610 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 610 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 610 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 608 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 608 292 8 0 0 0 0 false 0 0 [] -1 0.0 .999 .999 .999 true DrawRectangle
25 605 35 600 35 610 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 .999 .999 .999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 610 25 605 DrawLine
443 599 443 609 453 604 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 .999 .999 .999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 604 443 599 DrawLine
grestore


%
% Begin new window
%
20 0 translate
gsave
0 685 440 70 ClipToRectangle
0 0 translate
gsave
grestore


%
% Begin new window
%
0 0 translate
gsave
0 685 600 70 ClipToRectangle
0 0 translate
gsave
0 685 600 70 0 0 0 0 false 0 0 [] -1 0.0 .999 .999 .999 true DrawRectangle
5 669 197 0 0 0 0 false (\050if \050gv OTHER-FONT :selected\051) 12 /Courier DrawText
5 655 35 0 0 0 0 false (    T) 12 /Courier DrawText
5 641 53 0 0 0 0 false (    NIL\051) 12 /Courier DrawText
grestore

grestore

% 0 685 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

% 0 685 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 72 289 540 502

%%EndDocument
 GE 31788 41854 MT
(standard)SH
/Courier SF
35668 XM
(Control)SH
/Times-Roman SF
40360 XM
(windows shown in the previous)
242 W( ex-)243 W
/Times-Bold SF
15198 42663 MT
(Figure 4:)SH
/Times-Roman SF
31788 42952 MT
(amples. The)
808 W( following sections)
279 W( show how the various)278 W
9 SS 
7200 43677 MT
(The Gilt window)
16 W( that allows the designer to specify that)17 W
10 SS 
31788 44050 MT
(tasks that require call-backs in other toolkits)
46 W( are performed)47 W
9 SS 
7200 44691 MT
(the enable property of a widget depends on other)347 W
10 SS 
31788 45148 MT
(in Gilt.)SH
9 SS 
7200 45705 MT
(widgets. When)
739 W( the)257 W
/Courier SF
15403 XM
(Expression)SH
/Times-Roman SF
21285 XM
(returns NIL, the)258 W
7200 46719 MT
(widget is shown ``greyed-out.'')SH
12 /Times-Bold AF
31788 47752 MT
(4.1 Preparing Data for Applications)SH
24012 50 5400 48024 UL
10 /Times-Roman AF
31788 48850 MT
(Many call-backs in widgets simply filter the output)
7 W( value to)6 W
5400 49615 MT
(menu, then selecting the)104 W
/Courier SF
15787 XM
(Font Name)103 W
/Times-Roman SF
21643 XM
(widget, and finally)103 W
31788 49948 MT
(convert it to a)
207 W( form needed by the application program.)208 W
5400 50713 MT
(hitting the)9 W
/Courier SF
9752 XM
(Use Value of)
9 W( Object)10 W
/Times-Roman SF
21440 XM
(button, the designer)10 W
31788 51046 MT
(For example, for Figure 1, you might)
97 W( need as many as 13)96 W
5400 51811 MT
(can specify the appropriate dependencies.)
761 W( Since)1771 W
31788 52144 MT
(different call-backs in other)
108 W( toolkits to generate the single)109 W
/Courier SF
5400 52909 MT
(get-font-from-file)SH
/Times-Roman SF
16896 XM
(expects a string, no further)447 W
31788 53242 MT
(font value to be returned.)
110 W( In)
469 W( Gilt, the value of the dialog)109 W
5400 54007 MT
(transformations are needed.  If the font is)
165 W( not found, the)164 W
31788 54340 MT
(box is available in a variable, without requiring a call-back.)SH
/Courier SF
5400 55105 MT
(get-font-from-file)SH
/Times-Roman SF
16485 XM
(function returns error values, so)36 W
5400 56203 MT
(the)SH
/Courier SF
6877 XM
(Error Check)5 W
/Times-Roman SF
13737 XM
(window is used to specify the)
5 W( handling)4 W
31788 56453 MT
(Unlike most toolkits, Garnet provides values for)70 W
/Times-Italic SF
51832 XM
(groups)SH
/Times-Roman SF
54931 XM
(of)SH
5400 57301 MT
(of this \050Figure)
39 W( 3\051.  The designer types the appropriate error)40 W
31788 57551 MT
(widgets. For)
458 W( example, the default)
104 W( value of a radio button)103 W
5400 58399 MT
(return values and response strings into this window.)SH
31788 58649 MT
(set is the name of the radio button that is selected,)
11 W( or NIL if)12 W
31788 59747 MT
(none are.  For a set of check)
145 W( boxes \050that allows multiple)144 W
5400 60512 MT
(Next, the)
90 W( value of the entire dialog box is specified as the)89 W
31788 60845 MT
(selections\051, the value is a list of)
86 W( the selected buttons.  The)87 W
5400 61610 MT
(value of the pair of radio-buttons)130 W
/Courier SF
19622 XM
(Standard Font)130 W
/Times-Roman SF
27932 XM
(and)SH
31788 61943 MT
(innovation in Gilt is that the designer can)
217 W( specify alter-)216 W
/Courier SF
5400 62708 MT
(Other Font)32 W
/Times-Roman SF
(, and now the dialog box will return a single)31 W
31788 63041 MT
(native values for widgets.  In the example, the)
51 W( value of the)52 W
5400 63806 MT
(value, computed based on the settings of the widgets.)SH
31788 64139 MT
(pair of radio buttons)198 W
/Courier SF
40968 XM
(Standard Font/Other Font)198 W
/Times-Roman SF
31788 65237 MT
(will be a font object.)SH
5400 65919 MT
(Finally, the)
250 W( designer needs to specify when the various)251 W
5400 67017 MT
(widgets should be disabled \050greyed out\051.  First, the)
7 W( designer)6 W
31788 67350 MT
(Many of the)
136 W( desired transformations of the values can be)137 W
5400 68115 MT
(selects the)96 W
/Courier SF
9980 XM
(Font Name)96 W
/Times-Roman SF
15823 XM
(text field, and then brings up the)97 W
31788 68448 MT
(achieved by simple type conversions:)
406 W( from strings to)405 W
/Courier SF
5400 69213 MT
(Change my Enable)73 W
/Times-Roman SF
15469 XM
(window \050see Figure 4\051.  Note)
73 W( that)72 W
31788 69546 MT
(keywords, atoms, numbers, etc.)
56 W( Therefore,)
364 W( Gilt provides a)57 W
5400 70311 MT
(this window)
86 W( has the same general form as the Value Con-)87 W
5400 71409 MT
(trol window, but simply controls a different)
35 W( property of the)34 W
10800 50 31788 71927 UL
5400 72507 MT
(widgets \050the enable flag rather than the)
120 W( value\051.  Next, the)121 W
6 SS 
32588 73266 MT
(2)SH
8 SS 
32888 73575 MT
(All slot names in Garnet start with a colon.)SH
ES
%%Page: 4 5
BS
0 SI
10 /Times-Roman AF
5400 6311 MT
(number of built-in data transformations:)SH
/Symbol SF
5590 7764 MT
(\267)SH
/Times-Roman SF
6300 XM
(String to Lisp atom \050e.g.)SH
/Courier SF
16328 XM
("Bold")SH
/Times-Roman SF
20178 XM
(to)SH
/Courier SF
21206 XM
('BOLD)SH
/Times-Roman SF
(\051.)SH
/Symbol SF
5590 8869 MT
(\267)SH
/Times-Roman SF
6300 XM
(String to Lisp keyword \050e.g.)SH
/Courier SF
17827 XM
("Bold")SH
/Times-Roman SF
21677 XM
(to)SH
/Courier SF
22705 XM
(:BOLD)SH
/Times-Roman SF
(\051.)SH
/Symbol SF
5590 9974 MT
(\267)SH
/Times-Roman SF
6300 XM
(String to index of item in the set)
4 W( of buttons \050e.g.)3 W
/Courier SF
25812 XM
("Bold")SH
/Times-Roman SF
6300 11079 MT
(to 0\051.)SH
/Symbol SF
5590 12184 MT
(\267)SH
/Times-Roman SF
6300 XM
(String to number \050e.g.)SH
/Courier SF
15355 XM
("10")SH
/Times-Roman SF
18005 XM
(to)SH
/Courier SF
19033 XM
(10)SH
/Times-Roman SF
(\051.)SH
/Symbol SF
5590 13289 MT
(\267)SH
/Times-Roman SF
6300 XM
(Integer range to a different integer or float range.)SH
5400 14628 MT
(Similar transformations would be appropriate)
80 W( for a builder)81 W
5400 15726 MT
(generating other computer languages, like C)
303 W( or Pascal,)302 W
5400 16824 MT
(which might)
181 W( automatically create enumerated types, sets,)182 W
5400 17922 MT
(bit vectors, or named constants.)SH
5400 20035 MT
(Gilt tries to automatically pick the appropriate transfor-)255 W
5400 21133 MT
(mation. There)
584 W( are two techniques used)
167 W( to guess what is)168 W
5 10 0 28519 33225 GB 
%%BeginDocument: colordb.PS
%!PS-Adobe-2.0
%%Title: Color Selection
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 8:18 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
4 -168 translate
gsave
0 648 459 311 ClipToRectangle
0 0 translate
gsave
0 648 459 311 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
314 571 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
316 569 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
316 569 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
316 426 12 48 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
318 424 10 46 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
318 424 8 44 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
0 1.00 1.00 1.00 true 0 0 [] 2 326 402 318 402 DrawLine
0 0.46 0.46 0.46 true 0 0 [] 2 326 400 318 400 DrawLine
290 398 19 0 0 0 0 false (100) 12 /Courier DrawText
370 571 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
372 569 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
372 569 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
372 483 12 48 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
374 481 10 46 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
374 481 8 44 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
0 1.00 1.00 1.00 true 0 0 [] 2 382 459 374 459 DrawLine
0 0.46 0.46 0.46 true 0 0 [] 2 382 457 374 457 DrawLine
353 455 12 0 0 0 0 false (60) 12 /Courier DrawText
426 571 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
428 569 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
428 569 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
428 511 12 48 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
430 509 10 46 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
430 509 8 44 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
0 1.00 1.00 1.00 true 0 0 [] 2 438 487 430 487 DrawLine
0 0.46 0.46 0.46 true 0 0 [] 2 438 485 430 485 DrawLine
408 483 13 0 0 0 0 false (40) 12 /Courier DrawText
217 631 78 40 0 0 0 0 false 0 0 [] 1 0.0 1.00 0.60 0.40 true DrawRectangle
333 623 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
335 621 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
335 621 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
338 609 13 0 0 0 0 false (OK) 12 /Courier DrawText
393 623 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
395 621 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
395 621 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
398 609 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
303 361 22 0 0 0 0 false (Red) 12 /Courier-Bold DrawText
353 361 34 0 0 0 0 false (Green) 12 /Courier-Bold DrawText
415 361 28 0 0 0 0 false (Blue) 12 /Courier-Bold DrawText
11 620 164 0 0 0 0 false (Color Selection) 18 /Courier-Bold DrawText
74 586 34 0 0 0 0 false (White) 12 /Courier DrawText
74 548 35 0 0 0 0 false (Black) 12 /Courier DrawText
74 510 70 0 0 0 0 false (Motif-gray) 12 /Courier DrawText
74 472 69 0 0 0 0 false (Motif-blue) 12 /Courier DrawText
74 396 83 0 0 0 0 false (Motif-orange) 12 /Courier DrawText
74 434 77 0 0 0 0 false (Motif-green) 12 /Courier DrawText
74 358 21 0 0 0 0 false (Red) 12 /Courier DrawText
240 549 34 0 0 0 0 false (Green) 12 /Courier DrawText
240 511 27 0 0 0 0 false (Blue) 12 /Courier DrawText
240 473 42 0 0 0 0 false (Yellow) 12 /Courier DrawText
240 435 41 0 0 0 0 false (Purple) 12 /Courier DrawText
240 397 27 0 0 0 0 false (Cyan) 12 /Courier DrawText
240 359 40 0 0 0 0 false (Orange) 12 /Courier DrawText
13 604 52 28 0 0 0 0 false 0 0 [] 1 1.0 1.00 1.00 1.00 true DrawRectangle
13 566 52 28 0 0 0 0 false 0 0 [] 1 0.0 0 0 0 false DrawRectangle
13 528 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.83 0.83 0.83 true DrawRectangle
13 490 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.45 0.62 1.00 true DrawRectangle
13 452 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.37 0.62 0.63 true DrawRectangle
13 414 52 28 0 0 0 0 false 0 0 [] 1 0.0 1.00 0.60 0.40 true DrawRectangle
13 376 52 28 0 0 0 0 false 0 0 [] 1 0.0 1.00 0.00 0.00 true DrawRectangle
180 566 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.00 1.00 0.00 true DrawRectangle
180 528 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.00 0.00 1.00 true DrawRectangle
180 490 52 28 0 0 0 0 false 0 0 [] 1 0.0 1.00 1.00 0.00 true DrawRectangle
180 452 52 28 0 0 0 0 false 0 0 [] 1 0.0 1.00 0.00 1.00 true DrawRectangle
180 414 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.00 1.00 1.00 true DrawRectangle
180 376 52 28 0 0 0 0 false 0 0 [] 1 0.0 0.75 0.25 0.00 true DrawRectangle
10 417 58 34 0 0 0 0 false 0 0 [] 4 -1 0 0 0 false DrawRectangle
grestore

grestore

0 648 459 311 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier 
%%BoundingBox: 76 241 535 552

%%EndDocument
 GE 5400 22231 MT
(appropriate.)SH
/Times-Bold SF
41586 22769 MT
(Figure 5:)SH
9 /Times-Roman AF
33588 23783 MT
(The color selection dialog box created using)
400 W( Gilt)401 W
10 SS 
5400 24344 MT
(First, the designer can type an example value into the)294 W
9 SS 
33588 24797 MT
(\050naturally, this is in)
119 W( color on the screen\051.  There are a)118 W
10 /Courier AF
5400 25442 MT
(Resulting Filtered Value)126 W
/Times-Roman SF
20428 XM
(field at the bottom of)126 W
9 SS 
33588 25811 MT
(number of dependencies among the widgets that were)143 W
10 SS 
5400 26540 MT
(the)SH
/Courier SF
6960 XM
(Exported Value Control)88 W
/Times-Roman SF
20674 XM
(window \050Figure 2-a\051.)88 W
9 SS 
33588 26825 MT
(defined by)
1 W( demonstration.  If one of the color buttons on)SH
10 SS 
5400 27638 MT
(In this case, Gilt will try to guess a)
33 W( transformation that will)34 W
9 SS 
33588 27839 MT
(the left is)
91 W( selected, the sliders adjust to the appropriate)92 W
10 SS 
5400 28736 MT
(convert the)
9 W( current unfiltered value into the specified value,)8 W
9 SS 
33588 28853 MT
(position for that color.  If the)
183 W( sliders are moved, the)182 W
10 SS 
5400 29834 MT
(using the above rules.  If none of the)
245 W( built-in transfor-)246 W
9 SS 
33588 29867 MT
(highlight in the color buttons)
364 W( \050here shown around)365 W
/Courier SF
33588 30881 MT
(Motif-orange)SH
/Times-Roman SF
(\051, goes to the appropriate color)
312 W( or)311 W
10 SS 
5400 30932 MT
(mations is appropriate, then Gilt creates)
45 W( a)44 W
/Courier SF
22599 XM
(case)SH
/Times-Roman SF
25293 XM
(statement.)SH
9 SS 
33588 31895 MT
(goes off.)
241 W( The)
708 W( rectangle in the upper center always)242 W
10 SS 
5400 32030 MT
(The designer can)
236 W( then operate the widget to put it into)237 W
9 SS 
33588 32909 MT
(shows the)
96 W( current color.  The filtered value of the rec-)95 W
10 SS 
5400 33128 MT
(different states \050and therefore to change)
351 W( the unfiltered)350 W
9 SS 
33588 33923 MT
(tangle is its color, and the value)
161 W( of the dialog box is)162 W
10 SS 
5400 34226 MT
(value\051, and type the desired filtered)
186 W( value for each case.)187 W
9 SS 
33588 34937 MT
(defined as the filtered value of the rectangle.)SH
10 SS 
5400 35324 MT
(This allows)
141 W( arbitrary transformations \050e.g., converting the)140 W
24012 50 31788 36242 UL
5400 36422 MT
(German)SH
/Courier SF
9445 XM
("Fettdruck")SH
/Times-Roman SF
16869 XM
(or the French)574 W
/Courier SF
24173 XM
("Gras")SH
/Times-Roman SF
28598 XM
(to)SH
/Courier SF
5400 37520 MT
(:BOLD)SH
/Times-Roman SF
(\051. The)
449 W( resulting code for the filter is shown in the)99 W
31788 38052 MT
(requests the designer to give an example)
131 W( of the value the)132 W
/Courier SF
5400 38618 MT
(Filter Expression)SH
/Times-Roman SF
15850 XM
(window.)SH
31788 39150 MT
(function would return.)SH
5400 40731 MT
(The second option is used when the)
81 W( designer enters a pro-)82 W
31788 41263 MT
(Sometimes, the)
17 W( value of a widget might be computed based)16 W
5400 41829 MT
(cedure into the filter expression,)
91 W( and then selects a widget)90 W
31788 42361 MT
(on the values of)58 W
/Times-Italic SF
38631 XM
(multiple)SH
/Times-Roman SF
42218 XM
(other widgets.  In the example of)59 W
5400 42927 MT
(to supply the value to a)
61 W( parameter of the procedure.  Here,)62 W
31788 43459 MT
(section 3, the value of the)60 W
/Courier SF
42674 XM
(Standard Font)60 W
/Times-Roman SF
50844 XM
(radio button)59 W
5400 44025 MT
(Gilt tries to find an appropriate transformation so that the)118 W
31788 44557 MT
(is computed based on the values of three sets of)
145 W( buttons.)146 W
5400 45123 MT
(widget value will be filtered into the required)
131 W( type of the)132 W
31788 45655 MT
(The default expression creates a list out of the)
101 W( values, but)100 W
5400 46221 MT
(parameter. This)
474 W( is the technique used in the example.)
112 W( A)472 W
31788 46753 MT
(by editing the)
53 W( filter expression, it is easy to create a record)54 W
/Courier SF
5400 47319 MT
(Value Control)171 W
/Times-Roman SF
13792 XM
(window will pop)
171 W( up to confirm each)172 W
31788 47851 MT
(or structure)
196 W( instead of a list, or to process the values in)195 W
5400 48417 MT
(transformation, and)
106 W( also to request the designer to specify)105 W
31788 48949 MT
(various ways.  In Figure)
75 W( 2-b, the)76 W
/Courier SF
45564 XM
(get-standard-font)SH
/Times-Roman SF
5400 49515 MT
(the transformation if Gilt cannot infer it.)SH
31788 50047 MT
(routine is called on the values of three)
92 W( widgets to return a)91 W
31788 51145 MT
(single font object.)SH
5400 51628 MT
(A number of standard)
56 W( procedures are provided in a pop-up)57 W
5400 52726 MT
(menu, so the designer can often)
96 W( select a procedure for the)95 W
31788 53258 MT
(Gilt allows decorations to be added to the dialog)
195 W( boxes,)196 W
5400 53824 MT
(filter expression rather than)
403 W( typing it.  The provided)404 W
31788 54356 MT
(such as rectangles, lines)
32 W( and labels.  These normally do not)31 W
5400 54922 MT
(routines will transform a string into a file pointer, a string)95 W
31788 55454 MT
(have a)
169 W( value, but they can be given one using a)170 W
/Courier SF
52764 XM
(Value)SH
/Times-Roman SF
5400 56020 MT
(into a font)
347 W( pointer, numbers or a string into a color,)348 W
/Courier SF
31788 56552 MT
(Control)SH
/Times-Roman SF
36334 XM
(window. For)
442 W( example, the rectangle at the)
96 W( up-)95 W
5400 57118 MT
(keywords into a font, etc.  If one of these)
82 W( is selected from)81 W
31788 57650 MT
(per center of Figure 5 shows the current)
220 W( selected color.)221 W
5400 58216 MT
(the menu, the appropriate code is entered into)
42 W( the)43 W
/Courier SF
25776 XM
(Filter)SH
/Times-Roman SF
31788 58748 MT
(The value of this rectangle should be its color.)
49 W( To)
346 W( achieve)48 W
/Courier SF
5400 59314 MT
(Expression)SH
/Times-Roman SF
11759 XM
(field. Because)
467 W( these routines take abstract)108 W
31788 59846 MT
(this, the designer can type)163 W
/Courier SF
43268 XM
(\050gv :self :COLOR\051)163 W
/Times-Roman SF
54208 XM
(into)SH
5400 60412 MT
(values as parameters, and return a value of)
72 W( the appropriate)73 W
8 SS 
46150 60614 MT
(3)SH
10 SS 
31788 60959 MT
(the)SH
/Courier SF
33379 XM
(Filter Expression)119 W
/Times-Roman SF
44067 XM
(field.)SH
47288 XM
(To make this a little)119 W
5400 61510 MT
(type \050such)
264 W( as a font object\051, the implementation of the)263 W
31788 62057 MT
(easier, the designer can choose)
264 W( the desired field of the)263 W
5400 62608 MT
(routines is entirely independent)
210 W( of the widgets.  In fact,)211 W
31788 63155 MT
(selected object from a pop-up menu.)SH
5400 63706 MT
(standard, built-in)
454 W( routines, such as the Lisp function)453 W
/Courier SF
5400 64804 MT
(probe-file)SH
/Times-Roman SF
(, can be used in many cases.)SH
31788 65268 MT
(The user can check that the filter expression is achieving)143 W
31788 66366 MT
(the desired result in two ways.  First, the interface)
107 W( can be)106 W
5400 66917 MT
(Gilt can execute the filter expressions,)
418 W( including any)417 W
31788 67464 MT
(exercised to test the code.  Second, the)582 W
/Courier SF
52164 XM
(Filter)SH
/Times-Roman SF
5400 68015 MT
(procedures entered by the designer,)
22 W( by using the Lisp inter-)23 W
/Courier SF
31788 68562 MT
(Expression)SH
/Times-Roman SF
38042 XM
(field shows the Lisp code that)
4 W( is being used.)3 W
5400 69113 MT
(preter. Therefore,)
710 W( when Gilt)
230 W( is put in ``run-mode'' the)229 W
5400 70211 MT
(actions will)
69 W( happen just as they will for the end user.  Gilt)70 W
10800 50 31788 71003 UL
5400 71309 MT
(first checks to make sure that all procedures are defined,)
40 W( in)39 W
6 SS 
32588 72342 MT
(3)SH
10 SS 
5400 72407 MT
(case the designer has entered)
33 W( an application-specific proce-)34 W
8 /Courier AF
32888 72651 MT
(gv)SH
/Times-Roman SF
34123 XM
(stands for ``get value'' and it)
75 W( looks in the specified object for the)74 W
10 SS 
5400 73505 MT
(dure that)
204 W( is not implemented yet.  In this situation, Gilt)203 W
8 SS 
31788 73575 MT
(specified slot.)SH
ES
%%Page: 5 6
BS
0 SI
10 /Times-Roman AF
5400 6311 MT
(In the future, we will be investigating other techniques for)78 W
5400 7409 MT
(showing the transformations that will)
213 W( be usable by non-)212 W
5400 8507 MT
(programmers. For)
664 W( example, the filter)
207 W( expressions might)208 W
5400 9605 MT
(use normal arithmetic expressions,)
210 W( or we might create a)209 W
5400 10703 MT
(special graphical programming language.)SH
12 /Times-Bold AF
5400 13307 MT
(4.2 Error Handling)SH
10 /Times-Roman AF
5400 14405 MT
(Call-back procedures in other toolkits)
247 W( are often used to)248 W
5400 15503 MT
(check for error values, especially in text input fields.)
87 W( Gilt)423 W
5 10 0 28494 30725 GB 
%%BeginDocument: changevalue.PS
%!PS-Adobe-2.0
%%Title: Change Value of:  TOPLEVELFONT-19926
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 7:50 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.95 0.95 scale

%
% Begin new window
%
0 -230 translate
gsave
0 685 495 225 ClipToRectangle
0 0 translate
gsave
0 685 495 225 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
4 666 427 0 0 0 0 false (Change my Value for "std-or-other-font") 18 /Courier-BoldOblique DrawText
14 634 102 0 0 0 0 false (Set value with:) 12 /Courier-Bold DrawText
302 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
304 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
304 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
307 634 13 0 0 0 0 false (OK) 12 /Courier DrawText
362 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
364 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
364 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
367 634 35 0 0 0 0 false (Apply) 12 /Courier DrawText
422 648 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
424 646 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
424 646 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
427 634 41 0 0 0 0 false (Cancel) 12 /Courier DrawText
12 596 74 0 0 0 0 false (Expression:) 12 /Courier-Bold DrawText
152 620 143 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
154 618 141 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
154 618 139 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
157 604 133 0 0 0 0 false (Use Value of Object) 12 /Courier DrawText
309 620 163 24 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
311 618 161 22 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
311 618 159 20 0 0 0 0 false 0 0 [] -1 0.0 0.981 0.981 0.981 true DrawRectangle
314 604 153 0 0 0 0 false (Use Value of Parameter) 12 /Courier DrawText
14 475 110 0 0 0 0 false (Resulting Value:) 12 /Courier-Bold DrawText
129 488 341 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
131 486 339 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
131 486 337 14 0 0 0 0 false 0 0 [] -1 0.0 0.97 0.97 0.97 true DrawRectangle
133 475 108 0 0 0 0 false ("Standard Font:") 12 /Courier DrawText
grestore


%
% Begin new window
%
12 -94 translate
gsave
0 685 460 90 ClipToRectangle
0 0 translate
gsave
0 685 460 90 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
2 683 16 66 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
4 681 14 64 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
4 681 12 62 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
4 668 12 33 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
6 666 10 31 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
6 666 8 29 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
10 680 14 670 5 670 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 5 670 10 680 DrawLine
10 622 5 632 15 632 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 10 622 15 632 DrawLine
22 612 436 16 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
24 610 434 14 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
24 610 432 12 0 0 0 0 false 0 0 [] -1 0.0 0.76 0.76 0.76 true DrawRectangle
37 610 296 12 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
39 608 294 10 0 0 0 0 false 0 0 [] -1 0.0 0.50 0.50 0.49 true DrawRectangle
39 608 292 8 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
25 605 35 600 35 610 6 0 0.50 0.50 0.49 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 35 610 25 605 DrawLine
443 599 443 609 453 604 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.999 0.999 0.999 true DrawPolyline
0 0.50 0.50 0.49 true 0 0 [] 2 453 604 443 599 DrawLine
grestore


%
% Begin new window
%
20 0 translate
gsave
0 685 440 70 ClipToRectangle
0 0 translate
gsave
grestore


%
% Begin new window
%
0 0 translate
gsave
0 685 600 70 ClipToRectangle
0 0 translate
gsave
0 685 600 70 0 0 0 0 false 0 0 [] -1 0.0 0.999 0.999 0.999 true DrawRectangle
5 669 204 0 0 0 0 false (\050if \050is-a-standard-font PARAM\051) 12 /Courier DrawText
5 655 138 0 0 0 0 false (    "Standard Font:") 12 /Courier DrawText
5 641 123 0 0 0 0 false (    "Other Font:"\051) 12 /Courier DrawText
grestore

grestore

% 0 685 600 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

% 0 685 440 70 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 460 90 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle
grestore

0 685 495 225 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier /Courier-Bold /Courier-BoldOblique 
%%BoundingBox: 72 289 540 502

%%EndDocument
 GE 5400 16601 MT
(provides a standard error-filtering mechanism that min-)293 W
5400 17699 MT
(imizes the connections between the)
232 W( error checking code)231 W
/Times-Bold SF
41586 17869 MT
(Figure 6:)SH
/Times-Roman SF
5400 18797 MT
(and the widgets.  The designer)
178 W( can bring up the)179 W
/Courier SF
26376 XM
(Error)SH
9 /Times-Roman AF
33588 18883 MT
(The Gilt window to)
255 W( cause the displayed value of a)256 W
10 /Courier AF
5400 19895 MT
(Check)SH
/Times-Roman SF
8738 XM
(window \050Figure 3\051,)
88 W( and type a value into the)87 W
/Courier SF
27576 XM
(if-)SH
9 /Times-Roman AF
33588 19897 MT
(widget to change based on other)
195 W( widgets.  Here, the)194 W
/Courier SF
33588 20911 MT
(Standard Font/Other Font)298 W
/Times-Roman SF
47667 XM
(radio buttons)
298 W( of)299 W
10 /Courier AF
5400 20993 MT
(value-is)SH
/Times-Roman SF
10637 XM
(field. If)
624 W( the filtered value)
187 W( for the widget is)188 W
9 SS 
33588 21925 MT
(Figure 1)
156 W( are set based on the value of the parameter.)155 W
10 SS 
5400 22091 MT
(ever equal to the)98 W
/Courier SF
12679 XM
(if-value-is)SH
/Times-Roman SF
19627 XM
(value, then an error)
98 W( has)97 W
9 SS 
33588 22939 MT
(The designer)
5 W( only had to select the)6 W
/Courier SF
46404 XM
(is-a-standard-)SH
10 /Times-Roman AF
5400 23189 MT
(occurred. If)
472 W( the)111 W
/Courier SF
12480 XM
(Error String)111 W
/Times-Roman SF
20152 XM
(field contains a string,)112 W
9 /Courier AF
33588 23953 MT
(font)SH
/Times-Roman SF
35986 XM
(procedure from a menu, the rest of the)
13 W( expression)12 W
10 SS 
5400 24287 MT
(then a error dialog box is)
140 W( popped-up showing that string.)139 W
9 SS 
33588 24967 MT
(was entered by Gilt as)
187 W( the widgets in Figure 1 were)188 W
10 SS 
5400 25385 MT
(The string can embed references to other widgets)
44 W( using the)45 W
9 SS 
33588 25981 MT
(operated.)SH
10 /Courier AF
5400 26483 MT
(Use-Value-of-Object)SH
/Times-Roman SF
17216 XM
(button, for)
166 W( example, to show)165 W
24012 50 31788 27286 UL
5400 27581 MT
(the incorrect value.  Alternatively, if the)59 W
/Courier SF
22116 XM
(Error String)60 W
/Times-Roman SF
5400 28679 MT
(field contains an expression or function call, then)
101 W( it is ex-)100 W
31788 29096 MT
(for the parameter.)
235 W( If)
718 W( an application wants to display a)234 W
5400 29777 MT
(ecuted.)SH
8 SS 
49010 29864 MT
(4)SH
10 SS 
31788 30209 MT
(window designed in Gilt, it can simply call)SH
8 /Courier AF
33708 31422 MT
(\050Show-Dialog)SH
/Times-Italic SF
39948 XM
(dialog-name param1 param2)SH
/Courier SF
49849 XM
(...\051)SH
10 /Times-Roman AF
5400 31890 MT
(Alternatively, an expression using the value of the widget)112 W
31788 32774 MT
(For example, the)
73 W( font dialog box of Figure 1 would take a)74 W
5400 32988 MT
(can be)
17 W( entered into the)16 W
/Courier SF
14784 XM
(if-value-is)SH
/Times-Roman SF
21650 XM
(field, which should)16 W
31788 33872 MT
(single font object as a parameter.)
205 W( Thus,)
658 W( the application)204 W
5400 34086 MT
(return T if an error should be reported.)
157 W( For)
566 W( example, to)158 W
31788 34970 MT
(causes the dialog box to appear while)
56 W( still being independ-)57 W
5400 35184 MT
(report an error if)
4 W( an input number is odd, the designer could)3 W
31788 36068 MT
(ent of how the parameters are used to set the widgets.)SH
5400 36282 MT
(simply enter)2438 W
/Courier SF
15498 XM
(\050oddp \050gv :self)2439 W
5400 37380 MT
(:FILTERED-VALUE\051\051)SH
/Times-Roman SF
(. If)
890 W( the)
320 W( filter expression itself)319 W
31788 38181 MT
(For ``modal'' dialog boxes \050that)
32 W( require the user to say OK)31 W
5400 38478 MT
(returns an error message string,)
157 W( then the)158 W
/Courier SF
22776 XM
(if-value-is)SH
/Times-Roman SF
31788 39279 MT
(or CANCEL before doing)
797 W( other operations\051, the)798 W
5400 39576 MT
(might just test if the filtered value)
261 W( is a string, and the)260 W
/Courier SF
31788 40377 MT
(Show-Dialog)SH
/Times-Roman SF
38720 XM
(routine will return the value of the dialog)82 W
/Courier SF
5400 40674 MT
(Error String)914 W
/Times-Roman SF
14678 XM
(would just)
914 W( be)915 W
/Courier SF
23061 XM
(\050gv :self)915 W
/Times-Roman SF
31788 41475 MT
(box. The)
398 W( designer can specify the value of the dialog box)74 W
/Courier SF
5400 41772 MT
(:FILTERED-VALUE\051)SH
/Times-Roman SF
(.)SH
31788 42573 MT
(using a)122 W
/Courier SF
35143 XM
(Value Control)122 W
/Times-Roman SF
43437 XM
(window, as)
122 W( was shown in the)121 W
31788 43671 MT
(example. For)
727 W( non-modal dialog boxes,)239 W
/Courier SF
49164 XM
(Show-Dialog)SH
/Times-Roman SF
5400 43885 MT
(There can be)
573 W( multiple)572 W
/Courier SF
16688 XM
(if-value-is)SH
/Times-Roman SF
24110 XM
(and)SH
/Courier SF
26376 XM
(Error)SH
/Times-Roman SF
31788 44769 MT
(will return immediately, and the)
54 W( designer can attach a call-)53 W
/Courier SF
5400 44983 MT
(String)SH
/Times-Roman SF
9354 XM
(pairs, which would be useful, for example, for a)104 W
31788 45867 MT
(back procedure to the OK button.)
31 W( Of)
314 W( course, this call-back)32 W
5400 46081 MT
(font finding routine that returned different)
100 W( values to tell if)99 W
31788 46965 MT
(will be passed)
6 W( the filtered value of the window, so it will be)5 W
5400 47179 MT
(the file was not found, or if the file was not a)
38 W( valid font, as)39 W
31788 48063 MT
(independent of the)
86 W( widgets that are used in the window to)87 W
5400 48277 MT
(in Figure 3.  The)319 W
/Courier SF
13939 XM
(get-font-from-file)SH
/Times-Roman SF
25308 XM
(filter will)318 W
31788 49161 MT
(enter the value.)SH
5400 49375 MT
(return a font, or NIL)
500 W( if the file is not found, or)501 W
/Courier SF
5400 50473 MT
(:NOT-FONT)SH
/Times-Roman SF
11050 XM
(if the file is found, but it is not a font.)SH
11 /Times-Bold AF
31788 51698 MT
(4.3.2 Using the Parameters)SH
10 /Times-Roman AF
31788 52796 MT
(To set the value of a widget)
114 W( based on the parameters, the)115 W
12 /Times-Bold AF
5400 53077 MT
(4.3 Preparing Data to be Shown to the User)SH
10 /Times-Roman AF
31788 53894 MT
(designer uses the)366 W
/Courier SF
39968 XM
(Change my Value)366 W
/Times-Roman SF
50316 XM
(window \050see)366 W
5400 54175 MT
(Most toolkits require that the designer create)
263 W( additional)262 W
31788 54992 MT
(Figure 6\051.)
417 W( The)
1085 W( primary difference from the)418 W
/Courier SF
52764 XM
(Value)SH
/Times-Roman SF
5400 55273 MT
(procedures to)64 W
/Times-Italic SF
11193 XM
(set)SH
/Times-Roman SF
12619 XM
(the widgets based on application-specific)65 W
/Courier SF
31788 56090 MT
(Control)SH
/Times-Roman SF
36254 XM
(window shown earlier is that here we are)
16 W( chang-)15 W
5400 56371 MT
(data. For)
734 W( example, when many dialog)
242 W( boxes are made)241 W
31788 57188 MT
(ing the value shown to the user,)
28 W( rather than simply filtering)29 W
5400 57469 MT
(visible, the)
83 W( values of some widgets should be set to a par-)84 W
31788 58286 MT
(the value returned by)
32 W( the widget.  However, this window is)31 W
5400 58567 MT
(ticular value.  If)
207 W( a widget should)206 W
/Times-Italic SF
20065 XM
(always)SH
/Times-Roman SF
23299 XM
(have the same)206 W
31788 59384 MT
(very similar to the)41 W
/Courier SF
39507 XM
(Value Control)41 W
/Times-Roman SF
47639 XM
(window, and the in-)42 W
5400 59665 MT
(value when the dialog box)
127 W( appears, then the designer can)128 W
31788 60482 MT
(terface to the designer is essentially the same.)SH
5400 60763 MT
(simply supply this value by example,)
103 W( as in other interface)102 W
5400 61861 MT
(builders like Druid)
102 W( [12].)
SH( However,)
455 W( it is very common for)103 W
31788 62595 MT
(The result of the expression should be an appropriate value)38 W
5400 62959 MT
(the initial)
269 W( values for widgets to depend on application-)268 W
31788 63693 MT
(for the widget.  For example,)
53 W( Figure 6 calculates the string)54 W
5400 64057 MT
(supplied data.)
147 W( For)
545 W( example, when the font dialog box is)148 W
5400 65155 MT
(made visible by)
57 W( an application, it should reflect the font of)56 W
5400 66253 MT
(the selected)
10 W( object, or if there is no object selected, then the)11 W
5400 67351 MT
(current global default.  The next sections discuss how)
78 W( Gilt)77 W
5400 68449 MT
(allows this to be specified easily.)SH
10800 50 31788 70079 UL
11 /Times-Bold AF
5400 70986 MT
(4.3.1 Defining Parameters to the Dialog Box)SH
6 /Times-Roman AF
32588 71418 MT
(4)SH
8 SS 
32888 71727 MT
(In a language that)
6 W( does not support functions with a variable number of)7 W
10 SS 
5400 72084 MT
(When a window is designed in Gilt,)
40 W( parameters to the win-)39 W
8 SS 
31788 72651 MT
(arguments, a Gilt-like)
995 W( builder could create a different)994 W
10 SS 
5400 73182 MT
(dow can be specified, along)
53 W( with an example current value)54 W
8 /Courier AF
31788 73575 MT
(show-<dialog-name>)SH
/Times-Roman SF
40628 XM
(routine for each window designed.)SH
ES
%%Page: 6 7
BS
0 SI
10 /Times-Roman AF
31788 6311 MT
(dow. The)
418 W( expression in this window is expected to return)84 W
31788 7409 MT
(an integer to tell how many copies of)
281 W( the widgets are)282 W
31788 8507 MT
(desired. Alternatively,)
536 W( the expression can return a list)
143 W( of)142 W
31788 9605 MT
(values, in which case, the number of)
31 W( copies depends on the)32 W
31788 10703 MT
(length of)
239 W( the list.  Here, each copy is assigned the ap-)238 W
31788 11801 MT
(propriate element from the list.)
89 W( For)
429 W( example, in Figure 7,)90 W
22978 7193 5917 5625 BC 7 10 0 -3931 38940 GB 
%%BeginDocument: c32copyfiga.PS
%!PS-Adobe-1.0
%%Creator: GEM.GARNET.CS.CMU.EDU:bam (Brad Myers)
%%Title: t1.bmt (Gilt Work Window)
%%CreationDate: Sun May 19 17:39:56 1991
%%EndComments
%%%Pages: 1
%%EndProlog
%%%Page: 1 1

/bitdump % stk: width, height, iscale
% dump a bit image with lower left corner at current origin,
% scaling by iscale (iscale=1 means 1/300 inch per pixel)
{
        % read arguments
        /iscale exch def
        /height exch def
        /width exch def

        % scale appropriately
        width iscale mul height iscale mul scale

        % allocate space for one scanline of input
        /picstr % picstr holds one scan line
                width 7 add 8 idiv % width of image in bytes = ceiling(width/8)
                string
                def

        % read and dump the image
        width height 1 [width 0 0 height neg 0 height]
        { currentfile picstr readhexstring pop }
        image
} def
%%BoundingBox: 141 314 470 477
72 300 div dup scale
591 1309 translate
456 227 3 bitdump
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffe7ffffffffffffc3f87fffffffff9fffffffe7fcfffffffffffff9ffff3ffffffffffffffffffffffffffffffffffffffff
ffffc27ffffffffe7fffffffffc2701e03fffffc0ff9ffffffe07f8fffffffff86181ffff3ffffffffffffffffffffffffffffffffffffffff
ffff007fffffffffffffffffff00739cf3fffffc0fffffffffe0ff9fffffffff86183ffff3ffffffffffffffffffffffffffffffffffffffff
fffe3cf0708f0c30f847e11ffe3cff1cf3ffffff3fc3e11f83fcff3fc27fffffce7f3fff803e0fffffffffffffffffffffffffffffffffffff
fffe7cc030070c30f803803ffe7cfe3fe3e7fcff3fc3e00e01fcff7f807fff9fccff3fff803807ffffffffffffffffffffffffffffffffffff
fffcff8f18e39e7cfc731c7ffcfff0ffc7e7fcfe7ff3f1cc78f9ffff3cffff9fe1fe7fffe7f1e3ffffffffffffffffffffffffffffffffffff
fffcff9f99f3ccfcfcf33e7ffcfff07f8ffffffe7ff3f3ccfcf9ffff0fffffffe3fe7fffe7f3f3ffffffffffffffffffffffffffffffffffff
fffcff3f99f3c9fcfcf27e7ffcfffe7e3ffffffe79f3f3c800f9ffff83ffffffc3fe7fffcfe7f3ffffffffffffffffffffffffffffffffffff
fffcff3f33f3e3f9f9e67c7ffcfffe7c7ffffffcf9e7e79800f3fffe61ffffff99fcffffcf27e7ffffffffffffffffffffffffffffffffffff
fffc791e31e7e7f9f9e638fffc799c78fffffffcf3e7e799fff3fffe79ffffff3cfcffffcf23c7ffffffffffffffffffffffffffffffffffff
fffe01807007e7c030c300fffe0180f00fcff9f00300c30c03807ffc01ffff3e18601fffc0700fffffffffffffffffffffffffffffffffffff
ffff07c1f21fcfc030c384ffff07c1f00fcff9f00700c30e03807ffc83ffff3e18601fffe0f83fffffffffffffffffffffffffffffffffffff
ffffffffe7ff9ffffffff9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffe7ff3ffffffff1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffc1fc1fffffff03ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffc1fc1fffffff07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffe1fc3fffffffffcffffffff3fe7ffffffffffffcfffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffe1380f01fffffe07fcfffffff03fc7ffffffffc30c0fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff8039ce79fffffe07fffffffff07fcfffffffffc30c1fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff1e7f8e79ffffff9fe1f08fc1fe7f9fe13fffffe79f9fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff3e7f1ff1f3fe7f9fe1f00700fe7fbfc03fffcfe73f9fffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffe7ff87fe3f3fe7f3ff9f8e63c7cffff9e7fffcff27f3fffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffe7ff83fc7ffffff3ff9f9e67e7cffff87fffffff0ff3fffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffe7fff3f1fffffff3cf9f9e4007cffffc1fffffff9ff3fffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffe7fff3e3ffffffe7cf3f3cc0079ffff30fffffff3fe7fffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffe3cce3c7ffffffe79f3f3ccfff9ffff3cfffffff3fe7fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff00c07807e7fcf80180618601c03ffe00ffff9fc0f00fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff83e0f807e7fcf80380618701c03ffe41ffff9fc0f00fffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000003ff0000000000001fffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeaaaaaaaaaaaabff2aaaaaaaaaaa9fffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5555555555553ff5555555555555fffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe800000000000bff2000000000009fffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd3ff4ffffffffffe5fffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2fffffffff1e80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffe313fffd01f4c7fffffffde40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffddb7fffc81f2bbfffffffde80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffddaffffd01f4bb0d1e3c7de40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffdd9ffffc81f2bff66ddbbde80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffdd8ffffd01f4bf86edf83de40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffddb7fffc81f2bb76edfbfde80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffddbbfffd01f4bb76eddbbde40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffe319fffc81f2c788663c70280ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe40000000000101f40000000000040ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeaaaaaaaaaaaa81f2aaaaaaaaaaa80ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe55555555555501f55555555555540ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000000001f00000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe00001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffeaaaa9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe55555ffffffffffffffffffffffffffffffffffff8000000007fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe80009ffffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe47fc5ffffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe83f880fffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe51f040ffffffffffffffffffffffffffe3fffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe98e280fff0f02040ffffffffffffe7fff3fe7ffffbfe03183f7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe5c4640fff9f9b352ffffffffffffe7fff3fe7ffffbfedaed9f7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe9e0e80ff39f9f3f3ff830910886440c383fc0c3cfbfedaeddf7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe5e0e40ff39f870f3ff3264499331679933fe799cfbefdeed9f7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe9c4680fff9f972f3ff3e64ccb033e78133fe799ffbffdeec3f7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe58e240fff9f9f3f3ff3e64cc33f3e79f33fe799ffbffdeedff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe91f080ff39b9b3f3ff3264ce7333e69933fe699cfbffdeedff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe43f840ff303021e1ff87084e7860f1c381ff1c3cfbef07187f7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe87fc00fffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe400040fffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffeaaaa80fffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe555540fffffffffffffffffffffffffffffffffffbffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe000000fffffffffffffffffffffffffffffffffff8000000007fffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe00001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffeaaaa9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe55555fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe80009fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe47fc5ffffffffffffffffffffffffffffffffffffff000000000000003ffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe83f880fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe51f040fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe98e280fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe5c4640ffffffffffffffffffffffffffffc7fffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe9e0e80fff08000c008ffffffffffffcfffe7fcfffff7fc401838c400fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe5e0e40fff9dce65299ffffffffffffcfffe7fcfffff7feeddef76eb6fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe9c4680ff395ce67399ff06122110c8818707f81879f7feed7ef76eb6fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe58e240ff395ce67381fe64c8932662cf3267fcf339f7de0c7ef7e0f7fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe91f080fff95ce67399fe7cc9996067cf0267fcf33ff7feed7ef66ef7fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe43f840fff81ce67399fe7cc99867e7cf3e67fcf33ff7feedfef76ef7fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe87fc00ff3c3ce67399fe64c99ce667cd3267fcd339f7feeddef76ef7fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe400040ff3cb000e108ff0e109cf0c1e38703fe3879f7dc401838c441fbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffeaaaa80fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe555540fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffe000000fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000fffffffffffffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000fffffffffffffffffffffffffffffffffffff000000000000003ffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

showpage
%%Trailer

%%EndDocument
 GE EC
31788 12899 MT
(the application might supply as a parameter)
143 W( to the dialog)142 W
16851 13923 MT
(\050a\051)SH
31788 13997 MT
(box a list of slot names to)
207 W( control how many times the)208 W
31788 15095 MT
(check box, the label and the text input field are repeated.)SH
12 /Times-Bold AF
31788 17699 MT
(4.4 Internal Control)SH
10 /Times-Roman AF
31788 18797 MT
(In other toolkits, another set of)
203 W( call-back procedures are)202 W
31788 19895 MT
(often needed to control the setting of the value or other)198 W
31788 20993 MT
(property of one widget based on the value of)
44 W( another, or to)43 W
31788 22091 MT
(bring up a new dialog box when a button is pressed.)
93 W( The)438 W
31788 23189 MT
(next sections discuss how Gilt allows)
69 W( these to be specified)68 W
31788 24287 MT
(using filter expressions.)SH
11 /Times-Bold AF
31788 26824 MT
(4.4.1 Value Dependencies)SH
10 /Times-Roman AF
31788 27922 MT
(Sometimes, when a widget is operated,)
62 W( this should cause a)63 W
7 10 0 -3979 50852 GB 
%%BeginDocument: c32copyfigb.PS
%!PS-Adobe-1.0
%%Creator: GEM.GARNET.CS.CMU.EDU:bam (Brad Myers)
%%Title: t1.bmt (Gilt Work Window)
%%CreationDate: Mon May 13 16:38:25 1991
%%EndComments
%%%Pages: 1
%%EndProlog
%%%Page: 1 1

/bitdump % stk: width, height, iscale
% dump a bit image with lower left corner at current origin,
% scaling by iscale (iscale=1 means 1/300 inch per pixel)
{
        % read arguments
        /iscale exch def
        /height exch def
        /width exch def

        % scale appropriately
        width iscale mul height iscale mul scale

        % allocate space for one scanline of input
        /picstr % picstr holds one scan line
                width 7 add 8 idiv % width of image in bytes = ceiling(width/8)
                string
                def

        % read and dump the image
        width height 1 [width 0 0 height neg 0 height]
        { currentfile picstr readhexstring pop }
        image
} def
%%BoundingBox: 146 318 465 473
72 300 div dup scale
610 1327 translate
443 215 3 bitdump
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffe7fffffffffffffffffffffffffffff9ff3fffffffffffffffc1cfffff3ffffffffffffffffffffffffffffffffffffe0
ffffc27ffffffffe7ffffffffe083fffffffffffff80781fe3ffffffffe07ffff01cfffff3ffffffffffffffffffffffffffffffffffffe0
ffff007ffffffffffffffffffe083fffffffffffff80383fe7ffffffffe07ffff3fcfffff3ffffffffffffffffffffffffffffffffffffe0
fffe3cf0708f0c30f847e11fff3e709e0e08ffffffcf3f3fcff09ffffff9ff0780600fff803e0fffffffffffffffffffffffffffffffffe0
fffe7cc030070c30f803803ffe7e601806007cff9fcf3f3fdfe01fffe7f9fc0380600fff803807ffffffffffffffffffffffffffffffffe0
fffcff8f18e39e7cfc731c7ffe7ccf31e38e7cff9f9e3e7fffcf3fffe7f3f8f1e7f9ffffe7f1e3ffffffffffffffffffffffffffffffffe0
fffcff9f99f3ccfcfcf33e7ffe7cc3f3f39fffffff807e7fffc3fffffff3f9f9e7f9ffffe7f3f3ffffffffffffffffffffffffffffffffe0
fffcff3f99f3c9fcfcf27e7ffcfce0e0039fffffff80fe7fffe0fffffff3c001c7f3ffffcfe7f3ffffffffffffffffffffffffffffffffe0
fffcff3f33f3e3f9f9e67c7ffcf99860033fffffff38fcffff987fffffe7c001cff3cfffcf27e7ffffffffffffffffffffffffffffffffe0
fffc791e31e7e7f9f9e638fffc719e67ff3fffffff3c7cffff9e7fffffe793ffcff3cfffcf23c7ffffffffffffffffffffffffffffffffe0
fffe01807007e7c030c300fffe0300700c03f9ff3e06001fff007fffcf80180701f01fffc0700fffffffffffffffffffffffffffffffffe0
ffff07c1f21fcfc030c384ffff0720f80c03f9ff3e06001fff20ffffcf803c0701f83fffe0f83fffffffffffffffffffffffffffffffffe0
ffffffffe7ff9ffffffff9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffe7ff3ffffffff1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffc1fc1fffffff03ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffc1fc1fffffff07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffffffe7f0fe7ffffffffff9fffffffc3fcfffffffffffff9ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffe13e7f0fe7ffffffc0ff9fffffff01f8fffffffff86181ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffff803fffcfe7ffffffc0fffffffffe39f9fffffffff86183ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffff1e70ffcf007ffffff3fc3e11f83e79f3fc27fffffcf3f3ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffff3e70ff9f007e7fcff3fc3e00e01cf9f7f807fff9fce7f3ffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffe7ffcff9fcffe7fcfe7ff3f1cc78cf3fff3cffff9fe4fe7ffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffe7ffcff9fcfffffffe7ff3f3ccfcc03fff0fffffffe1fe7ffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffe707cff3f9fffffffe79f3f3c800e13fff83fffffff3fe7ffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffe7079ff3f9e7fffffcf9e7e79800fe7ffe61ffffffe7fcfffffffffffffffffffffffffffffffffffffffe0
fffffffffffffffffffffffffe3cf9ff3f9e7fffffcf3e7e799fffc7ffe79ffffffe7fcfffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffff00c0380780fcff9f00300c30c0380fffc01ffff3f81e01ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffff83c03807c1fcff9f00700c30e0383fffc83ffff3f81e01ffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0000000000003ff0000000000001fffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeaaaaaaaaaaaabff2aaaaaaaaaaa9fffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5555555555553ff5555555555555fffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe800000000000bff2000000000009fffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd3ff4ffffffffffe5fffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2fffffffff1e80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffe313fffd01f4c7fffffffde40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffddb7fffc81f2bbfffffffde80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffddaffffd01f4bb0d1e3c7de40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffdd9ffffc81f2bff66ddbbde80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffdd8ffffd01f4bf86edf83de40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffddb7fffc81f2bb76edfbfde80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5fffddbbfffd01f4bb76eddbbde40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9fffe319fffc81f2c788663c70280ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5ffffffffffd01f4ffffffffffe40ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9ffffffffffc81f2ffffffffffe80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe40000000000101f40000000000040ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeaaaaaaaaaaaa81f2aaaaaaaaaaa80ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe55555555555501f55555555555540ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000000001f00000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000001ff8000000000000ffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc00003fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaabfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd55553ffffffffffffffffffffffffffffffffffff80000003fffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8000bffffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd0ff83ffffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc87f081fffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd23e101ffffffffffffffffffffffffffe3fffffffbffffbfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb1c481fff0f02040ffffffffffffe7fff3fe7ffffbfe223fbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd388d01fff9f9b352ffffffffffffe7fff3fe7ffffbff77bfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbc1c81ff39f9f3f3ff830910886440c383fc0c3cfbffafbfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3c1d01ff39f870f3ff3264499331679933fe799cfbefdfbfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb88c81fff9f972f3ff3e64ccb033e78133fe799ffbffafbfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd31c501fff9f9f3f3ff3e64cc33f3e79f33fe799ffbffafbfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffca3e081ff39b9b3f3ff3264ce7333e69933fe699cfbff77bfbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd07f101ff303021e1ff87084e7860f1c381ff1c3cfbee220fbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8ff881fffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd000101fffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaa81fffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd555501fffffffffffffffffffffffffffffffffffbffffffbfffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc000001fffffffffffffffffffffffffffffffffff80000003fffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc00003fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaabfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd55553fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8000bffffffffffffffffffffffffffffffffffc0000001fffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd0ff83ffffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc87f081fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd23e101fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb1c481fffffffffffffffffffffffff1fffffffdffffdfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd388d01fff81840fffffffffffff3fff9ff3ffffdff111fdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbc1c81fffa53267ffffffffffff3fff9ff3ffffdffbbdfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3c1d01ff3e73267fc1848844322061c1fe061e7dffd7dfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb88c81ff3e73267f993224c998b3cc99ff3cce7df7d7dfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd31c501fffe7320ff9f32665819f3c099ff3ccffdffefdfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffca3e081fffe7327ff9f326619f9f3cf99ff3ccffdffefdfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd07f101ff3e7327ff9932673999f34c99ff34ce7dffefdfdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8ff881ff3c3841ffc384273c3078e1c0ff8e1e7df7c707dfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd000101fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaa81fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd555501fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc000001fffffffffffffffffffffffffffffffffdffffffdfffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffc0000001fffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc00003fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaabfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd55553fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8000bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd3ffffffffffffffffffffffffffffffffffffff55555557fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd01fffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd01ffffffffffffffffffffffffffffd7fffffff7ffff7f7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81fffaaaaaeaaaffffffffffffefffeffefffffffeefffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd01fffdddf757ddffffffffffffdffff7fdfffff7fffddf7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81ffbbfeeefbbbffaebaabbaeaabafaffabafbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd01ff7d5df777d5ff75ddd77777df7777fdf77df7dfffff7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81fffbfeeefbbbfefeebbbeaefefaaeffefbbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3ffd01fffd5df777ddff7ddddd77f7df7f77fdf77ff7ff5fff7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbffc81ffbebeeefbbbfeeeebbeeeefefbaeffefbbbfffeefffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd000101ff7df555f55dff5f55ddf5d5f7d757ff7d7df7dd555f7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaa81ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd555501fffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffffffaaaaaaaffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc00003fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaabfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd55553fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8000bfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd0ff83fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc87f081fffffffffffffffffffffffffffffffffffffff00000007fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd23e101fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb1c481fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd388d01fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcbc1c81ffffffffffffffffffffffffffffffc7fffffff7fffe3f7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd3c1d01fff84010308401ffffffffffffcfffe7fcfffff7fc45df7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcb88c81fffcccdce64ca5ffffffffffffcfffe7fcfffff7feeddf7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd31c501ff9cccfce64ce7ff06122110c8818707f81879f7ff5ddf7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffca3e081ff9c0c3ce7c0e7fe64c8932662cf3267fcf339f7df5fbf7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd07f101fffcccbce44ce7fe7cc9996067cf0267fcf33ff7ffbf7f7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc8ff881fffcccfce64ce7fe7cc99867e7cf3e67fcf33ff7ffbeff7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd000101ff9cccdce64ce7fe64c99ce667cd3267fcd339f7ffbddf7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffcaaaa81ff984010308443ff0e109cf0c1e38703fe3879f7df1c1f7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffd555501fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
fffffffffc000001fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffffffff7ffffff7fffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001fffffffffffffffffffffffffffffffffffffff00000007fffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffe00001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0

showpage
%%Trailer

%%EndDocument
 GE 31788 29020 MT
(different widget to)
156 W( change its value.  For example, when)155 W
16823 29697 MT
(\050b\051)SH
31788 30118 MT
(the user hits on a color)
260 W( button in Figure 5, the sliders)261 W
31788 31216 MT
(should move to show the appropriate values for)
72 W( that color.)71 W
/Times-Bold SF
15198 31291 MT
(Figure 7:)SH
9 /Times-Roman AF
7200 32305 MT
(This dialog box \050which)
123 W( uses the Garnet widget set in-)122 W
10 SS 
31788 32314 MT
(Gilt provides a)
151 W( convenient mechanism for specifying this)152 W
9 SS 
7200 33319 MT
(stead of the Motif widget set used by the other figures)
SH( in)1 W
10 SS 
31788 33412 MT
(using the same)352 W
/Courier SF
39038 XM
(Change my Value)351 W
/Times-Roman SF
49341 XM
(window as for)351 W
9 SS 
7200 34333 MT
(this paper\051, repeats the check box, the)
38 W( label and the text)37 W
10 SS 
31788 34510 MT
(having a widget's value depend on a parameter \050Figure 6\051.)SH
9 SS 
7200 35347 MT
(type-in field.  The controlling expression for \050a\051)
100 W( might)101 W
7200 36361 MT
(be)SH
/Courier SF
8305 XM
(\050\050T :LEFT)
30 W( :TOP\051 \050T :WIDTH :HEIGHT\051\051)29 W
/Times-Roman SF
(,)SH
10 SS 
31788 36623 MT
(The designer selects the)
240 W( widget that should change \050for)241 W
9 SS 
7200 37375 MT
(where the T controls)
130 W( the radio button, the second ele-)131 W
10 SS 
31788 37721 MT
(example, the red)
321 W( slider of Figure 5\051, and brings up a)320 W
9 SS 
7200 38389 MT
(ment is used in the label, and the)
138 W( third is used as the)137 W
10 /Courier AF
31788 38819 MT
(Change my Value)173 W
/Times-Roman SF
41557 XM
(window. Next,)
596 W( the)
173 W( widget that it)174 W
9 SS 
7200 39403 MT
(default for the text input field.  The user)
93 W( can then turn)94 W
10 SS 
31788 39917 MT
(should depend on \050here,)
162 W( the color button set\051 is selected,)161 W
9 SS 
7200 40417 MT
(on and)
131 W( off the desired slots using the check boxes, or)130 W
10 SS 
31788 41015 MT
(and the)5 W
/Courier SF
34965 XM
(Use-Value-of-Object)SH
/Times-Roman SF
46621 XM
(button is hit.  This will)6 W
9 SS 
7200 41431 MT
(type a new name.)SH
10 SS 
31788 42113 MT
(generate the expression)SH
24012 50 5400 42736 UL
8 /Courier AF
33708 42978 MT
(\050gv Color-buttons :FILTERED-VALUE\051)SH
10 /Times-Roman AF
31788 44076 MT
(but for)
90 W( the red slider, only the red component of the color)89 W
5400 44327 MT
(name of the branch of)
94 W( the radio button to be selected.  Of)93 W
31788 45174 MT
(should be used, so the)
SH( designer would edit the expression to)1 W
5400 45425 MT
(course, designers can)
101 W( simply type in the appropriate code,)102 W
31788 46272 MT
(be)SH
5400 46523 MT
(but Gilt provides demonstrational techniques to)
120 W( make this)119 W
8 /Courier AF
33708 47137 MT
(\050gv Color-buttons :FILTERED-VALUE :RED\051)SH
10 /Times-Roman AF
5400 47621 MT
(easier. The)
496 W( designer can operate the widgets to put)
123 W( them)124 W
31788 48235 MT
(Now, whenever the color buttons)
283 W( are operated, the red)282 W
5400 48719 MT
(into the)
48 W( appropriate state, and then give the expression that)47 W
31788 49333 MT
(slider will be set correctly.)
38 W( The)
327 W( other two sliders would be)39 W
5400 49817 MT
(will determine when that state is to be used.)
61 W( For)
373 W( example,)62 W
31788 50431 MT
(fixed similarly.)SH
5400 50915 MT
(for the font dialog box, the)
350 W( designer could select the)349 W
/Courier SF
5400 52013 MT
(Standard Font/Other Font)50 W
/Times-Roman SF
20201 XM
(widget, and bring up a)51 W
31788 52544 MT
(Sometimes, widgets may)
17 W( need to be replicated based on the)16 W
/Courier SF
5400 53111 MT
(Change my Value)338 W
/Times-Roman SF
15664 XM
(window \050Figure)
338 W( 6\051.  Then, the)337 W
31788 53642 MT
(value of another widget.  In)
42 W( the Xerox Star and Viewpoint,)43 W
/Courier SF
5400 54209 MT
(Standard Font)57 W
/Times-Roman SF
13564 XM
(radio button would be pressed, and the)57 W
31788 54740 MT
(menus only show legal values,)
134 W( rather than greying out il-)133 W
5400 55307 MT
(designer could hit the)4 W
/Courier SF
14303 XM
(Use Value of Parameter)3 W
/Times-Roman SF
27765 XM
(but-)SH
31788 55838 MT
(legal values.  For example, in a font-choice)
106 W( dialog box, if)107 W
5400 56405 MT
(ton. Then,)
422 W( the designer would have to edit the expression)87 W
31788 56936 MT
(different fonts have different sizes available,)
339 W( the com-)338 W
5400 57503 MT
(to return T when the font was)
188 W( a standard font using the)187 W
31788 58034 MT
(ponents in the menu of sizes must)
22 W( be dynamically changed.)23 W
/Courier SF
5400 58601 MT
(is-a-standard-font)SH
/Times-Roman SF
16902 XM
(procedure. By)
1154 W( default, the)453 W
31788 59132 MT
(The)SH
/Courier SF
33644 XM
(Replicate Control)51 W
/Times-Roman SF
44196 XM
(window discussed in)
51 W( section)50 W
5400 59699 MT
(other value of the radio buttons will be used otherwise, so)84 W
31788 60230 MT
(4.3.3 is used to control this.)SH
5400 60797 MT
(nothing is needed for that case.  Next, the designer would)98 W
5400 61895 MT
(bring up)289 W
/Courier SF
9589 XM
(Change my Value)289 W
/Times-Roman SF
19706 XM
(windows for the)
289 W( other)288 W
11 /Times-Bold AF
31788 62767 MT
(4.4.2 Specifying Other Dependencies)SH
10 /Times-Roman AF
5400 62993 MT
(widgets, such as)200 W
/Courier SF
12778 XM
(Font Name)201 W
/Times-Roman SF
(, and write expressions to)201 W
31788 63865 MT
(The previous sections discussed how)
62 W( the)63 W
/Times-Italic SF
48660 XM
(value)SH
/Times-Roman SF
51139 XM
(of a widget)63 W
5400 64091 MT
(extract the)
256 W( appropriate information from the font object)255 W
31788 64963 MT
(can be controlled.  In many cases, however, other)522 W
5400 65189 MT
(parameter.)SH
31788 66061 MT
(properties of widgets may need to be set,)
13 W( such as whether it)14 W
31788 67159 MT
(is enabled or)
4 W( not \050greyed-out\051.  This is handled in a uniform)3 W
11 /Times-Bold AF
5400 67726 MT
(4.3.3 Dynamic Creation of Widgets)SH
10 /Times-Roman AF
31788 68257 MT
(way, using a window)
77 W( similar to the)78 W
/Courier SF
46608 XM
(Change my Value)78 W
/Times-Roman SF
5400 68824 MT
(Sometimes, a)
393 W( parameter might specify the)394 W
/Times-Italic SF
24844 XM
(number)SH
/Times-Roman SF
28543 XM
(of)SH
31788 69355 MT
(window. The)
718 W( designer selects)
234 W( the widget to controlled,)233 W
5400 69922 MT
(widgets that need to be created.  In this)
92 W( case, the designer)91 W
31788 70453 MT
(specifies the desired property from a menu, and the ap-)214 W
5400 71020 MT
(can show by example)
139 W( the set of widgets to be replicated,)140 W
31788 71551 MT
(propriate window is brought up.)SH
5400 72118 MT
(select them, and bring)
84 W( up a)83 W
/Courier SF
16927 XM
(Replicate Control)83 W
/Times-Roman SF
27543 XM
(win-)SH
5400 73216 MT
(dow, which is similar to the)170 W
/Courier SF
17781 XM
(Change my)
170 W( Value)171 W
/Times-Roman SF
27543 XM
(win-)SH
ES
%%Page: 7 8
BS
0 SI
10 /Times-Bold AF
5400 6295 MT
(4.4.2.1 Enabling)SH
/Times-Roman SF
5400 7393 MT
(One of the most common dependencies is to)
1 W( enable widgets)SH
5400 8491 MT
(based on other widgets.  As shown in the example of)
89 W( sec-)90 W
5400 9589 MT
(tion 3, the designer can operate a widget to have)
150 W( the ap-)149 W
5400 10687 MT
(propriate value, then enable or disable the dependent)410 W
5400 11785 MT
(widget, and Gilt will fill in the values for the)40 W
/Courier SF
23937 XM
(Change my)39 W
5400 12883 MT
(Enable)SH
/Times-Roman SF
9304 XM
(\050Figure 4\051.  In trying)
54 W( to guess appropriate control)55 W
5400 13981 MT
(expressions for dependent)
212 W( slots, Gilt knows about check)211 W
5400 15079 MT
(boxes and radio buttons being on or)
128 W( off, text fields being)129 W
5400 16177 MT
(empty or having a value,)
107 W( and numbers being zero or non-)106 W
5400 17275 MT
(zero. In)
314 W( addition, if the)32 W
/Courier SF
15257 XM
(Change my Enable)32 W
/Times-Roman SF
25204 XM
(window is)33 W
5400 18373 MT
(for a)87 W
/Times-Italic SF
7684 XM
(set)SH
/Times-Roman SF
9132 XM
(of selectable items \050such as a menu or a panel of)86 W
5400 19471 MT
(buttons\051, the controlling widget can return a list of)
87 W( values,)88 W
5400 20569 MT
(each element of)
121 W( which controls an item.  For example, in)120 W
5400 21667 MT
(Figure 8, the menu of font sizes)
90 W( will have a)91 W
/Courier SF
23885 XM
(Change My)91 W
65 100 0 23936 39555 GB 
%%BeginDocument: fontsizemenu.PS
%!PS-Adobe-2.0
%%Title: Gilt Work Window
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Aug 4, 1991, 8:26 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: (atend)
%%%Pages: 1
%%EndComments


/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/TextDict 2 dict def
/DrawText
   {    % stack: left bottom opal-width line-halftone red green blue color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        % Color-p is on top of stack, so set color/halftone
          { setrgbcolor pop }
          { pop pop pop setgray } ifelse
        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist exch s stringwidth pop sub s length div def
        newpath
          moveto
          x-dist 0 s ashow
          stroke
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            {setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def


%%EndProlog
%%%Page: 1 1

72 72 translate
1 1 scale

%
% Begin new window
%
118 -198 translate
gsave
0 648 231 252 ClipToRectangle
0 0 translate
gsave
0 648 231 252 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
7 637 162 224 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
9 635 160 222 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
9 635 158 220 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
11 545 154 18 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
13 543 152 16 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
13 543 150 14 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
17 620 47 0 0 0 0 false (Chicago) 12 /Courier DrawText
150 620 7 0 0 0 0 false ( ) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 38 618 31 618 DrawLine
17 598 47 0 0 0 0 false (Courier) 12 /Courier DrawText
123 598 34 0 0 0 0 false (Alt-C) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 596 17 596 DrawLine
17 576 41 0 0 0 0 false (Geneva) 12 /Courier DrawText
123 576 34 0 0 0 0 false (Alt-G) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 574 17 574 DrawLine
17 554 63 0 0 0 0 false (Helvetica) 12 /Courier DrawText
122 554 35 0 0 0 0 false (Alt-H) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 552 17 552 DrawLine
17 532 42 0 0 0 0 false (London) 12 /Courier DrawText
123 532 34 0 0 0 0 false (Alt-L) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 530 17 530 DrawLine
17 510 56 0 0 0 0 false (New York) 12 /Courier DrawText
122 510 35 0 0 0 0 false (Alt-N) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 508 17 508 DrawLine
17 488 62 0 0 0 0 false (Storybook) 12 /Courier DrawText
150 488 7 0 0 0 0 false ( ) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 59 486 52 486 DrawLine
17 466 41 0 0 0 0 false (Symbol) 12 /Courier DrawText
123 466 34 0 0 0 0 false (Alt-S) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 464 17 464 DrawLine
17 444 34 0 0 0 0 false (Times) 12 /Courier DrawText
122 444 35 0 0 0 0 false (Alt-T) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 442 17 442 DrawLine
17 422 89 0 0 0 0 false (Zapf Dingbats) 12 /Courier DrawText
123 422 34 0 0 0 0 false (Alt-Z) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 24 420 17 420 DrawLine
183 635 38 156 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
185 633 36 154 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
185 633 34 152 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
187 593 30 15 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
189 591 28 13 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
189 591 26 11 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
195 620 5 0.25 0 0 0 false (9) 12 /Courier DrawText
195 601 12 0 0 0 0 false (10) 12 /Courier-Bold DrawText
195 582 12 0 0 0 0 false (12) 12 /Courier-Bold DrawText
195 563 12 0.25 0 0 0 false (14) 12 /Courier DrawText
195 544 12 0 0 0 0 false (18) 12 /Courier-Bold DrawText
195 525 12 0.25 0 0 0 false (20) 12 /Courier DrawText
195 506 12 0.25 0 0 0 false (24) 12 /Courier DrawText
195 487 13 0 0 0 0 false (48) 12 /Courier-Bold DrawText
grestore

grestore

0 648 231 252 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier 
%%BoundingBox: 190 270 421 522

%%EndDocument
 GE 5400 22765 MT
(Enable)SH
/Times-Roman SF
9485 XM
(expression that computes the list)
235 W( of valid font)234 W
/Times-Bold SF
41586 23599 MT
(Figure 8:)SH
/Times-Roman SF
5400 23863 MT
(sizes based on the selected font in)
33 W( the left menu.  Although)34 W
9 SS 
33588 24613 MT
(In these Motif-style menus, the various font sizes)
42 W( in the)41 W
10 SS 
5400 24961 MT
(an application function)
17 W( is needed, the function will be inde-)16 W
9 SS 
33588 25627 MT
(menu on the right become enabled or)
78 W( disabled depend-)79 W
10 SS 
5400 26059 MT
(pendent of the particular widgets used, since it will)
95 W( take a)96 W
9 SS 
33588 26641 MT
(ing on the sizes available for the font)
55 W( that is selected in)54 W
10 SS 
5400 27157 MT
(font object and)
322 W( return a list of valid sizes.  Gilt will)321 W
9 SS 
33588 27655 MT
(the menu on the left.)SH
10 SS 
5400 28255 MT
(automatically create)
80 W( an expression to enable the items that)81 W
24012 50 31788 28960 UL
5400 29353 MT
(correspond to the values in the list and disable the others.)SH
31788 30726 MT
(the value of the button that caused the sub-dialog to be)209 W
/Times-Bold SF
5400 31823 MT
(4.4.2.2 Other Properties)SH
/Times-Roman SF
31788 31824 MT
(displayed. Of)
536 W( course, the designer can control)
143 W( this using)142 W
5400 32921 MT
(All the)
60 W( other properties of widgets can be controlled in the)59 W
31788 32922 MT
(the)SH
/Courier SF
33260 XM
(Value Control)SH
/Times-Roman SF
41310 XM
(for the button.)SH
5400 34019 MT
(same way)
68 W( as enabling.  Widgets can be made to be visible)69 W
31788 35035 MT
(If the sub-dialog is)
169 W( not modal, then the end user will be)170 W
5400 35117 MT
(and invisible by)
195 W( bringing up a)194 W
/Courier SF
18788 XM
(Change my Visible)194 W
/Times-Roman SF
31788 36133 MT
(allowed to operate widgets in both windows.)
41 W( Gilt)
330 W( supports)40 W
5400 36215 MT
(window. Most)
846 W( widgets also)
298 W( have additional properties)299 W
31788 37231 MT
(cross-window dependencies, so that a value in one dialog)126 W
5400 37313 MT
(which can be set, such as their color)
14 W( or font.  To change the)13 W
31788 38329 MT
(box can depend on a value in another dialog box.)SH
5400 38411 MT
(color of an object, the)176 W
/Courier SF
15279 XM
(Change my Color)177 W
/Times-Roman SF
25060 XM
(window is)177 W
5400 39509 MT
(used. For)
556 W( example,)
153 W( to change the color of the red slider)152 W
5400 40607 MT
(based on the value)
213 W( it returns, the designer could simply)214 W
13 /Times-Bold AF
31788 41000 MT
(5. Editing and Saving)SH
10 /Times-Roman AF
5400 41705 MT
(select the red slider, bring up the)183 W
/Courier SF
20012 XM
(Change my Color)182 W
/Times-Roman SF
31788 42098 MT
(To edit the)
244 W( value of any of the filter expressions for a)243 W
5400 42803 MT
(window, select the slider again, hit the)77 W
/Courier SF
21576 XM
(Use-Value-of-)SH
/Times-Roman SF
31788 43196 MT
(widget, the designer can simply)
28 W( select the widget and bring)29 W
8 SS 
25693 43571 MT
(5)SH
10 /Courier AF
5400 43916 MT
(Object)SH
/Times-Roman SF
9250 XM
(button, and then edit the expression to be)SH
31788 44294 MT
(up the)
239 W( appropriate)238 W
/Courier SF
40029 XM
(Control...)SH
/Times-Roman SF
47005 XM
(or)SH
/Courier SF
48326 XM
(Change my...)238 W
8 SS 
7320 44781 MT
(\050Make-Color \050gv :self :FILTERED-VALUE\051)SH
10 /Times-Roman AF
31788 45392 MT
(window. The)
336 W( designer)
43 W( can then edit the text of the expres-)44 W
8 /Courier AF
13080 45646 MT
(0 0\051)SH
10 /Times-Roman AF
31788 46490 MT
(sion. Alternatively,)
412 W( if the user demonstrates new)
81 W( transfor-)80 W
31788 47588 MT
(mations, these will replace the existing ones as appropriate.)SH
5400 47759 MT
(Using the)
66 W( dependency control on various properties is also)67 W
5400 48857 MT
(useful for decorations)
153 W( such as rectangles and labels.  For)152 W
31788 49701 MT
(Gilt provides a special feature to make it easier to convert)87 W
5400 49955 MT
(example, the color of the rectangle)
18 W( in the center of Figure 5)19 W
31788 50799 MT
(an interface to)
102 W( a different natural language.  After a value)101 W
5400 51053 MT
(can be made to depend on the three sliders in this way.)SH
31788 51897 MT
(transformation has been specified, the next)
77 W( time the desig-)78 W
31788 52995 MT
(ner edits the displayed label names, Gilt will pop-up a)263 W
11 /Times-Bold AF
5400 53590 MT
(4.4.3 Sequencing of Dialogs)SH
10 /Times-Roman AF
31788 54093 MT
(question to ask if the corresponding exported values)
25 W( should)26 W
5400 54688 MT
(Another common internal control action that)
33 W( sometimes re-)32 W
31788 55191 MT
(change also.  If the designer says "no", then)
38 W( the value filter)37 W
5400 55786 MT
(quires call-backs is for)
14 W( a button to cause another dialog box)15 W
31788 56289 MT
(function is automatically changed so that all the new label)81 W
5400 56884 MT
(to appear.  Gilt, like other interface builders, allows)
62 W( this to)61 W
31788 57387 MT
(strings will still produce the same old values, so any code)95 W
5400 57982 MT
(be demonstrated, by)
381 W( simply operating the button, and)382 W
31788 58485 MT
(that uses the values will not need to be changed.)SH
5400 59080 MT
(showing which dialog)
19 W( box should appear.  However, unlike)18 W
5400 60178 MT
(other systems, Gilt)
46 W( also allows the initial values of widgets)47 W
31788 60598 MT
(Other special features make editing the widgets easier.)
10 W( Gilt)272 W
5400 61276 MT
(in the sub-dialog to be set.  Windows similar to the)356 W
31788 61696 MT
(provides a ``Replace widget'' command, which allows,)
57 W( for)56 W
/Courier SF
5400 62374 MT
(Change my ...)72 W
/Times-Roman SF
13988 XM
(windows appear that)
72 W( allow the values)73 W
31788 62794 MT
(example, a set of)
155 W( buttons to be replaced by a menu.  As)156 W
5400 63472 MT
(of the parameters to)
21 W( the sub-dialog to be specified based on)20 W
31788 63892 MT
(many of the properties as possible are retained,)
140 W( including)139 W
5400 64570 MT
(the values)
33 W( of the parent dialog box.  Gilt will automatically)34 W
31788 64990 MT
(the label names and the)
64 W( filter expressions.  In addition, the)65 W
5400 65668 MT
(create the code to call)138 W
/Courier SF
15059 XM
(Show-Dialog)SH
/Times-Roman SF
22047 XM
(in the)
138 W( appropriate)137 W
31788 66088 MT
(filter expressions can be copied from one widget to)435 W
5400 66766 MT
(way. If)
422 W( the sub-dialog is)
86 W( modal \050which is the usual case\051,)87 W
31788 67186 MT
(another. Finally,)
1410 W( because the)
580 W( more complex filter)581 W
5400 67864 MT
(then the value of the sub-dialog is assigned by)
137 W( default as)136 W
31788 68284 MT
(procedures and application-specific call-backs are called)269 W
31788 69382 MT
(with abstract parameters \050such as keywords\051,)
124 W( they usually)125 W
10800 50 5400 70079 UL
31788 70480 MT
(will not need to be changed when)
129 W( the widgets are edited.)128 W
6 SS 
6200 71418 MT
(5)SH
10 SS 
31788 71578 MT
(We will)
43 W( be investigating other techniques for editing in the)44 W
8 SS 
6500 71727 MT
(The slider's value is)
21 W( a number, but we need a color object for the color)20 W
5400 72651 MT
(property.)SH
/Courier SF
9385 XM
(Make-Color)SH
/Times-Roman SF
14723 XM
(is a standard routine)
338 W( that takes numbers)339 W
10 SS 
31788 72676 MT
(future.)SH
8 SS 
5400 73575 MT
(representing the red, green and blue values and returns a color object.)SH
ES
%%Page: 8 9
BS
0 SI
10 /Times-Roman AF
5400 6311 MT
(As was mentioned)
339 W( previously, the expressions are im-)338 W
31788 XM
(of values and enabling.  This might also be helpful)
175 W( as a)174 W
5400 7409 MT
(plemented as constraints attached to the appropriate)543 W
31788 XM
(debugging tool to)
28 W( show where the dependencies are.  Other)29 W
5400 8507 MT
(properties of objects.  Garnet has a built-in mechanism)
72 W( for)71 W
31788 XM
(debugging and maintenance aids will also be added,)
133 W( such)132 W
5400 9605 MT
(saving any object as a Lisp)
149 W( code file, including all of its)150 W
31788 XM
(as browsers to show all the filter expressions, and the)294 W
5400 10703 MT
(constraints [10],)
SH( and this is used by Gilt.  Therefore,)
37 W( all the)36 W
31788 XM
(procedures and global variables used in them.  Finally,)
75 W( we)74 W
5400 11801 MT
(filter expressions are output)
167 W( automatically along with the)168 W
31788 XM
(will add some of the demonstrational techniques)
342 W( from)343 W
5400 12899 MT
(user interface definition.  Since the)
140 W( output is textual Lisp)139 W
31788 XM
(Peridot and Druid that neaten the display as widgets are)186 W
5400 13997 MT
(code, it is possible for programmers to edit the file)
20 W( directly,)21 W
31788 XM
(drawn.)SH
5400 15095 MT
(but we expect this to not be necessary.)SH
13 /Times-Bold AF
31788 16668 MT
(8. Conclusion)SH
5400 17766 MT
(6. New Kinds of Widgets)SH
10 /Times-Roman AF
31788 XM
(The Gilt interface builder contains an number)
164 W( of innova-)165 W
5400 18864 MT
(The techniques that have been described are not limited to)75 W
31788 XM
(tions that significantly improve the separation)
152 W( of applica-)151 W
5400 19962 MT
(only the built-in widgets in the)
58 W( Garnet toolkits.  If the user)59 W
31788 XM
(tion code from toolkits.  By identifying the most common)96 W
5400 21060 MT
(wants a new kind of widget, then it can)
15 W( be created either by)14 W
31788 XM
(tasks that call-backs are used for, Gilt is able)
212 W( to supply)211 W
5400 22158 MT
(coding it by hand or using the)
204 W( Lapidary design tool)
205 W( [7].)SH
31788 XM
(built-in mechanisms to handle)
3 W( them.  Using a standard style)4 W
5400 23256 MT
(The new widget can then be dynamically loaded into the)149 W
31788 XM
(of window, the designer can enter short)
102 W( filter expressions.)101 W
5400 24354 MT
(Gilt palette, and used like any built-in widget.)SH
31788 XM
(Because many)
167 W( of the tasks involve straightforward filter-)168 W
31788 25452 MT
(ing, Gilt can often infer appropriate transformations from)148 W
5400 26467 MT
(All of the widgets in the Garnet toolkit are controlled)297 W
31788 26550 MT
(examples of the)
SH( desired output or actions.  Even when more)1 W
5400 27565 MT
(through the same protocol, which includes a specification)132 W
31788 27648 MT
(complex transformations)
456 W( are required, and which use)455 W
5400 28663 MT
(of what the properties of the widget are and)
12 W( the types of the)13 W
31788 28746 MT
(application-specific procedures, the application code)
396 W( is)397 W
5400 29761 MT
(properties \050string, boolean, integer, list,)
102 W( etc.\051.  This allows)101 W
31788 29844 MT
(completely independent of the actual widgets and the)382 W
5400 30859 MT
(the appropriate)25 W
/Courier SF
11726 XM
(Control)SH
/Times-Roman SF
16201 XM
(windows to be created.  For cus-)25 W
31788 30942 MT
(names used in the user interface.)
228 W( Although)
707 W( Gilt is im-)229 W
5400 31957 MT
(tom widgets, the designer will need)
40 W( to conform to the stan-)39 W
31788 32040 MT
(plemented in Lisp,)
78 W( which makes the dynamic execution of)77 W
5400 33055 MT
(dard protocol.  Lapidary has)
160 W( built-in mechanisms to help)161 W
31788 33138 MT
(the entered code much easier, the general techniques are)182 W
5400 34153 MT
(with this for widgets created)
118 W( using it.  The inferencing of)117 W
31788 34236 MT
(appropriate for conventional compiled languages and)
210 W( for)209 W
5400 35251 MT
(the filter expressions is based on the type of)
45 W( the properties,)46 W
31788 35334 MT
(interface builders for)
72 W( conventional toolkits.  Therefore, the)73 W
5400 36349 MT
(so the demonstrational techniques described in)
160 W( this paper)159 W
31788 36432 MT
(techniques could be)
158 W( readily applied to today's user inter-)157 W
5400 37447 MT
(can be used for designer-created)
156 W( widgets as well.  As an)157 W
31788 37530 MT
(face tools.)SH
5400 38545 MT
(example, the color)
57 W( selection buttons on the left of Figure 5)56 W
5400 39643 MT
(are not a standard)
28 W( widget, but were partially coded by hand)29 W
31788 XM
(The mechanisms that are described here)
282 W( make it much)283 W
5400 40741 MT
(and then read into Gilt for the dependencies to be specified.)SH
31788 XM
(faster to build)
89 W( dialog boxes with interdependencies among)88 W
31788 41839 MT
(the widgets.  However, we expect)
87 W( their main advantage to)88 W
5400 42854 MT
(Another interesting feature is)
121 W( that a set of widgets can be)120 W
31788 42937 MT
(be the improved maintainability of)
66 W( the resulting code.  For)65 W
5400 43952 MT
(saved, along)
151 W( with their interdependencies defined in Gilt,)152 W
31788 44035 MT
(example, it should be much easier with Gilt than most)
6 W( other)7 W
5400 45050 MT
(and used as)
110 W( a prototype in other interfaces.  For example,)109 W
31788 45133 MT
(interface builders to)
107 W( convert a user interface to a different)106 W
5400 46148 MT
(the)SH
/Courier SF
6947 XM
(Standard Font)75 W
/Times-Roman SF
15147 XM
(group from Figure)
75 W( 1 could be read)76 W
31788 46231 MT
(natural language or switch)
350 W( between different forms of)351 W
5400 47246 MT
(into the Gilt palette, and)
54 W( then placed in other dialog boxes.)53 W
31788 47329 MT
(widgets \050e.g., from menus to buttons\051,)
227 W( or even different)226 W
5400 48344 MT
(Due to the)
146 W( prototype-instance object model in Garnet, no)147 W
31788 48427 MT
(widget sets)
147 W( \050e.g., from Motif to OpenLook\051.  We will be)148 W
5400 49442 MT
(extra mechanisms are needed in Gilt to support this.)SH
31788 49525 MT
(exploring the effects of)
290 W( these features as Gilt becomes)289 W
31788 50623 MT
(widely used by the Garnet community.)SH
13 /Times-Bold AF
5400 52113 MT
(7. Status and Future Work)SH
10 /Times-Roman AF
5400 53211 MT
(An earlier)
138 W( version of Gilt has been released to all Garnet)137 W
13 /Times-Bold AF
31788 53294 MT
(Acknowledgements)SH
8 /Times-Roman AF
7705 53979 MT
(6)SH
10 SS 
5400 54324 MT
(users.)SH
8967 XM
(The version described here has been mostly im-)182 W
31788 54392 MT
(Andrew Mickish implemented the features described in this)9 W
5400 55422 MT
(plemented, and is expected to be finished)
134 W( and released in)133 W
31788 55490 MT
(article. Osamu)
558 W( Hashimoto also)
154 W( contributed to the design)153 W
5400 56520 MT
(the next few months.)SH
31788 56588 MT
(and implementation of Gilt.  Brad)
129 W( Vander Zanden, David)130 W
31788 57686 MT
(Kosbie, Andrew Mickish, Osamu)
496 W( Hashimoto, Bernita)495 W
5400 58633 MT
(In the future, in addition to releasing this version of)
13 W( Gilt for)14 W
31788 58784 MT
(Myers, and the referees provided useful comments)
98 W( on this)99 W
5400 59731 MT
(general use, we would like to investigate combining some)98 W
31788 59882 MT
(paper.)SH
5400 60829 MT
(of the features of Lapidary with Gilt, so that the designer)123 W
5400 61927 MT
(can specify constraints on the widgets, for example to make)4 W
31788 61995 MT
(This research was)
99 W( sponsored by the Avionics Lab, Wright)98 W
5400 63025 MT
(decorations or the entire window grow)
235 W( if a widget gets)236 W
31788 63093 MT
(Research and)
162 W( Development Center, Aeronautical Systems)163 W
5400 64123 MT
(bigger. It)
608 W( has been suggested that)
179 W( a wiring diagram ap-)178 W
31788 64191 MT
(Division \050AFSC\051, U. S. Air Force, Wright-Patterson)
92 W( AFB,)91 W
5400 65221 MT
(proach to specifying the interdependencies)
89 W( among widgets)90 W
31788 65289 MT
(OH 45433-6543 under Contract)
151 W( F33615-90-C-1465, Arpa)152 W
5400 66319 MT
(might be easier to use.  We)
151 W( will investigate allowing the)150 W
31788 66387 MT
(Order No. 7597.)SH
5400 67417 MT
(designer to draw wires among)
14 W( the widgets to show the flow)15 W
31788 68500 MT
(The views and conclusions contained in this)
81 W( document are)80 W
31788 69598 MT
(those of the authors and should)
346 W( not be interpreted as)347 W
10800 50 5400 70079 UL
31788 70696 MT
(representing the official policies, either expressed)
196 W( or im-)195 W
6 SS 
6200 71418 MT
(6)SH
8 SS 
6500 71727 MT
(The Garnet system is)
113 W( available for free from CMU, but you need to)112 W
10 SS 
31788 71794 MT
(plied, of the U.S. Government.)SH
8 SS 
5400 72651 MT
(have a)
167 W( license.  If you are interested in using Gilt and Garnet, please)168 W
5400 73575 MT
(contact the author or send electronic mail to)SH
/Courier SF
19656 XM
(garnet@cs.cmu.edu)SH
/Times-Roman SF
(.)SH
ES
%%Page: 9 10
BS
0 SI
10 /Times-Roman AF
31788 6311 MT
(for Graphical, Highly-Interactive User Interfaces: The Gar-)SH
13 /Times-Bold AF
5400 6496 MT
(References)SH
10 /Times-Roman AF
31788 7416 MT
(net User Interface Development Environment".)SH
/Times-Italic SF
51219 XM
(IEEE)SH
/Times-Bold SF
5400 8287 MT
(1.)SH
/Times-Roman SF
6650 XM
(Paul Barth.  "An Object-Oriented Approach to Graphi-)SH
/Times-Italic SF
31788 8521 MT
(Computer 23)SH
/Times-Roman SF
(, 11 \050Nov. 1990\051, 71-85.)SH
5400 9392 MT
(cal Interfaces".)SH
/Times-Italic SF
11916 XM
(ACM Transactions on Graphics 5)SH
/Times-Roman SF
(, 2 \050April)SH
/Times-Bold SF
31788 10312 MT
(9.)SH
/Times-Roman SF
33038 XM
(Brad A. Myers.  Graphical Techniques in a Spreadsheet)SH
5400 10497 MT
(1986\051, 142-172.)SH
31788 11417 MT
(for Specifying User Interfaces.  Human Factors in Comput-)SH
/Times-Bold SF
5400 12288 MT
(2.)SH
/Times-Roman SF
6650 XM
(Alan Borning.  "The Programming Language Aspects of)SH
31788 12522 MT
(ing Systems, Proceedings SIGCHI'91, New Orleans, LA,)SH
5400 13393 MT
(Thinglab; a Constraint-Oriented Simulation Laboratory".)SH
31788 13627 MT
(April, 1991, pp. 243-249.)SH
/Times-Italic SF
5400 14498 MT
(ACM Transactions on Programming Languages and Sys-)SH
/Times-Bold SF
31788 15418 MT
(10.)SH
/Times-Roman SF
33538 XM
(Brad A. Myers and Brad Vander Zanden.  "An En-)SH
/Times-Italic SF
5400 15603 MT
(tems 3)SH
/Times-Roman SF
(, 4 \050Oct. 1981\051, 353-387.)SH
31788 16523 MT
(vironment for Rapid Creation of Interactive Design Tools".)SH
/Times-Bold SF
5400 17394 MT
(3.)SH
/Times-Roman SF
6650 XM
(Luca Cardelli.  Building User Interfaces by Direct)SH
/Times-Italic SF
31788 17628 MT
(The Visual Computer; International Journal of Computer)SH
/Times-Roman SF
5400 18499 MT
(Manipulation. ACM)
250 W( SIGGRAPH Symposium on User In-)SH
/Times-Italic SF
31788 18733 MT
(Graphics)SH
/Times-Roman SF
36010 XM
(\0501991\051, to appear.)SH
5400 19604 MT
(terface Software and Technology, Proceedings UIST'88,)SH
/Times-Bold SF
31788 20524 MT
(11.)SH
/Times-Roman SF
33538 XM
(Dan R. Olsen, Jr.  A Programming Language Basis for)SH
5400 20709 MT
(Banff, Alberta, Canada, Oct., 1988, pp. 152-166.)SH
31788 21629 MT
(User Interface Management.  Human Factors in Computing)SH
/Times-Bold SF
5400 22500 MT
(4.)SH
/Times-Roman SF
6650 XM
(James D. Foley, Christina Gibbs, Won Chul Kim, and)SH
31788 22734 MT
(Systems, Proceedings SIGCHI'89, Austin, TX, April,)SH
5400 23605 MT
(Srdjan Kovacevic.  A Knowledge-Based User Interface)SH
31788 23839 MT
(1989, pp. 171-176.)SH
5400 24710 MT
(Management System.  Human Factors in Computing Sys-)SH
/Times-Bold SF
31788 25630 MT
(12.)SH
/Times-Roman SF
33538 XM
(Gurminder Singh, Chun Hong Kok, and Teng Ye)SH
5400 25815 MT
(tems, Proceedings SIGCHI'88, Washington, D.C., May,)SH
31788 26735 MT
(Ngan. Druid:)
250 W( A System for Demonstrational Rapid User)SH
5400 26920 MT
(1988, pp. 67-72.)SH
31788 27840 MT
(Interface Development.  ACM SIGGRAPH Symposium on)SH
/Times-Bold SF
5400 28711 MT
(5.)SH
/Times-Roman SF
6650 XM
(Tyson R. Henry and Scott E. Hudson.  Using Active)SH
31788 28945 MT
(User Interface Software and Technology, Proceedings)SH
5400 29816 MT
(Data in a UIMS.  ACM SIGGRAPH Symposium on User)SH
31788 30050 MT
(UIST'90, Snowbird, Utah, Oct., 1990, pp. 167-177.)SH
5400 30921 MT
(Interface Software and Technology, Proceedings UIST'88,)SH
/Times-Bold SF
31788 31841 MT
(13.)SH
/Times-Roman SF
33538 XM
(SmethersBarnes, P.O. Box 639, Portland, Oregon)SH
5400 32026 MT
(Banff, Alberta, Canada, Oct., 1988, pp. 167-178.)SH
31788 32946 MT
(97207, Phone \050503\051 274-7179.  Prototyper 3.0.)SH
/Times-Bold SF
5400 33817 MT
(6.)SH
/Times-Roman SF
6650 XM
(Brad A. Myers.)SH
/Times-Italic SF
13371 XM
(Creating User Interfaces by)SH
/Times-Bold SF
31788 34737 MT
(14.)SH
/Times-Roman SF
33538 XM
(Ivan E. Sutherland.  SketchPad: A Man-Machine)SH
/Times-Italic SF
5400 34922 MT
(Demonstration.)SH
/Times-Roman SF
12150 XM
(Academic Press, Boston, 1988.)SH
31788 35842 MT
(Graphical Communication System.  AFIPS Spring Joint)SH
/Times-Bold SF
5400 36713 MT
(7.)SH
/Times-Roman SF
6650 XM
(Brad A. Myers, Brad Vander Zanden, and Roger)SH
31788 36947 MT
(Computer Conference, 1963, pp. 329-346.)SH
5400 37818 MT
(B. Dannenberg.  Creating Graphical Interactive Application)SH
/Times-Bold SF
31788 38738 MT
(15.)SH
/Times-Roman SF
33538 XM
(Brad Vander Zanden, Brad A. Myers, Dario Giuse and)SH
5400 38923 MT
(Objects by Demonstration.  ACM SIGGRAPH Symposium)SH
31788 39843 MT
(Pedro Szekely.  The Importance of Indirect References in)SH
5400 40028 MT
(on User Interface Software and Technology, Proceedings)SH
31788 40948 MT
(Constraint Models.  ACM SIGGRAPH Symposium on)SH
5400 41133 MT
(UIST'89, Williamsburg, VA, Nov., 1989, pp. 95-104.)SH
31788 42053 MT
(User Interface Software and Technology, Proceedings)SH
/Times-Bold SF
5400 42924 MT
(8.)SH
/Times-Roman SF
6650 XM
(Brad A. Myers, Dario A. Giuse, Roger B. Dannenberg,)SH
31788 43158 MT
(UIST'91, Hilton Head, SC, Nov., 1991.)SH
5400 44029 MT
(Brad Vander Zanden, David S. Kosbie, Ed Pervin, Andrew)SH
5400 45134 MT
(Mickish, and Philippe Marchal.  "Comprehensive Support)SH
ES
%%Page: i 11
BS
0 SI
13 /Times-Bold AF
25652 6496 MT
(Table of Contents)SH
12 SS 
5400 7752 MT
(1. Introduction)SH
55200 XM
(0)SH
5400 9008 MT
(2. Related Work)SH
55200 XM
(1)SH
5400 10264 MT
(3. Example)SH
55200 XM
(1)SH
5400 11520 MT
(4. Filtering)SH
55200 XM
(3)SH
11 SS 
7050 12688 MT
(4.1 Preparing Data for Applications)SH
55250 XM
(3)SH
7050 13856 MT
(4.2 Error Handling)SH
55250 XM
(5)SH
7050 15024 MT
(4.3 Preparing Data to be Shown to the User)SH
55250 XM
(5)SH
10 SS 
8900 16104 MT
(4.3.1 Defining Parameters to the Dialog Box)SH
55300 XM
(5)SH
8900 17184 MT
(4.3.2 Using the Parameters)SH
55300 XM
(5)SH
8900 18264 MT
(4.3.3 Dynamic Creation of Widgets)SH
55300 XM
(6)SH
11 SS 
7050 19432 MT
(4.4 Internal Control)SH
55250 XM
(6)SH
10 SS 
8900 20512 MT
(4.4.1 Value Dependencies)SH
55300 XM
(6)SH
8900 21592 MT
(4.4.2 Specifying Other Dependencies)SH
55300 XM
(6)SH
10900 22672 MT
(4.4.2.1 Enabling)SH
55300 XM
(7)SH
10900 23752 MT
(4.4.2.2 Other Properties)SH
55300 XM
(7)SH
8900 24832 MT
(4.4.3 Sequencing of Dialogs)SH
55300 XM
(7)SH
12 SS 
5400 26088 MT
(5. Editing and Saving)SH
55200 XM
(7)SH
5400 27344 MT
(6. New Kinds of Widgets)SH
55200 XM
(8)SH
5400 28600 MT
(7. Status and Future Work)SH
55200 XM
(8)SH
5400 29856 MT
(8. Conclusion)SH
55200 XM
(8)SH
5400 31112 MT
(Acknowledgements)SH
55200 XM
(8)SH
5400 32368 MT
(References)SH
55200 XM
(9)SH
ES
%%Page: ii 12
BS
0 SI
13 /Times-Bold AF
26556 6496 MT
(List of Figures)SH
11 SS 
7050 7664 MT
(Figure 1:)SH
55250 XM
(2)SH
7050 8832 MT
(Figure 2:)SH
55250 XM
(2)SH
7050 10000 MT
(Figure 3:)SH
55250 XM
(3)SH
7050 11168 MT
(Figure 4:)SH
55250 XM
(3)SH
7050 12336 MT
(Figure 5:)SH
55250 XM
(4)SH
7050 13504 MT
(Figure 6:)SH
55250 XM
(5)SH
7050 14672 MT
(Figure 7:)SH
55250 XM
(6)SH
7050 15840 MT
(Figure 8:)SH
55250 XM
(7)SH
ES
%%Trailer
%%Pages: 12
%%DocumentFonts: Times-Roman Helvetica-Bold Times-Italic Times-Bold Symbol Courier
