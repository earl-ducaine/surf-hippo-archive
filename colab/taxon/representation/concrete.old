;*******************************************************************************
;*
;*	Representation of Concrete Objects
;*
;*******************************************************************************

(defstruct (concrete (:predicate concrete?)
		     (:conc-name object-)
		     (:print-function print-concrete)
		     (:include object)
		     )
  (domain    nil :type symbol)
  )

(defun create-concrete-ind! (id domain)
  (let ((old (get-object id)) 
        )
       (if old
	   old
	   (let ((new (make-concrete :domain domain))
		 )
		(setf (object-id new) id)
		(setf (gethash id *individual-table*) new)
		new))))


(defun print-concrete (p s k)
  (format t "~%Concrete Object ~A" (get-id p))
  (format t "~8TDomain : ~A" (object-domain p))
  (format t "~%~8T~A" (get-concrete-domain-entry p))
  )
