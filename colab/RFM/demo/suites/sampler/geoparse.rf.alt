;        Qualitative geometry and higher-order parsing in RELFUN
;                             Harold Boley                             Mar 1991

; Self-normalizing qualitative-workpiece (qwp) terms consist of horizontal (h)
; [oriented left to right], up (u) and down (d) arguments that represent lines:

(ft (qwp) `(qwp))  ; clauses are directed equations of qwp-constructor algebra:
(ft !(qwp _x _x | _y) (qwp _x | _y))  ; idempotence (QUALITATIVE h, u, d lines)
(ft !(qwp u d | _y) unknown)  ; up/down never adjacent ("infinitely thin wall")
(ft !(qwp d u | _y) unknown)  ; down/up never adjacent ("infinitely thin wall")
(ft (qwp _x | _y) (is (qwp | _n) (qwp | _y)) `(qwp _x | _n))

; Parser applying an operator parameter to N-splits of qwp (|qwp| >= N >= 2):

(ft (parse _o (qwp)) `(tup))  ; empty workpiece (qwp) yields empty tuple (tup)
(ft (parse _o (qwp _x | _y))  ; non-empty qwp (we'll bind _o to feature or pal):
    (apprel _pre `(tup _i _j | _post) `(tup _x | _y))  ; split qwp args as a tup
    (apprel _pre `(tup _i _j) _pij)   ; _pij (prefix plus infix) has length >= 2
    (tup (_o | _pij)  ; generate _o-values for _pij's elements or fail
         |  ; first parse _post elements only, on failure also reuse _j
         (or `(parse _o `(qwp | _post))       `(parse _o `(qwp _j | _post)))))

; Auxiliaries:
(ft (tup | _r) `(tup | _r))  ; _r will be bound to the tup of all arguments
(hn (apprel (tup) _l _l))    ; PROLOGish append relation
(hn (apprel (tup _h | _r) _m (tup _h | _s))  (apprel _r _m _s))
(ft (or _g | _y) @_g)        ; first try to "@"-call goal _g (input passively),
(ft (or _g | _y) (or | _y))  ; then try rest of goals _y: realizes PROLOG's ";"

; A (ft (feature t1 ... tN) f) is a lexicon rule f -> t1 ... tN that RETURNS f:

(ft (feature h u) rightshoulder)  ; Binary features for contours   |  and   |
(ft (feature d h) leftshoulder)   ;                       right:  -  left:   -
                                  ;
(ft (feature h d) rightnose)      ;                               -          - 
(ft (feature u h) leftnose)       ;                       right:   | left:  |

(ft (feature h d h) qmark)        ; Ternary features to describe  -   and    -
(ft (feature h u h) swing)        ;                         "?":   |  "s":  |
                                  ;                                 -      -
(ft (feature d h u) groove)       ;                         dhu: | |  uhd:   -
(ft (feature u h d) collar)       ;                               -         | |

; Using these rules, (parse feature (qwp h h h)) fails, but most calls succeed:

                                      ;  -         When normalized this qwp has
(ft (tst) (qwp u h d d h u h h h d))  ; | |  ---   40 parsings, incl. the final
                                      ;   | |   |  feature (non-terminal) list:
                                      ;    -       (tup collar groove collar).
; rfi> (parse feature (qwp d h u))    ; This qwp is normalized via call-by-value
; (tup leftshoulder rightshoulder)    ; and then produces 2 parsings:
; rfi> more                           ; a list consisting of a leftshoulder and
; (tup groove)                        ; a rightshoulder feature, and a unit
; rfi> more                           ; list containing their "h-overlapping"
; unknown                             ; aggregation, the groove feature.
; (parse feature `(qwp d _x u)), with a passive non-ground term, binds _x to h

; Instead of extensional feature rules use recursive pal operator as parameter:
(ft (pal) `(pal))     (ft (pal _c) `(pal _c))  ; palindrome argument sequences
(ft (pal _f | _r) (apprel _m `(tup _f) _r) (is _h (pal | _m)) `(pal _f _h _f))
; (parse pal (qwp h u h d h u h)) returns a list of "h-overlapping" pal parses,
; (tup (pal h (pal u) h) (pal h (pal d) h) (pal h (pal u) h)),  and a unit list.
