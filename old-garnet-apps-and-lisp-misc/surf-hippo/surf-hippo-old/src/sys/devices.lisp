;;; -*- Mode: LISP; Syntax: Common-lisp; package: #-PARALLEL SURF #+PARALLEL *surf; Base: 10; -*-
;;;
;;; (c) Copyright 1985, Geoffrey Wong, Thinking Machines Corporation
;;; alterations (c) Copyright 1990, Lyle Borg-Graham, MIT Center for Biological Information Processing
;;; File Creation Date 22-Oct-85 14:24

(in-package #+parallel '*surf #-parallel 'surf)

(defvar empty-processor 0)
(defvar core-mos1 1)
(defvar core-capacitor 2)
(defvar core-resistor 3)
(defvar core-isource 4)
(defvar core-node 5)
(defvar core-off-diag 6)
(defvar core-soma 7)
(defvar core-channel 8)
(defvar core-particle 9)
(defvar core-segment 10)
(defvar core-conc-part 11)
(defvar core-conc-int 12)
(defvar core-synapse 13)
;(defvar core-fanout 13)

#+parallel
(progn
(*proclaim '(type (pvar (unsigned-byte 8)) *lisp-struct-type))
(*defvar *lisp-struct-type (!! empty-processor))
)

#+parallel
(progn
;(defvar core-fanout-struct-list '(
;(def-simpl-struct (core-fanout)
(*proclaim '(type (pvar boolean) fanout-valid))
(*defvar fanout-valid nil!!)
(*proclaim '(type (pvar boolean) fanout-seg-forward))
(*defvar fanout-seg-forward nil!!)
(*proclaim '(type (pvar boolean) fanout-seg-backward))
(*defvar fanout-seg-backward nil!!)
(*proclaim '(type (pvar big-float) fanout-value))
(*defvar fanout-value (!! zero))
)

#+parallel
(progn
;(defvar node-struct-list '(
;(def-simpl-struct (core-node)
(*proclaim '(type (pvar boolean) core-node-is-source))
(*defvar core-node-is-source nil!!)
(*proclaim '(type (pvar boolean) core-node-converged))
(*defvar core-node-converged	nil!!)
(*proclaim '(type (pvar big-float)
	    core-node-voltage-n+1))
(*defvar core-node-voltage-n+1 (!! zero))	; voltage at t(n+1)
(*proclaim '(type (pvar big-float)
	    core-node-voltage-n))
(*defvar core-node-voltage-n (!! zero))	; voltage at t(n)
(*proclaim '(type (pvar big-float)
	    core-node-voltage-n-1))
(*defvar core-node-voltage-n-1 (!! zero))	; voltage at t(n-1)
(*proclaim '(type (pvar big-float)
	    core-node-voltage-n-2))
(*defvar core-node-voltage-n-2 (!! zero))	; voltage at t(n-2)
(*proclaim '(type (pvar big-float)
	    core-node-predictor))
(*defvar core-node-predictor (!! zero))	; the predicted voltage at t(n+1)
;  (core-node-capacitance 	float *fp-mantissa* *fp-exponent*)
;  (core-node-conductance 	float *fp-mantissa* *fp-exponent*)
(*proclaim '(type (pvar big-float)
	    core-node-jacobian))
(*defvar core-node-jacobian (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-charge))
(*defvar core-node-charge (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-current))
(*defvar core-node-current (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-rhs))
(*defvar core-node-rhs (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-prev-charge))
(*defvar core-node-prev-charge (!! zero)) ; the charge from the previous time point
(*proclaim '(type (pvar big-float)
	    core-node-prev-current))
(*defvar core-node-prev-current (!! zero)) ; the current from the previous time point
(*proclaim '(type (pvar big-float)
	    core-node-old-rhs))
(*defvar core-node-old-rhs (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-delta-v))
(*defvar core-node-delta-v (!! zero))
(*proclaim '(type (pvar big-float)
	    core-node-prev-delta-v))
(*defvar core-node-prev-delta-v (!! zero))
)

#+parallel
(progn
;(defvar off-diag-struct-list '(
;(def-simpl-struct (core-off-diag)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
		  core-off-diag-point-diag))
(*defvar core-off-diag-point-diag (!! 0))
(*proclaim '(type (pvar boolean) core-off-diag-lower))
(*defvar core-off-diag-lower nil!!)
)

#+parallel
(progn
;(defvar core-device-struct-list )
;(def-simpl-struct (core-device))
(*proclaim '(type (pvar boolean) core-device-node1-valid))
(*defvar core-device-node1-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node1-point))
(*defvar core-device-node1-point (!! 0));connection-slot
(*proclaim '(type (pvar big-float)
	    core-device-node1-voltage))
(*defvar core-device-node1-voltage (!! 0))
(*proclaim '(type (pvar little-float)
	    core-device-node1-const))
(*defvar core-device-node1-const (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node1-charge))
(*defvar core-device-node1-charge (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node1-conductance))
(*defvar core-device-node1-conductance (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node1-current))
(*defvar core-device-node1-current (!! zero))

(*proclaim '(type (pvar boolean) core-device-node2-valid))
(*defvar core-device-node2-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node2-point))
(*defvar core-device-node2-point (!! 0));connection-slot
(*proclaim '(type (pvar big-float)
	    core-device-node2-voltage))
(*defvar core-device-node2-voltage (!! 0))
(*proclaim '(type (pvar little-float)
	    core-device-node2-const))
(*defvar core-device-node2-const (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node2-charge))
(*defvar core-device-node2-charge (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node2-conductance))
(*defvar core-device-node2-conductance (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node2-current))
(*defvar core-device-node2-current (!! zero))

(*proclaim '(type (pvar boolean) core-device-node3-valid))
(*defvar core-device-node3-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node3-point))
(*defvar core-device-node3-point (!! 0));connection-slot
(*proclaim '(type (pvar big-float)
	    core-device-node3-voltage))
(*defvar core-device-node3-voltage (!! 0))
(*proclaim '(type (pvar little-float)
	    core-device-node3-const))
(*defvar core-device-node3-const (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node3-charge))
(*defvar core-device-node3-charge (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node3-conductance))
(*defvar core-device-node3-conductance (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node3-current))
(*defvar core-device-node3-current (!! zero))

(*proclaim '(type (pvar boolean) core-device-node4-valid))
(*defvar core-device-node4-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node4-point))
(*defvar core-device-node4-point (!! 0));connection-slot
(*proclaim '(type (pvar big-float)
	    core-device-node4-voltage))
(*defvar core-device-node4-voltage (!! 0))
(*proclaim '(type (pvar little-float)
	    core-device-node4-const))
(*defvar core-device-node4-const (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node4-charge))
(*defvar core-device-node4-charge (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node4-conductance))
(*defvar core-device-node4-conductance (!! zero))
(*proclaim '(type (pvar big-float)
	    core-device-node4-current))
(*defvar core-device-node4-current (!! zero))

(*proclaim '(type (pvar boolean) core-device-node5-valid))
(*defvar core-device-node5-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node5-point))
(*defvar core-device-node5-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node5-voltage))
(*defvar core-device-node5-voltage (!! 0))
(*proclaim '(type (pvar little-float)
	    core-device-node5-const))
(*defvar core-device-node5-const (!! 0))

(*proclaim '(type (pvar boolean) core-device-node6-valid))
(*defvar core-device-node6-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-node6-point))
(*defvar core-device-node6-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node6-voltage))
(*defvar core-device-node6-voltage (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-node6-const))
(*defvar core-device-node6-const (!! 0))

;; Here are some slots for use by devices
(*proclaim '(type (pvar little-float) device-little-float-1))
(*defvar device-little-float-1 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-2))
(*defvar device-little-float-2 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-3))
(*defvar device-little-float-3 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-4))
(*defvar device-little-float-4 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-5))
(*defvar device-little-float-5 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-6))
(*defvar device-little-float-6 (!! zero))
(*proclaim '(type (pvar little-float) device-little-float-7))
(*defvar device-little-float-7 (!! zero))
)

#+(and parallel off-diag)
(progn
;; off diagonal matrix entries
;; 1
(*proclaim '(type (pvar boolean) core-device-mat-12-valid))
(*defvar core-device-mat-12-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-12-point))
(*defvar core-device-mat-12-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-12-value))
(*defvar core-device-mat-12-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-13-valid))
(*defvar core-device-mat-13-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-13-point))
(*defvar core-device-mat-13-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-13-value))
(*defvar core-device-mat-13-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-14-valid))
(*defvar core-device-mat-14-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-14-point))
(*defvar core-device-mat-14-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-14-value))
(*defvar core-device-mat-14-value (!! 0))

;; 2
(*proclaim '(type (pvar boolean) core-device-mat-21-valid))
(*defvar core-device-mat-21-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-21-point))
(*defvar core-device-mat-21-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-21-value))
(*defvar core-device-mat-21-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-23-valid))
(*defvar core-device-mat-23-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-23-point))
(*defvar core-device-mat-23-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-23-value))
(*defvar core-device-mat-23-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-24-valid))
(*defvar core-device-mat-24-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-24-point))
(*defvar core-device-mat-24-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-24-value))
(*defvar core-device-mat-24-value (!! 0))

;; 3
(*proclaim '(type (pvar boolean) core-device-mat-31-valid))
(*defvar core-device-mat-31-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-31-point))
(*defvar core-device-mat-31-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-31-value))
(*defvar core-device-mat-31-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-32-valid))
(*defvar core-device-mat-32-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-32-point))
(*defvar core-device-mat-32-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-32-value))
(*defvar core-device-mat-32-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-34-valid))
(*defvar core-device-mat-34-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-34-point))
(*defvar core-device-mat-34-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-34-value))
(*defvar core-device-mat-34-value (!! 0))

;; 4
(*proclaim '(type (pvar boolean) core-device-mat-41-valid))
(*defvar core-device-mat-41-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-41-point))
(*defvar core-device-mat-41-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-41-value))
(*defvar core-device-mat-41-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-42-valid))
(*defvar core-device-mat-42-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-42-point))
(*defvar core-device-mat-42-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-42-value))
(*defvar core-device-mat-42-value (!! 0))
(*proclaim '(type (pvar boolean) core-device-mat-43-valid))
(*defvar core-device-mat-43-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-device-mat-43-point))
(*defvar core-device-mat-43-point (!! 0))
(*proclaim '(type (pvar big-float)
	    core-device-mat-43-value))
(*defvar core-device-mat-43-value (!! 0))

)

#+(and parallel mos1)
(progn
;(defvar mos1-struct-list )
;(def-simpl-struct (core-mos1 (:include core-device)))
(*proclaim '(type (pvar boolean) core-mos1-equal-ds))
(*defvar core-mos1-equal-ds	nil!!)
(*proclaim '(type (pvar boolean) core-mos1-equal-dg))
(*defvar core-mos1-equal-dg	nil!!)
(*proclaim '(type (pvar boolean) core-mos1-equal-sg))
(*defvar core-mos1-equal-sg	nil!!)
(*proclaim '(type (pvar boolean) core-mos1-equal-bg))
(*defvar core-mos1-equal-bg	nil!!)
(*proclaim '(type (pvar boolean) core-mos1-equal-sb))
(*defvar core-mos1-equal-sb	nil!!)
(*proclaim '(type (pvar boolean) core-mos1-equal-db))
(*defvar core-mos1-equal-db	nil!!)
; parameters

;; the next seven pvars point to the generic device fields
;(*defvar core-mos1-w (!! zero))
;(*defvar core-mos1-l (!! zero))
;(*defvar core-mos1-fixed-vto (!! zero))		; has vto and phi built in
;(*defvar core-mos1-vfb (!! zero))
;(*defvar core-mos1-phi (!! zero))
;(*defvar core-mos1-beta (!! zero))
;(*defvar core-mos1-lambda (!! zero))

(*proclaim '(type (pvar (unsigned-byte 1)) core-mos1-mtype))
(*defvar core-mos1-mtype (!! 0))			; 0 for nmos, 1 for pmos
(*proclaim '(type (pvar little-float) core-mos1-gamma))
(*defvar core-mos1-gamma (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cgsub))
(*defvar core-mos1-cgsub (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cgs))
(*defvar core-mos1-cgs (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cgd))
(*defvar core-mos1-cgd (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cgb))
(*defvar core-mos1-cgb (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cjas))
(*defvar core-mos1-cjas (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cjad))
(*defvar core-mos1-cjad (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cjass))
(*defvar core-mos1-cjass (!! zero))
(*proclaim '(type (pvar little-float) core-mos1-cjasd))
(*defvar core-mos1-cjasd (!! zero))
)

#+parallel
(progn
;(defvar cap-struct-list )
;def-simpl-struct (core-capacitor (:include core-device))
;(*defvar core-capacitor-capacitance (!! zero))
)

;#+parallel
;(progn
;(defvar res-struct-list )
;(def-simpl-struct (core-resistor (:include core-device)))
;)

;#+parallel
;(progn
;(defvar isource-struct-list )
;(def-simpl-struct (core-isource (:include core-device)))
;)

#+(and parallel neuron)
(progn
; soma-struct-list
;(*defvar core-soma-g-shunt (!! zero))
;(*defvar core-soma-capacitance (!! zero))
;(*defvar core-soma-g-leak (!! zero))
;(*defvar core-soma-v-leak (!! zero))

; channel-struct-list
(*proclaim '(type (pvar (unsigned-byte 8)) core-channel-a-power))
(*defvar core-channel-a-power (!! 0))
(*proclaim '(type (pvar (unsigned-byte 8)) core-channel-i-power))
(*defvar core-channel-i-power (!! 0))
(*proclaim '(type (pvar (unsigned-byte 8)) core-channel-c-power))
(*defvar core-channel-c-power (!! 0))
(*proclaim '(type (pvar boolean) core-channel-variable-e-ca))
(*defvar core-channel-variable-e-ca nil!!)
(*proclaim '(type (pvar boolean) core-channel-synapsep))
(*defvar core-channel-synapsep nil!!)

;(*defvar core-channel-g-bar (!! zero))
;(*defvar core-channel-v-reversal (!! zero))
;(*defvar core-channel-ca-conc-extra (!! zero))
;(*defvar core-channel-Eca-nearst-eqn-const (!! zero))

; synapse-struct-list
(*proclaim '(type (pvar boolean) core-synapse-variable-e-ca))
(*defvar core-synapse-variable-e-ca nil!!)
(*proclaim '(type (pvar boolean) core-synapse-synapsep))
(*defvar core-synapse-synapsep nil!!)

;(*defvar core-synapse-g-bar (!! zero))
;(*defvar core-synapse-v-reversal (!! zero))
;(*defvar core-synapse-ca-conc-extra (!! zero))
;(*defvar core-synapse-Eca-nearst-eqn-const (!! zero))

; particle-struct-list
;(*defvar core-particle-z (!! zero))
;(*defvar core-particle-gamma (!! zero))
;(*defvar core-particle-alpha-0 (!! zero))
;(*defvar core-particle-v-half (!! zero))
;(*defvar core-particle-tau-0 (!! zero))
;(*defvar core-particle-Q10 (!! zero))

; conc-part-struct-list
;(*defvar core-conc-part-alpha (!! zero))
;(*defvar core-conc-part-beta (!! zero))
(*proclaim '(type (pvar (unsigned-byte 8)) core-channel-c-power))
(*defvar core-conc-part-power (!! 0))

; conc-int-struct-list
;(*defvar core-conc-int-A-11 (!! zero))
;(*defvar core-conc-int-A-12 (!! zero))
;(*defvar core-conc-int-A-21 (!! zero))
;(*defvar core-conc-int-A-22 (!! zero))
;(*defvar core-conc-int-B-1 (!! zero))
;(*defvar core-conc-int-B-2 (!! zero))
;(*defvar core-conc-int-k-1 (!! zero))
(*proclaim '(type (pvar boolean) core-conc-int-ca-channel1-valid))
(*defvar core-conc-int-ca-channel1-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-conc-int-ca-channel1))
(*defvar core-conc-int-ca-channel1 (!! 0))
(*proclaim '(type (pvar boolean) core-conc-int-ca-channel2-valid))
(*defvar core-conc-int-ca-channel2-valid nil!!)
(*proclaim '(type (pvar (unsigned-byte *pointer-length*))
	    core-conc-int-ca-channel2))
(*defvar core-conc-int-ca-channel2 (!! 0))

; segment-struct-list
;(*defvar core-segment-g-axial (!! zero))
;(*defvar core-segment-g-leak (!! zero))
;(*defvar core-segment-v-leak (!! zero))
;(*defvar core-segment-capacitance (!! zero))

)
