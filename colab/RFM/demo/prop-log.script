
rfi> exec "prop-log.bat"

batchjob executing...

rfi> ;;; Propositional Logic

rfi> ; Thomas Krause

rfi> ; DFKI Kaiserlautern, 07. 02. 1991

rfi> 

rfi> 

rfi> inter

rfi> destroy

rfi> consult "prop-log"

rfi> l
(ft (not-f true)
    false )
(ft (not-f false)
    true )
(ft (and-f _u true)
    _u )
(ft (and-f _u false)
    false )
(ft (or-f _u false)
    _u )
(ft (or-f _u true)
    true )
(ft (nand-f _u _v)
    (not-f (and-f _u _v)) )
(ft (nor-f _u _v)
    (not-f (or-f _u _v)) )
(ft (imp-f _u _v)
    (or-f (not-f _u) _v) )
(ft (xor-f _u _v)
    (or-f (and-f (not-f _u) _v) (and-f _u (not-f _v))) )
(ft (equiv-f _u _v)
    (not-f (xor-f _u _v)) )

rfi> (or-f _u _v)
_u:1
(_v = false)
(_u = _u:1)

rfi> more
true
(_v = true)
(_u = _u:1)

rfi> more

unknown
rfi> 

rfi> (is true (imp-f _u _v))
true
(_v = true)
(_u = true)

rfi> more
true
(_v = false)
(_u = false)

rfi> more
true
(_v = true)
(_u = false)

rfi> more

unknown
rfi> 

rfi> 

rfi> 

rfi> (is true (imp-f _A (imp-f _B _A)))
true
(_a = false)
(_b = true)

rfi> more
true
(_a = true)
(_b = true)

rfi> more
true
(_a = false)
(_b = false)

rfi> more
true
(_a = true)
(_b = false)

rfi> more

unknown
rfi> 

rfi> ; Compiling

rfi> horizon

rfi> compile

rfi> l or-f
(ft (or-f _u false)
    _u )
(ft (or-f _u true)
    true )

rfi> listclass or-f/2
((proc
  or-f/2
  2
  (fun1den
   nil
   ((_u (1 (1) nil)))
   (chunk
    ((usrlit (or-f (_u (first safe temp)) false) (2 0 (2 1)))
     (_u (nonfirst safe temp)) )
    (2 nil) ) )
  (fun1den
   nil
   ((_u (1 (1) nil)))
   (chunk
    ((usrlit (or-f (_u (first safe temp)) true) (2 0 (2 1))) true)
    (2 nil) ) ) ))


rfi> listcode or-f/2
((try_me_else 0 2)
 (get_constant false 2)
 (proceed)
 0
 (trust_me_else_fail 2)
 (get_constant true 2)
 (put_constant true 1)
 (proceed) )


rfi> emul

rfe> (is true (imp-f _A (imp-f _B _A)))
true

(_b = true)
(_a = false)
true

(_b = true)
(_a = true)
true

(_b = false)
(_a = false)
true

(_b = false)
(_a = true)

rfe> 

batchjob done...
