;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Predefined Strategies of FORWARD          ;;;
;;;         used in COLAB                      ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Thomas Labisch                      ;;;
;;;        Martin Harm       September 1991    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Depth first Search:

; (df-enum `(tup _Fact | _Rest) _Inference) enumerates all the
; consequences of a list of given facts (depth-first search).
; For a goal (df-enum _Fact _Inference) the consequences of ONE
; fact are derived.

(ft (df-enum (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (df-elist `(tup _Fact | _Rest) _Inference))
(ft (df-enum _Fact _Inference)
    (nou _Fact `(tup _y | _x))    ;;; changed to be compilable
    (fc-initialize)
    @_Fact
    (df-one _Fact _Inference))
(ft (df-enum _x _y) 
    (reset-retain) 
    unknown)

(ft (df-elist (tup _Fact | _Rest) _Inference)
    (df-one _Fact _Inference))
(ft (df-elist (tup _First | _Rest) _Inference)
    (df-elist _Rest _Inference))

(ft (df-one _Fact _Inference)
    (forward _Fact _Conclusion)
    (df-one-more _Conclusion _Inference))
(ft (df-one-more _Conclusion _Conclusion) _Conclusion)
(ft (df-one-more _Conclusion _Next)
    (df-one _Conclusion _Next))



; (df-all  `(tup _Fact | _Rest) _Inference) has as its value
; the list of consequences for its second argument derived
; in depth-first search.

(ft (df-all (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (df-alist `(tup _Fact | _Rest) _Inference))
(ft (df-all _Fact _Inference)
    (nou _Fact `(tup _y | _x))  ;;; changed to compilable
    (fc-initialize)
    @_Fact
    (df-all1 _Fact _Inference))
(ft (df-all _x _Inference-pattern)
    (is _Inferences (collect-facts))
    (is _Inference-list (filter _Inference-pattern _Inferences))
    _Inference-list)
(ft (df-all _x _Inference)
    (reset-retain)
    unknown
)


(ft (df-alist (tup _Fact | _Rest) _Inference)
    (df-all1 _Fact _Inference))
(ft (df-alist (tup _First | _Rest) _Inference)
    (df-alist _Rest _Inference))

(ft (df-all1 _Fact _Inference)
    (forward _Fact _Conclusion)
    (df-all1 _Conclusion _Inference))

; Breadth-first Search:
;
; (df-enum `(tup _Fact | _Rest) _Inference) enumerates all the
; consequences of a list of given facts (depth-first search).
; For a goal (df-enum _Fact _Inference) the consequences of ONE
; fact are derived.

(ft (bf-enum (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (bf-elist `(tup _Fact | _Rest) _Inference))
(ft (bf-enum _Fact _Inference)
    (nou _Fact `(tup _y | _x))   ;;;; changed to be comilable
    (fc-initialize)
    @_Fact
    (forward _Fact _Inference)
    _Inference)
(ft (bf-enum _Fact _Inference) 
    @_Fact 
    (forward-one _Inference))
(ft (bf-enum _x _y) (reset-retain) unknown)

(ft (bf-elist (tup _Fact | _Rest) _Inference)
    (forward _Fact _Inference)
    _Inference)
(ft (bf-elist (tup _First | _Rest) _Inference)
    (bf-elist _Rest _Inference))
(ft (bf-elist (tup) _Inference)
    (forward-one _Inference))

(ft (forward-one _Inference)
    (open-node _Fact)
    (forward _Fact _Inference)
    _Inference)


; (bf-all  `(tup _Fact | _Rest) _Inference) has as its value
; the list of consequences for its second argument derived
; in depth-first search.

(ft (bf-all (tup _Fact | _Rest) _Inference-pattern)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (bf-alist `(tup _Fact | _Rest) _Inference-pattern))
(ft (bf-all _Fact _Inference-pattern)
    (nou _Fact `(tup _y | _x))    ;;;; changed to be comilable
    (fc-initialize)
    @_Fact
    (forward _Fact _Conclusion)
    unknown)
(ft (bf-all _Fact _Inference-pattern)
    (forward-all)
    (is _Inferences (collect-facts))
    (is _Inference-list (filter _Inference-pattern _Inferences))
    (reset-retain)
    _Inference-list)

(ft (bf-alist (tup _Fact | _Rest) _Inference-pattern)
    (forward _Fact _Inference)
    unknown)
(ft (bf-alist (tup _Fact | _Rest) _Inference-pattern)
    (bf-alist _Rest _Inference-pattern))

(ft (forward-all)
    (open-node _Fact)
    (forward _Fact _Conclusion)
    unknown)
(ft (forward-all)
     true)





; The initial facts of for forward reasoning must be satisfied, so that
; the can be used for proving premises of rules.
; Instead of simply testing it would be possible to assert them if
; they are not already satisfied.
(hn (satisfied (tup)))
(hn (satisfied (tup _Fact | _Rest))
    @_Fact
    (satisfied _Rest))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    Access onto the Retain Stack            ;;;
;;;    (direct access)                         ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Thomas Labisch                      ;;;
;;;        Martin Harm       September 1991    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; the open node, all at once


(hn (open-node _Fact) 
    (next-open-node)       ;;;;; order (next ..) (get-open ...) changed by MH 10.07
    (is _Fact (get-open-node)))         
(hn (open-node _Fact) 
    (not-open-node-at-end) 
    (open-node _Fact))



(ft (retain _Fact)
    (not-reached _Fact) 
    (push-fact-retain _Fact)
    _Fact)



(hn (not-reached _Conclusion)
    (is true (subsumes-value _Conclusion)))


;(ft (tup | _rest) `(tup | _rest))






