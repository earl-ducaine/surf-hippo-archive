
work([], [], A, B) :- member(X, A), member(X, B), !.
work([X | L], R, A, B) :- atomic(X), !, work(L, R, [X | A], B).
work(L, [X | R], A, B) :- atomic(X), !, work(L, R, A, [X | B]).
work(L,
     [not[P] | R],
     A,
     B) :- !, work([P | L], R, A, B).
work([not[P] | L],
     R,
     A,
     B) :- !, work(L, [P | R], A, B).
work(L,
     [and[P, Q] | R],
     A,
     B) :- !, work(L, [P | R], A, B), work(L, [Q | R], A, B).
work([and[P, Q] | L],
     R,
     A,
     B) :- !, work([P, Q | L],
                   R,
                   A,
                   B).
work(L,
     [or[P, Q] | R],
     A,
     B) :- !, work(L,
                   [P, Q | R],
                   A,
                   B).
work([or[P, Q] | L],
     R,
     A,
     B) :- !, work([P | L], R, A, B), work([Q | L], R, A, B).
work(L,
     [impl[P, Q] | R],
     A,
     B) :- !, work([P | L], [Q | R], A, B).
work([impl[P, Q] | L],
     R,
     A,
     B) :- !, work([Q | L], R, A, B), work(L, [P | R], A, B).
work(L,
     [equiv[P, Q] | R],
     A,
     B) :- !, work([P | L], [Q | R], A, B), work([Q | L], [P | R], A, B).
work([equiv[P, Q] | L],
     R,
     A,
     B) :- !, work([P, Q | L],
                   R,
                   A,
                   B), work(L,
                            [P, Q | R],
                            A,
                            B).