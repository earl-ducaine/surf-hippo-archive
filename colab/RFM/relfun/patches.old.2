; patches
; -------


; command cd
; ==========


(setq *lisp-functions* (cons 'rf-cd *lisp-functions*))

(setq *rfi-help-dir* 
  (namestring 
   (make-pathname :directory (append (logdir-look-up :RFM)
				     '("document"
				       "manual"
				       "interpreter")))))

(logdir-define :cd (make-pathname :directory (logdir-look-up :RFM)))

(defun rf-cd (&optional name &rest ignore) ; cd and pwd
  (when (and name (or (and (stringp name) (string/= name ""))
		      (symbolp name)))
	(let* ((*print-case* :downcase)
	       (pname (princ-to-string name)))
	      (if (eq (char pname 0) #\/)
		  (logdir-define :cd (pathname (format nil "~a/" pname)))
		  (logdir-define :cd (logdir-cd1 :cd pname)))))
  (namestring (make-pathname :directory (logdir-look-up :cd))))


(defun read-db-from-file (file)
  (rf-princ-like-lisp (format nil "~A Reading file \"~A\" .."
                              (if (eq *style* 'prolog) "%" ";") file))
  (if (eq *style* 'prolog)
      (pro-read-data-base file)        ; returns NIL if error detected
    (with-open-file (ifile (logdir-file :cd file) :direction :input)
                    (let ((*readtable* *rfi-readtable*))
                      (do ((clause nil)
                           (tmpdb nil (cons clause tmpdb)))
                          ((null (setq clause (read ifile nil nil nil)))
                          (reverse tmpdb)))))))


(defun rfi-cmd-tell-1 (file)
  (with-open-file (ofile (logdir-file :cd file) 
			 :direction :output :if-exists :supersede)
		  (let ((*rfi-script-output* nil)
			(*rfi-standard-output* ofile))
                    (rf-pprint-db *rfi-database*)
                    (fresh-line ofile))))



(defun rfi-load-prelude nil
  (if (probe-file (logdir-file :cd "prelude.rf"))
      (setq *rfi-prelude* (rfi-cmd-consult-1 "prelude.rf"))
      (rf-print "REMARK (rfi-load-prelude): no prelude.rf could be loaded")))




(defun rfi-cmd-startscript-1 (filename)
  (setq *rfi-script-output* 
	(open (logdir-file :cd filename)
	      :direction :output :if-exists :supersede)))

(defun rfi-cmd-execute-1 (infile)
  ;(rf-print '|batchjob executing...|)
  ;(rf-fresh-line)
  (relfun (open (logdir-file :cd infile) :direction :input) 'batch)
  ;(setq *rfi-script-input* (open infile :direction :input))
  ;(rfi-set-batch-mode)
  )


(defun rfi-cmd-replace (userline
                        &aux (filename (rfi-extension (cadr userline)
                                                      (rf-or-rfp) )))
  (if (probe-file (logdir-file :cd filename))
      (setq *rfi-database* (rfi-cmd-consult-1 filename))
    (rf-error "(rfi-cmd-replace): " filename " file doesn't exist!")))



(defun rfi-cmd-consult (userline)
  (let* ((filename (rfi-extension (cadr userline) (rf-or-rfp))))
    (if (probe-file (logdir-file :cd filename))
        (setq *rfi-database* (append *rfi-database*
                                     (rfi-cmd-consult-1 filename)))
      (rf-error "(rfi-cmd-consult): " filename " file doesn't exist!"))))



(defun rfi-cmd-tell (userline)
  (let ((filename (rfi-extension (cadr userline) (rf-or-rfp))))
    (if (probe-file (logdir-file :cd filename))
        (if (rfi-yes-or-no-p "file already exists - overwrite? ")
            (progn (delete-file filename)
                   (rfi-cmd-tell-1 filename)))
      (rfi-cmd-tell-1 filename))))


(defun rfi-cmd-startscript (userline)
  (let ((filename (rfi-extension (cadr userline) ".script")))
    (cond ((rfi-script-mode-p)
           (rf-error "(rfi-cmd-startscript): script already running!"))
          ((probe-file (logdir-file :cd filename))
           (if (rfi-yes-or-no-p (concatenate 'string filename " file already exists - overwrite? "))
               (progn (delete-file filename)
                      (rfi-cmd-startscript-1 filename))))
          (t
           (rfi-cmd-startscript-1 filename)))))


(defun rfi-cmd-execute (userline)
  (let ((infile (rfi-extension (cadr userline) ".bat")))
    (cond ;((rfi-batch-mode-p)
           ;(rf-error "(rfi-cmd-execute): batch already running!"))
          ((not (probe-file (logdir-file :cd infile)))
           (rf-error "(rfi-cmd-execute): " infile " batchfile doesn't exist!"))
          (t
           (rfi-cmd-execute-1 infile)))))

 
(defun pro-read-data-base (filename)
  (catch :pro-read-error-tag
    (with-open-file
     (the-input-stream (logdir-file :cd filename) :direction :input)
     (let ((scanner (gen-scanner the-input-stream))
           (clause nil)
           (data-base nil)
           (error-p nil) )
       (loop
        (if (eq 'empty (funcall scanner 'last-token-type))
            (if error-p
                (return nil)
              (return (reverse data-base)) ))
        (setq clause
              (catch :pro-read-error-tag
                (parse-clause scanner) ))
        (cond ((null clause)
               ;; Error
               (setq error-p t)
               (rf-terpri)
               (rf-princ-like-lisp "Continue reading to find more")
               (rf-princ-like-lisp " errors in line ")
               (funcall scanner 'continue-after-error)
               (rf-princ-like-lisp (token-y-pos (funcall scanner
                                                         'last-token )))
              (rf-princ-like-lisp ".")
               (rf-terpri) )
              (error-p
               ;; Error in previous clause --> don't construct database
               )
              (t
               ; No error
               (setq data-base (cons clause data-base)) )))))))


