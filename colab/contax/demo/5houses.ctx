;;; -*- Base: 10; Mode: LISP -*-
;;; Constraint Beispiel nach einer Logelei von Willy Hochkeppel

;;;
;;; In fuenf nebeneinaderstehenden Haeusern (1 bis 5), die jeweils eine
;;; andere Farbe haben, wohnen 5 Menschen verschiedener Nationalitaet,
;;; von denen jeder ein anderes Haustier hat, ein anderes Getraenk be-
;;; vorzugt und ein andere Haustier hat.
;;; Gegeben sind die folgenden Aussagen:
;;;
;;; a: Der Englaender wohnt im roten Haus.
;;; b: Der Spanier hat einen Hund.
;;; c: Im gruennen Haus wird Kaffe getrunken.
;;; d: Tee drinkt der Russe.
;;; [e: Gleich links neben dem weissen steht das gruene Haus.]
;;; f: Der reval-Raucher zuechtet Bienen.
;;; g: Chesterfield wird im gelben Haus geraucht.
;;; h: Im Haus in der Mitte (3) gibt es Milch.
;;; i: Der Norweger wohnt im ersten Haus (1).
;;; [k: Der Players-Raucher ist ein Nachbar der Katzen-Besitzers.]
;;; [l: Chesterfield werden im Haus neben dem Pferdebesitzer geraucht.]
;;; m: Der Zigarrenraucher trink O-Saft.
;;; n: Der Japaner raucht Camel.
;;; [o: Der Norweger wohnt neben dem blauen Haus.]
;;;
;;; Die [] eingeklammerten Aussagen werden noch nicht beruecksichtigt.


( contax:unspy )

( contax:reset )


( contax:def-concept places
  ( first second third fourth fifth ))

( dolist ( var '( red green white yellow blue
		  dog snail  fox   horse zebra
		  milk juice water coffee tea
		  painter diplomat violonist doctor sculptor
		  england spain italy norway japan ))
	 ( contax:make-variable-fn var :domains '( places )))
  

( defun once-only-fn ( u v w x y &aux ( args ( list u v w x y )))
"Checks, if all args are of the same domain and different."
  ( and ( every #'( lambda ( z )
                    ( equal z
                         ( contax:superconcepts u )))
                ( mapcar #'contax:superconcepts ( rest args )))
        ( every #'( lambda ( z )
                    ( member z args ))
                ( contax:subconcepts ( first ( contax:superconcepts u ))))))


( contax:def-lisp-constraint once-only ( a b c d e ) (( places )( places )( places )( places )( places ))
  once-only-fn )


( contax:make-constraint colour-once-only once-only
  :a green
  :b red
  :c yellow
  :d blue
  :e white )


( contax:make-constraint pet-once-only once-only
  :a dog
  :b zebra
  :c fox
  :d snail
  :e horse )


( contax:make-constraint profession-once-only once-only
  :a painter
  :b diplomat
  :c violonist
  :d doctor
  :e sculptor )


( contax:make-constraint drinking-once-only once-only
  :a juice
  :b water
  :c tea
  :d coffee
  :e milk )


( contax:make-constraint nation-once-only once-only
  :a england
  :b spain
  :c japan
  :d italy
  :e norway )


( contax:def-lisp-constraint equal ( x y ) (( places )( places ))
  eq )


;;;
;;; a: The English lives in the red house.
;;;


( contax:make-constraint eng-red equal
  :x england
  :y red )


;;;
;;; b: the spanish owns a dog
;;;


( contax:make-constraint spa-dog equal
  :x spain
  :y dog )


;;;
;;; c: coffee in the green house
;;;


( contax:make-constraint cof-gre equal
  :x coffee
  :y green )


;;;
;;; d: italian drinks tea
;;;


( contax:make-constraint rus-tea equal
  :x italy
  :y tea )


;;;
;;; f: reval smoker has bees
;;;


( contax:make-constraint jap-pai equal
  :x japan
  :y painter )


( contax:make-constraint scu-sna equal
  :x sculptor
  :y snail )


( contax:make-constraint dip-yel equal
  :x diplomat
  :y yellow )


( contax:assign milk ( third ))

#| alternative:
   ( contax:def-primitive-constraint third-house ( x ) (( places ))
     ( third ))

   ( contax:make-constraint mid-mil third-house :x milk )
|#


( contax:make-constraint vio-jui equal
  :x violonist
  :y juice )

#| alternative:
   ( contax:def-primitive-constraint first-house ( x ) (( places ))
     ( first ))

   ( contax:make-constraint nor-fir first-house :x norway )
|#

( contax:assign norway ( first ))


( contax:def-primitive-constraint to-the-left ( left right ) (( places )( places ))
  ( first second )
  ( second third )
  ( third fourth )
  ( fourth fifth ))


( contax:def-disjunctive-constraint next-to ( house-1 house-2 ) (( places )( places ))
  ( to-the-left house-1 house-2 )
  ( to-the-left house-2 house-1 ))


#| alternative:
( contax:def-primitive-constraint next-to ( house-1 house-2 ) (( places )( places ))
  ( first second ) ( second first )
  ( second third ) ( third second )
  ( third fourth ) ( fourth third )
  ( fourth fifth ) ( fifth fourth ))
|#

( contax:make-constraint gre-whi to-the-left
  :left  white
  :right green )


( contax:make-constraint nor-blu next-to
  :house-1 norway
  :house-2 blue )


( contax:make-constraint fox-doc next-to
  :house-1 fox
  :house-2 doctor )


( contax:make-constraint hor-dip next-to
  :house-1 horse
  :house-2 diplomat )


; ( contax:init-hac )

( apply #'( lambda ( a b )
	    ( mapc #'( lambda ( x y )
		       ( format T "~&~8a: ~a" x y ))
		   a b ))
	( contax:propagate :consistency-mode :global ))

;( when ( y-or-n-p "~%Do you want to start global propagation while spying?" )
; ( contax:spy )
; ( contax:propagate ))

;;; Loesungen:

;;;           | colour   nation   drink    pet      smoke
;;; ----------+-------------------------------------------------
;;; 1st-house | yellow   norway   water    cat      chesterfield
;;; 2nd-house | blue     russia   tea      horse    players
;;; 3rd-house | red      british  milk     bees     reval
;;; 4th-house | green    japan    coffee   zebra    camel
;;; 5th-house | white    spain    o-juice  dog      cigars
