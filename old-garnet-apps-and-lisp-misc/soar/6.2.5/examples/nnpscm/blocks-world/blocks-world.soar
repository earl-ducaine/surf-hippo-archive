;;; 
;;; FILE               : blocks-world.s
;;;

;;;
;;; AUTHOR(1)          : John.E.Laird [ Soar 5.2 ]
;;;

;;;
;;; CREATED(1)         : Laird, et al. (1990). Soar User's Manual: Version 5.2
;;;

;;;
;;; MODIFIED(2)        : Apr 26, 93   [ Soar 6.0.7 ] Aladin.Akyurek
;;; MODIFIED(1)        : Apr 24, 91   [ Soar 5.2.x ] Aladin.Akyurek
;;;

;;;
;;; Apr 26, 93         : Updated to run in Soar 6.0.7, 6.0.8.
;;; Apr 24, 91         : Modified to run to completion in Soar 5.2.
;;;

(chunk-free-problem-spaces :add blocks-world)

;;;
;;; TOP PROBLEM SPACE:
;;; ELABORATE TOP STATE
;;;

(sp top-ps*elaborate*initial-state
    (state <g> ^name top-goal ^problem-space <p> )
    (<p> ^name top-ps)	
    (<g> ^name top-state)
    -->
    (<g> ^object-dynamic <table-dyn> + &,
                         <blockA-dyn> + &,
                         <blockB-dyn> + &,
                         <blockC-dyn> + & )
    (<blockA-dyn> ^object-static <blockA> ^clear yes ^ontop <blockB>)
    (<blockA> ^name A ^type block)
    (<blockB-dyn> ^object-static <blockB> ^clear no ^ontop <table>)
    (<blockB> ^name B ^type block)
    (<blockC-dyn> ^object-static <blockC> ^clear yes ^ontop <table>)
    (<blockC> ^name C ^type block)
    (<table-dyn> ^clear yes ^object-static <table>)
    (<table> ^name table ^type table)
    (write (crlf) |Initial state has A on B and B and C on the table.|))

(sp top-ps*elaborate*state*detect-tower
    (state <g> ^problem-space <p> )
    (<p> ^name top-ps)
    (<g> ^object-dynamic <blockA-dyn>
	                 { <> <blockA-dyn> <blockB-dyn> }
                         { <> <blockA-dyn> <> <blockB-dyn> <blockC-dyn> })
    (<blockA-dyn> ^object-static <blockA> ^ontop <blockB>)
    (<blockB-dyn> ^object-static <blockB>
                  ^ontop <blockC>)
    (<blockC-dyn> ^object-static <blockC>
                  ^ontop <table>)
    (<blockA> ^name A)
    (<blockB> ^name B)
    (<blockC> ^name C)
    (<table> ^name table)
    -->
    (<g> ^object-dynamic <tower> + & )  
    (<tower> ^top-block <blockA>
             ^middle-block <blockB>
             ^bottom-block <blockC>))

;;;
;;; TOP PROBLEM SPACE OPERATOR:
;;; BUILD-TOWER
;;;

(sp top-ps*propose*operator*build-tower
    (state <g> ^problem-space <p> )
    (<p> ^name top-ps)
    (<g> ^object-dynamic <table-dyn>
                         <blockA-dyn>
                         <blockB-dyn>
                         <blockC-dyn>)
    (<blockA-dyn> ^object-static <blockA>)
    (<blockA> ^name A)
    (<blockB-dyn> ^object-static <blockB>)
    (<blockB> ^name B)
    (<blockC-dyn> ^object-static <blockC>)
    (<blockC> ^name C)
    (<table-dyn> ^object-static <table>)
    (<table> ^name table)
   -{ (<g> ^object-dynamic <tower>)
      (<tower> ^top-block <blockA>
               ^middle-block <blockB>
               ^bottom-block <blockC>) }
    -->
    (<g> ^operator <o>)
    (<o> ^name build-tower ^desired-state <ds>)
    (<ds> ^object-dynamic <dblockA-dyn> + &,
                          <dblockB-dyn> + &,
                          <dblockC-dyn> + &
          ^ontop-count 3)
    (<dblockA-dyn> ^object-static <blockA> ^ontop <blockB>)
    (<dblockB-dyn> ^object-static <blockB> ^ontop <blockC>)
    (<dblockC-dyn> ^object-static <blockC> ^ontop <table>)
    (write (crlf) |The goal is to get A on B on C on the table.|))

;;;
;;; TOP PROBLEM SPACE:
;;; OPERATOR TERMINATION
;;;

(sp top-goal*terminate*operator*build-tower
    (state <g> ^problem-space <p> 
              ^operator <o>)
    (<p> ^name top-ps)
    (<g> ^object-dynamic <tower>)
    (<tower> ^top-block <blockA>
	     ^middle-block <blockB>
	     ^bottom-block <blockC>)
    (<o> ^name build-tower)
    (<blockA> ^name A)
    (<blockB> ^name B)
    (<blockC> ^name C)
    -->
    (<g> ^operator <o> @ ))

;;;
;;; SUBGOAL BUILD-TOWER:
;;; DESIRED STATE
;;;

(sp operator-no-chage*elaborate*goal*build-tower
    (state <g> ^superstate <sg>
              ^impasse no-change
              ^attribute operator)  
    (state <sg> ^operator <so>)
    (<so> ^name build-tower ^desired-state <ds>)
    -->
    (<g> ^desired <ds> ^name build-tower))

;;;
;;; SUBGOAL BUILD-TOWER:
;;; PROBLEM SPACE
;;;
 
(sp build-tower*propose*space*blocks-world
    (state <g> ^name build-tower)
    -->
    (<g> ^problem-space <p>)
    (<p> ^name blocks-world))

(sp build-tower*elaborate*space*blocks-world
    (state <g> ^name build-tower ^problem-space <p>)
    (<p> ^name blocks-world)
    -->
    (<p> ^default-state-copy yes
	 ^default-operator-copy no
	 ^two-level-attributes object-dynamic + & )) 

;;;
;;; BLOCKS-WORLD PROBLEM SPACE:
;;; INITIAL STATE
;;;
  
;(sp blocks-world*propose*initial-state
;    (state <g> ^name build-tower ^problem-space <p>
;              ^superstate <sg>)
;    (<p> ^name blocks-world)
;    
;    -->
;    )

;;; SBH 7/8/94
;;; New for NNPSCM: must copy down state attrs. to op subgoaling state.

(sp blocks-world*operator-subgoaling*copy-operator-dynamics
    (state <g> ^problem-space.name blocks-world ^name build-tower
	   ^superstate.object-dynamic <od>)
    -->
    (<g> ^object-dynamic <od> + &))
;;;
;;; BLOCKS-WORLD PROBLEM SPACE OPERATOR:
;;; MOVE-BLOCK
;;;
  
(sp blocks-world*propose*operator*move-block
    (state <g> ^problem-space <p>)
    (<p> ^name blocks-world)
    (<g> ^object-dynamic <blockA-dyn> { <> <blockA-dyn> <blockB-dyn> })
    ( <blockA-dyn> ^object-static <blocka> ^clear yes -^ontop <blockb>)
    (<blocka> ^type block)
    (<blockB-dyn> ^object-static <blockb> ^clear yes)
    -->
    (<g> ^operator <o> + )
    (<o> ^name move-block
         ^moving-block <blocka>
         ^destination <blockb>))

;;;
;;; BLOCKS-WORLD PROBLEM SPACE:
;;; OPERATOR IMPLEMENTATION
;;;
  
(sp blocks-world*apply*operator*move-block*remove-ontop
    (state <g>  ^operator <o>)
    (<g> ^object-dynamic <mblock-dyn>)
    (<mblock-dyn> ^object-static <mblock>
                  ^ontop { <> <tblock> <blockb> }
                 -^ontop <tblock>)
    (<o> ^moving-block <mblock> ^destination <tblock>)
    -->
    (<mblock-dyn> ^ontop <blockb> - ))

(sp blocks-world*apply*operator*move-block*create-ontop
    (state <g>  ^operator <o>)
    (<g> ^object-dynamic <mblock-dyn>)
    (<mblock-dyn> ^object-static <mblock>)
    (<o> ^moving-block <mblock>
         ^destination <tblock>)
    -->
    (<mblock-dyn> ^ontop <tblock> + ))

(sp blocks-world*apply*operator*move-block*remove-clear
    (state <g>  ^operator <o>)
    (<g> ^object-dynamic <tblock-dyn>)
    (<tblock-dyn> ^object-static <tblock> ^clear yes)
    (<tblock> ^type block)
    (<o> ^destination <tblock>)
    -->
    (<tblock-dyn> ^clear yes - ^clear no))

(sp blocks-world*apply*operator*move-block*create-clear
    (state <g>  ^operator <o>)
    (<g> ^object-dynamic <mblock-dyn> { <> <mblock-dyn> <ublock-dyn> })
    (<ublock-dyn> ^object-static <ublock> ^clear no)
    (<mblock-dyn> ^object-static <mblock> ^ontop { <> <tblock> <ublock> })
    (<o> ^moving-block <mblock> ^destination <tblock>)
    (<ublock> ^type block)
    -->
    (<ublock-dyn> ^clear no - ^clear yes))

(sp blocks-world*apply*operator*remember*moved-block*a
    (state <g>  ^operator <o>)
    (<g> -^last-moved-block)
    (<o> ^moving-block <mb>)
    -->
    (<g> ^last-moved-block <mb> + ))

(sp blocks-world*apply*operator*remember*moved-block*b
    (state <g>  ^operator <o>)
    (<o> ^moving-block <mb>)
    -->
    (<g> ^last-moved-block <mb> + ))

(sp blocks-world*apply*operator*forget*last-moved-block
    (state <g>  ^operator <o>)
    (<g> ^last-moved-block <lmb>)
    (<o> ^moving-block <mb> <> <lmb>)
    -->
    (<g> ^last-moved-block <lmb> - ))

;;;
;;; BLOCKS-WORLD PROBLEM SPACE:
;;; OPERATOR TERMINATION
;;;
  
(sp blocks-world*terminate*operator*move-block
    (state <g>  ^operator <o>)
    (<g> ^object-dynamic <mblock-dyn>)
    (<o> ^moving-block <mblock> ^destination <tblock>)
    (<mblock-dyn> ^object-static <mblock> ^ontop <tblock>)
    -->
    (<g> ^operator <o> @ ))

;;;
;;; BLOCKS-WORLD PROBLEM SPACE: 
;;; SEARCH CONTROL
;;;

(sp blocks-world*reject*move-block*twice
    (state <g> ^problem-space <p>  
              ^operator <o> + )
    (<p> ^name blocks-world)
    (<g> ^last-moved-block <mb>)
    (<o> ^moving-block <mb>)
    -->
    (<g> ^operator <o> - ))

;;;
;;; BLOCKS-WORLD PROBLEM SPACE:
;;; STATE EVALUATION/GOAL TEST
;;;

(sp blocks-world*elaborate*goal*achieved
    (state <g>  ^desired <d>)
    (<g> ^object-dynamic <block-dyn>)
    (<block-dyn> ^object-static <blocka> ^ontop <blockb>)
    (<d> ^object-dynamic <dblock-dyn>)    
    (<dblock-dyn> ^object-static <blocka> ^ontop <blockb>)
    -->
    (<g> ^achieved <dblock-dyn> <dblock-dyn> & ))

(sp blocks-world*elaborate*state*success
    (state <g> 
              ^desired <d>
              ^achieved <dontop1>
                    	{ <> <dontop1> <dontop2> }
                    	{ <> <dontop1> <> <dontop2> <dontop3> })
    (<d> ^ontop-count 3)
    -->
    (<g> ^success <d> <d> & ))

(sp top-ps*default-operator*wait*halt
    (state <g> ^operator <o>)
    (<o> ^name wait)
    -->
    (halt)) 	        

;;;
;;; BLOCKS-WORLD PROBLEM SPACE: 
;;; MONITOR STATE AND OPERATORS
;;;

(sp blocks-world*monitor*state*relation*ontop
    (state <g> ^problem-space <p> )
    (<p> ^name blocks-world)
    (<g> ^object-dynamic <ob-dyn>)
    (<ob-dyn> ^object-static <top-ob> ^ontop <under-ob>)
    (<top-ob> ^name <top-ob-name>)
    (<under-ob> ^name <under-ob-name>)
    -->
    (write (crlf)
           |  ontop(| <top-ob-name>
           |,| <under-ob-name> |)|))

(sp blocks-world*monitor*tied-operators*move-block
    (state <g> ^impasse tie 
              ^attribute operator 
              ^item <item>)
    (<item> ^name move-block
    	    ^moving-block <mob>
    	    ^destination <dob>)
    (<mob> ^name <mob-name>)
    (<dob> ^name <dob-name>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: move-block(| <mob-name> 
    	   |,| <dob-name> 
    	   |)|))

(sp blocks-world*monitor*operator-application*move-block
    (state <g> ^operator <o>)
    (<o> ^name move-block
    	 ^moving-block <mob>
    	 ^destination <dob>)
    (<mob> ^name <mob-name>)
    (<dob> ^name <dob-name>)
    -->
    (write (crlf) 
           |  APPLIED | <o> 
    	   |: move-block(| <mob-name> 
    	   |,| <dob-name> 
    	   |)|))

;;; eof of blocks-world.s


