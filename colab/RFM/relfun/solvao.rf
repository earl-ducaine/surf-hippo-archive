; solve and -- solve or

; meta interpreter for pure RELFUN
; cannot call builtins
; cannot flatten calls containing a "|"

(hn (solva))
(ft (solva _x) (final _x) _x)
(ft (solva _x | _y) (final _x) (solva | _y))
(ft (solva _x | _y) (is (tup (tup _c | _cs) _goal) (flatten _x))
                    (solva | (appfun `(tup _c | _cs) `(tup _goal | _y))))
(ft (solva _x | _y) (solvo _x | _y))

(ft (solvo (is _pat _rhs) | _z)
    (is _pat (solvo _rhs))
    (solva _pat | _z))
(hn (solvo _x | _z)
    (is _d (deinst _x)) (clause `(hn _d | _y)) (solva | (appfun _y _z)))
(ft (solvo _x | _z)
    (is _d (deinst _x)) (clause `(ft _d | _y)) (solva | (appfun _y _z)))

(ft (flatten (tup)) ! `(tup (tup) (tup)))
(ft (flatten _term) (final _term) ! `(tup (tup) _term))
(ft (flatten (is _pat _rhs)) ! (is (tup _conj _goal) (flatten _rhs))
    `(tup _conj (is _pat _goal)))
(ft (flatten (tup _h | _t)) (final _h) ! (is (tup _conj _goal) (flatten _t))
    `(tup _conj (tup _h | _goal)))
(ft (flatten (tup _h | _t)) ! (is (tup _conj _goal) (flatten _t))
    `(tup (tup (is _1 _h) | _conj) (tup _1 | _goal)))
(ft (flatten (_f | _t))
    (is (tup _conj (tup _g | _goal)) (flatten `(tup _f | _t)))
    `(tup _conj (_g | _goal)))

(ft (deinst _x) (vari-t-e _x) ! _x)
(ft (deinst (tup)) ! `(tup))
(ft (deinst (tup _h | _r)) ! (tup (deinst _h) | (deinst _r)))
(ft (deinst `_x) ! _x)
(ft (deinst _x) (atomic _x) ! _x)
(ft (deinst (_f | _t))
    (is (tup _g | _r) (deinst `(tup _f | _t)))
    `(_g | _r))

(hn (final _x) (vari-t-e _x) !)
(hn (final `_x) !)
(hn (final _x) (atomic _x))

(hn (atomic (_f | _r)) ! false)
(hn (atomic _x))

(ft (f _x) _x)
(ft (g _x) `(tup _x _x))
(hn (h _x _x))
(ft (i _x _x) (g _x))
(ft (tst1) (solva `(i (tup (g a) (g _e)) _w)))
(ft (apptst (tup) _l) _l)
(ft (apptst (tup _h | _r) _l) (constst _h (apptst _r _l)))
(ft (constst _h _t) `(tup _h | _t))
(ft (tst2) (solva `(apptst `(tup a b) `(tup 1 2))))

(ft (appfun (tup) _l) _l)
(ft (appfun (tup _h | _r) _l) (tup _h | (appfun _r _l)))
