;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                microCAD2NC                 ;;;
;;;               FORWARD  part                ;;;
;;;    TAXON Access and Reaoning Strategies    ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Thomas Labisch                      ;;;
;;;        Martin Harm       September 1991    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; The definition of DATA retrieves attribute values of a con[220zcept's
; insatnces from the TAXON ABox. It applies the access function TX
; with specifier INSTANCE to get all instances of the given concept
; and retrieves all the attributes for this instance.
 
(hn (data _concept _instance  _attr-terms)
    (member _instance (tx instances _concept))
    (is _attr-terms (data-attributes _instance _attr-terms))
    ;(rf-terpri)
    ;(is _dummy (rf-terpri))
    ;(rf-print "Retrieval from TAXON ABox: ")
    ;(rf-pprint `(data _concept _instance  _attr-terms))
    )
(hn (data _concept _instance  _attr-terms)
;;    (naf (member _instance (tx instances _concept)))
    (add-data _concept _instance  _attr-terms)
    (not-member _instance (tx instances _concept))
;;;    (retain `(_concept _instance  _attr-terms))
    (is _concepts (tx assert-ind? _instance _concept _attr-terms))
    (rf-terpri)
    (rf-pprint "Prooved Fact asserted into TAXON ABox:")
    (rf-pprint `(_concept _instance _attr-terms))
    )

; The function DATA-ATTRIBUTES retrieves all attribute values
; for a given instance.


(ft (data-attributes _instance (tup)))
(ft (data-attributes _instance (tup (tup _attr _val)))
    (is _val (tx attr-filler _attr _instance))
    `(tup (tup _attr _val)))
(ft (data-attributes _instance (tup (tup _attr _val) (tup _attr2 _val2) | _attr-terms))
    (is _val (tx attr-filler _attr _instance))
    (is _rest-terms (data-attributes _instance
                                     `(tup (tup _attr2 _val2) | _attr-terms)))
    `(tup (tup _attr _val) | _rest-terms))



; The initial facts of for forward reasoning must be satisfied, so that
; the can be used for proving premises of rules.
; Instead of simply testing it would be possible to assert them if
; they are not already satisfied.
(hn (satisfied (tup)))
(hn (satisfied (tup _Fact | _Rest))
    (is _CC-Fact (concept-closure _Fact))
    @_CC-Fact
    (satisfied _Rest))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    Access onto the Retain Stack            ;;;
;;;    through TAXON                           ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Thomas Labisch                      ;;;
;;;        Martin Harm       September 1991    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




; RETAIN pushes derived facts onto the retain stack such that they can be
; applied to trigger forward rules.
; The argument of RETAIN can be the conclusion of a rule, which
; has to be asserted as an instance into the TAXON ABox. Such a
; conclusion has the form:
;     (ADD-DATA (<concept-name>
;                <instance-name>
;                (tup (<attr1> <val1>)
;                     ...
;                     (<attrN> <valN>))))

(ft (retain (add-data _concept _instance-name _args))
    (not-reached `(data _concept _instance-name _args))
    (is _concepts (tx assert-ind? _instance-name _concept _args))
    (rf-terpri)
    (rf-pprint "Derived Fact asserted into TAXON ABox:")
    (rf-pprint `(_concept _instance-name _args))
    (push-fact-retain `(data _concept _instance-name _args)))
(ft (retain _Fact) (nou _Fact `(add-data _x _y _z))
                   (not-reached _Fact)
                   ;(rf-terpri)
                   ;(rf-pprint "Derived Fact:")
                   ;(rf-pprint _Fact)
                   (push-fact-retain _Fact))


; To trigger forward rules with facts, that are DATA-terms
; (i.e. instances from TAXON), the instance is realized in TAXON
; to find all concepts the instance belongs to (concept closure).
; Rules are triggered with each of these concept associations.

(hn (tx-unify _x _x))


(hn (open-node _Fact)
    (next-open-node)   ;;;;; order (next ..) (get-open ...) changed by MH 08.09
    (open-node-aux _Fact))

(hn (open-node _Fact) (not-open-node-at-end) (open-node _Fact))



(hn (open-node-aux _Fact) 
    (is _x (get-open-node))
    (tx-unify `(data _old-concept _name  _attr-terms) _x)
    (is _cc (tx concept-closure _name))	        ;;; spezial concept-closure
    (member _concept _cc)
    (is _Fact
	`(data _concept _name  _attr-terms)))
(hn (open-node-aux _Fact) 
    (is _Fact (get-open-node))
    (nou _Fact `(data _x _y _z))
    )



;;; Concept-closure .. returns all the concepts of _name 
;;;                    but some more unnessary stuff! (avoid with cut!)

(ft (concept-closure (_concept _name _attr))
					   ;; _concept must! be instantiated
    (member _name (tx instances _concept)) ;; to instantiate _name 
;;    !
    (member _all-concepts (tx concept-closure _name))
    `(data _all-concepts _name _attr))

(ft (concept-closure _anything)
    _anything)



(hn (not-reached _Conclusion)
    (is true (subsumes-value _Conclusion)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;  Predefined Strategies of FORWARD          ;;;
;;;           with TAXON access                ;;;
;;;         used in COLAB                      ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Thomas Labisch                      ;;;
;;;        Martin Harm       September 1991    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



; Depth first Search:

; (df-enum `(tup _Fact | _Rest) _Inference) enumerates all the
; consequences of a list of given facts (depth-first search).
; For a goal (df-enum _Fact _Inference) the consequences of ONE
; fact are derived.

(ft (df-enum (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (df-elist `(tup _Fact | _Rest) _Inference))
(ft (df-enum _Fact _Inference)
    (nou _Fact `(tup _y | _x))    ;;; changed to be compilable
    (fc-initialize)
    (is _CC-Fact (concept-closure _Fact))
    @_CC-Fact
    (df-one _CC-Fact _Inference))
(ft (df-enum _x _y) 
    (reset-retain) 
    unknown)

(ft (df-elist (tup _Fact | _Rest) _Inference)
    (df-one _Fact _Inference))
(ft (df-elist (tup _First | _Rest) _Inference)
    (df-elist _Rest _Inference))

(ft (df-one (add-data _old-concept _instance _attr-terms) _Inference)
    (member _concept (tx concept-closure _instance))    ;;; spezial concept-closure
    (forward `(data _concept _instance  _attr-terms) _Conclusion)
    (df-one-more _Conclusion _Inference))
(ft (df-one _Fact _Inference)
    (nou _Fact `(add-data _x _y _z))		
    (forward _Fact _Conclusion)
    (df-one-more _Conclusion _Inference))
(ft (df-one-more _Conclusion _Conclusion) _Conclusion)
(ft (df-one-more _Conclusion _Next)
    (df-one _Conclusion _Next))



; (df-all  `(tup _Fact | _Rest) _Inference) has as its value
; the list of consequences for its second argument derived
; in depth-first search.

(ft (df-all (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (df-alist `(tup _Fact | _Rest) _Inference))
(ft (df-all _Fact _Inference)
    (nou _Fact `(tup _y | _x))  ;;; changed to compilable
    (fc-initialize)
    (is _CC-Fact (concept-closure _Fact))
    @_CC-Fact
    (df-all1 _CC-Fact _Inference))
(ft (df-all _x _Inference-pattern)
    (is _Inferences (collect-facts))
    (is _Inference-list (filter _Inference-pattern _Inferences))
    _Inference-list)
(ft (df-all _x _Inference)
    (reset-retain)
    unknown
)


(ft (df-alist (tup _Fact | _Rest) _Inference)
    (df-all1 _Fact _Inference))
(ft (df-alist (tup _First | _Rest) _Inference)
    (df-alist _Rest _Inference))

(ft (df-all1 (add-data _old-concept _instance _attr-terms) _Inference)
    (member _concept (tx concept-closure _instance))
    (forward `(data _concept _instance  _attr-terms) _Conclusion)
    (df-all1 _Conclusion _Inference))
(ft (df-all1 _Fact _Inference)
    (nou _Fact `(add-data _x _y _z))
    (forward _Fact _Conclusion)
    (df-all1 _Conclusion _Inference))

; Breadth-first Search:
;
; (df-enum `(tup _Fact | _Rest) _Inference) enumerates all the
; consequences of a list of given facts (depth-first search).
; For a goal (df-enum _Fact _Inference) the consequences of ONE
; fact are derived.

(ft (bf-enum (tup _Fact | _Rest) _Inference)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (bf-elist `(tup _Fact | _Rest) _Inference))
(ft (bf-enum _Fact _Inference)
    (nou _Fact `(tup _y | _x))   ;;;; changed to be comilable
    (fc-initialize)
    (is _CC-Fact (concept-closure _Fact))
    @_CC-Fact
    (forward _CC-Fact _Inference)
    _Inference)
(ft (bf-enum _Fact _Inference) 
    (forward-one _Inference))
(ft (bf-enum _x _y) (reset-retain) unknown)

(ft (bf-elist (tup _Fact | _Rest) _Inference)
    (is _CC-Fact (concept-closure _Fact))
    (forward _CC-Fact _Inference)
    _Inference)
(ft (bf-elist (tup _First | _Rest) _Inference)
    (bf-elist _Rest _Inference))
(ft (bf-elist (tup) _Inference)
    (forward-one _Inference))

(ft (forward-one _Inference)
    (open-node _Fact)
    (forward _Fact _Inference)
    _Inference)


; (bf-all  `(tup _Fact | _Rest) _Inference) has as its value
; the list of consequences for its second argument derived
; in depth-first search.

(ft (bf-all (tup _Fact | _Rest) _Inference-pattern)
    (fc-initialize)
    (satisfied `(tup _Fact | _Rest))
    (bf-alist `(tup _Fact | _Rest) _Inference-pattern))
(ft (bf-all _Fact _Inference-pattern)
    (nou _Fact `(tup _y | _x))    ;;;; changed to be comilable
    (fc-initialize)
    @_Fact
    (forward _Fact _Conclusion)
    unknown)
(ft (bf-all _Fact _Inference-pattern)
    (forward-all)
    (is _Inferences (collect-facts))
    (is _Inference-list (filter _Inference-pattern _Inferences))
    (reset-retain)
    _Inference-list)

(ft (bf-alist (tup _Fact | _Rest) _Inference-pattern)
    (forward _Fact _Inference)
    unkown)
(ft (bf-alist (tup _Fact | _Rest) _Inference-pattern)
    (bf-alist _Rest _Inference-pattern))

(ft (forward-all)
    (open-node _Fact)
    (forward _Fact _Conclusion)
    unknown)
(ft (forward-all)
     true)











