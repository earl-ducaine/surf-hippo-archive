;;; -*- Mode: LISP -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;                microCAD2NC                 ;;;
;;;               FORWARD  part                ;;;
;;;         Feature Aggregation Rules          ;;;
;;;    (c) Knut Hinkelmann                     ;;;
;;;        Martin Harm       September 1991    ;;;
;;;                                            ;;;
;;;                 DecPlan                    ;;;
;;;               FORWARD  part                ;;;
;;;         New Aggregation Rules for          ;;;
;;;         longturningsurface and sub-lts     ;;;
;;;    (c) Thomas Labisch    September 1992    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Features derived by these rules are asserted into the ABox
; of TAXON. Attributes common to all features are the
; leftmost and rightmost surface the feature is covering.
; This is necessary to chaeck neighbarhood of surfaces and features.


; A shoulder is a feature consisting of two components:
; The ground is a longturning surface.
; The flank is either a descending surface (on the left)
; or an ascending surface (on the right) of the longturning
; surface. An additional condition is that the radius of the
; longturning surface is not greater than that of the
; descending or ascending surface, respectively.
;
; Examples:
;                         |         \
;                         |   or     \
;       __________________|           \________________
;
(rl (lts+tc _featid (tup (tup ground _ltsid)
			   (tup flank _id2)
			   (tup leftmost _l)
			   (tup rightmost _id2)))
    (truncone _id2  `(tup (tup center1 _zl)
			(tup center2 _zr)
			(tup radius1 _rad)
			(tup radius2 _rado)))
    (neighbor _r _id2 )
    (longturningsurface _ltsid
			`(tup (tup radius _rad-lts)
			      (tup leftmost _l)
			      (tup rightmost _r)
			      (tup sof _seq-of-feat)))
    (is _featid (make-instance-name lts+tc _ltsid _id2)))



(rl (tc+lts _featid (tup (tup ground _ltsid)
			   (tup flank _id2)
			   (tup leftmost _id2)
			   (tup rightmost _r)))
    (truncone _id2 `(tup (tup center1 _zl)
			(tup center2 _zl)
			(tup radius1 _rado)
			(tup radius2 _rad)))
    (neighbor _id2 _l)
    (longturningsurface  _ltsid `(tup (tup radius _rad-lts)
				      (tup leftmost _l)
				      (tup rightmost _r)
				      (tup sof _seq-of-feat)))
    (is _featid (make-instance-name tc+lts _id2 _ltsid) ))



; A groove is an aggregation of two shoulder:
; a left shoulder and a right shoulder with common ground:
;
;          |                          /
;          |                         /
;          |________________________/
;
(rl (tc+lts+tc _featid (tup (tup left _lshid)
			 (tup right _rshid)
			 (tup leftmost _id1)
			 (tup rightmost _id3)))
    (rshoulder _rshid `(tup (tup ground _id2)
			    (tup flank _id3)
			    (tup leftmost _rsleft)
			    (tup rightmost _rsright)))
    (lshoulder _lshid `(tup (tup ground _id2)
			    (tup flank _id1)
			    (tup leftmost _lsleft)
			    (tup rightmost _lsright)))
    (is _featid (make-instance-name tc+lts+tc _id1 _id2 _id3)))



; A hill is an aggregation of two noses:
; a left nose and a right nose with common lonturningsurface.
; The workpiece is a hill, where both truncones are circles.
;
;           ________________________
;          |                        |
;          |                        |
;          |                        |
;
(rl (tc+lts+tc _featid (tup (tup left _lnid)
			 (tup right _rnid)
			 (tup leftmost _id1)
			 (tup rightmost _id3)))
    (rnose _rnid `(tup (tup ground _id2)
			    (tup flank _id3)
			    (tup leftmost _rsleft)
			    (tup rightmost _rsright)))
    (lnose _lnid `(tup (tup ground _id2)
			    (tup flank _id1)
			    (tup leftmost _lsleft)
			    (tup rightmost _lsright)))
    (is _featid (make-instance-name tc+lts+tc _id1 _id2 _id3)))




;
; Each cylinder is a lts.
;
(rl (longturningsurface _featid (tup (tup radius _rad)
				  (tup leftmost _cyl)
				  (tup rightmost _cyl)
				  (tup sof (tup _cyl))))
    (cylinder _cyl `(tup (tup center1 _zl)
			 (tup center2 _zr)
			 (tup radius1 _rad)
			 (tup radius2 _rad)))
    (is _featid (make-instance-name lts _cyl)))


 
; A longturningsurface is a lshoulder at the right end of the workpiece
; followed by a sub-lts, which is not as high as the folowing desc-tc.
;
; \__________.........
;           |
;           |________
;                    |
;                    |
; ----------------------------- 0
;
(rl (longturningsurface _featid (tup (tup radius _rad)
				     (tup leftmost _leftm)
				     (tup rightmost _right)
				     (tup sof _seq-of-feat)))
    (circle _rightm `(tup (tup center1 _z)
			  (tup center2 _z)
			  (tup radius1 _rad-lim)
			  (tup radius2 0)))
    (neighbor _right _rightm)
    (lshoulder _lshid `(tup (tup ground _ground)
			    (tup flank _flank)
			    (tup leftmost _lsleft)
			    (tup rightmost _right)))
    (sub-lts _desc-tc _lsleft _rad _slsof)
    (desc-tc _desc-tc `(tup (tup center1 _zl)
			    (tup center2 _zr)
			    (tup radius1 _rad1)
			    (tup radius2 _rad2)))
    (neighbor _desc-tc _leftm)
    (> _rad1 _rad)
    (append _slsof `(tup _lshid) _seq-of-feat)
    (is _featid (make-instance-name lts _leftm _rightm)))



; A longturningsurface is a rshoulder at the left end of the workpiece
; followed by a sub-lts, which is not as high as the folowing asc-tc.
;
;  .........__________/
;           |
;  _________|
;  |
;  |
; ----------------------------- 0
;
(rl (longturningsurface _featid (tup (tup radius _rad)
				     (tup leftmost _left)
				     (tup rightmost _rightm)
				     (tup sof (tup _rshid | _seq-of-feat))))
    (circle _leftm `(tup (tup center1 _z)
			 (tup center2 _z)
			 (tup radius1 0)
			 (tup radius2 _rad-lim)))
    (neighbor _leftm _left)
    (rshoulder _rshid `(tup (tup ground _ground)
			    (tup flank _flank)
			    (tup leftmost _left)
			    (tup rightmost _right)))
    (sub-lts _right _asc-tc _rad _seq-of-feat)
    (asc-tc _asc-tc `(tup (tup center1 _zl)
			  (tup center2 _zr)
			  (tup radius1 _rad1)
			  (tup radius2 _rad2)))
    (neighbor _rightm _asc-tc)
    (> _rad2 _rad)
    (is _featid (make-instance-name lts _leftm _rightm)))



;
;   |__...____
;     |___|  |
;            |
; ----------------------------- 0
;
(rl (longturningsurface _featid (tup (tup radius _rad-max)
				     (tup leftmost _leftm)
				     (tup rightmost _rightm)
				     (tup sof _seq-of-feat)))
    (circle _right `(tup (tup center1 _z)
			 (tup center2 _z)
			 (tup radius1 _radc)
			 (tup radius2 0)))
    (desc-tc _left `(tup (tup center1 _zl)
			 (tup center2 _zr)
			 (tup radius1 _rad1)
			 (tup radius2 _rad2)))
    (different _right _left)
    (> _rad1 _radc)
    (neighbor _rightm _right)
    (neighbor _left _leftm)
    (different _rightm _leftm)
    (sub-lts _left _right _rad-max _seq-of-feat)
    (>= _rad-max _radc)
    (> _rad1 _rad-max)
    (is _featid (make-instance-name lts _leftm _right)))


;
;  ___...___|
;  | |___|
;  |      
; ----------------------------- 0
;
(rl (longturningsurface _featid (tup (tup radius _rad-max)
				     (tup leftmost _leftm)
				     (tup rightmost _rightm)
				     (tup sof _seq-of-feat)))
    
    (circle _left `(tup (tup center1 _z)
			(tup center2 _z)
			(tup radius1 0)
			(tup radius2 _radc)))
    (asc-tc _right `(tup (tup center1 _zl)
			 (tup center2 _zr)
			 (tup radius1 _rad1)
			 (tup radius2 _rad2)))
    (different _leftm _right)
    (> _rad2 _radc)
    (neighbor _left _leftm)
    (neighbor _rightm _right)
    (different _leftm _rightm)
    (sub-lts _left _right _rad-max _seq-of-feat)
    (>= _rad-max _radc)
    (< _rad-max _rad2)
    (is _featid (make-instance-name lts _left _rightm)))


;
; \                      
;  \                /
;   \              /
;    \____________/
;
(rl (longturningsurface _featid (tup (tup radius _rad-max)
				     (tup leftmost _leftm)
				     (tup rightmost _rightm)
				     (tup sof _seq-of-feat)))
    (desc-tc _desc-tc `(tup (tup center1 _dzl)
			    (tup center2 _dzr)
			    (tup radius1 _drad1)
			    (tup radius2 _drad2)))
    (asc-tc _asc-tc `(tup (tup center1 _azl)
			  (tup center2 _azr)
			  (tup radius1 _arad1)
			  (tup radius2 _arad2)))
    (different _arad2 _drad1)
    (> _azl _dzr)
    (< _drad2 _arad2)
    (> _drad1 _arad1)
    (neighbor _desc-tc _leftm)
    (neighbor _rightm _asc-tc)
    (different _leftm _rightm)
    (sub-lts _desc-tc _asc-tc _rad-max _seq-of-feat)
    (< _rad-max (max _drad1 _arad2))
    (is _featid (make-instance-name lts _leftm _rightm)))



; A sub-lts contains a groove followed by a sub-lts.
;                               
;          |     __________
;          |     |
;          |_____|
;
(rl (sub-lts _left _right _rad-max (tup _grv | _seq-of-feat))
    (groove _grv `(tup (tup left _lshid)
		       (tup right _rshid)
		       (tup leftmost _left)
		       (tup rightmost _r)))
    (sub-lts _r _right _rad-max _seq-of-feat))



; A sub-lts contains a sub-lts followed by a groove.
;                              
;          __________     |
;                   |     |
;                   |_____|
;
(rl (sub-lts _left _right _rad-max _seq-of-feat)
    (sub-lts _left _r _rad-max _sseq-of-feat)
    (groove _grv `(tup (tup left _lshid)
		       (tup right _rshid)
		       (tup leftmost _r)
		       (tup rightmost _right)))
    (append _sseq-of-feat `(tup _grv) _seq-of-feat))



; A sub-lts contains a sub-lts followed by a groove and a sub-lts.
;                              
;          __________     __________
;                   |     |
;                   |_____|
;
(rl (sub-lts _left _right _rad-max _seq-of-feat)
    (sub-lts _left _l _rad-max _seq-of-feat1)
    (groove _grv `(tup (tup left _lshid)
		       (tup right _rshid)
		       (tup leftmost _l)
		       (tup rightmost _r)))
    (sub-lts _r _right _rad-max _seq-of-feat2)
    (append _seq-of-feat1 `(tup _grv | _seq-of-feat2) _seq-of-feat))



; Each cylinder is a sub-lts.
;
(rl (sub-lts _left _right _rad-max (tup _cyl))
    (neighbor _left _cyl)
    (cylinder _cyl `(tup (tup center1 _zl)
			 (tup center2 _zr)
			 (tup radius1 _rad-max)
			 (tup radius2 _rad-max)))
    (neighbor _cyl _right))



; A is a longtuningsurface is a sub-lts with a rshoulder reaching to the left
; end of the workpiece and a lshouder reaching to the right end of the
; workpiece as neighbors.
;
;           ..........____________..........
;                     |          |
;           __________|          |__________
;           |                              |
;           |                              |
;   0  ---------------------------------------------
;
(rl (longturningsurface _featid (tup (tup radius _rad-max)
				     (tup leftmost _left)
				     (tup rightmost _right)
				     (tup sof _seq-of-feat)))
    (circle _leftm `(tup (tup center1 _z1)
			 (tup center2 _z1)
			 (tup radius1 0)
			 (tup radius2 _radb)))
    (neighbor _leftm _left)
    (rshoulder _rshid `(tup (tup ground _rs-ground)
			    (tup flank _rsflank)
			    (tup leftmost _left)
			    (tup rightmost _rsright)))
    (asc-tc _rsright `(tup (tup center1 _azl)
			   (tup center2 _azr)
			   (tup radius1 _arada)
			   (tup radius2 _rad-max)))
    (sub-lts _rsright _lsleft _rad-max _slsof)
    (desc-tc _lsleft `(tup (tup center1 _dzl)
			   (tup center2 _dzr)
			   (tup radius1 _rad-max)
			   (tup radius2 _dradb)))
    (lshoulder _lshid `(tup (tup ground _lsground)
			    (tup flank _lsflank)
			    (tup leftmost _lsleft)
			    (tup rightmost _right)))
    (neighbor _right _rightm)
    (circle _rightm `(tup (tup center1 _z2)
			  (tup center2 _z2)
			  (tup radius1 _rade)
			  (tup radius2 0)))
    (append `(tup _rshid | _slsof) `(tup _lshid) _seq-of-feat)
    (is _featid (make-instance-name lts _leftm _rightm)))



(hn (different _tc1 _tc2)
    (nou _tc1 _tc2))



(hn (append (tup) _l _l))
(hn (append (tup _first | _rest) _l (tup _first | _rem))
    (append _rest _l _rem))
