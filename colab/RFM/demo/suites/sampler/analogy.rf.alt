;             A relational/functional analogy finder
;              H. Boley, P. Hanschke, R. Scheubrein        21 Feb 1991

; This program is adapted from Sterling, Shapiro "The Art of Prolog", page 230.
; "analogy" tries to find an analogy between two pairs of figures
;    1. find a rule named _rule to relate figure _a to figure _b
;    2. apply _rule to figure _c to generate new figure _x
;    3. see if _x is in the list of possible _answers
;    4. return result _x

;;; main procedures ------------------------------------------------
(ft (analogy _a _b _c _answers)
    (_rule _a is-to _b)                ; _rule is a free relational variable
    as                  ; redundant
    (_rule _c is-to _x)                ; _rule is bound to the relation found
    (member-r _x _answers)
    _x)

(hn (inside-out  (within _figure1 _figure2)
                 is-to
                 (within _figure2 _figure1)))
(hn (upside-down (above  _figure1 _figure2)
                 is-to
                 (above  _figure2 _figure1)))
(hn (inside-down (within _figure1 _figure2)
                 is-to
                 (above  _figure2 _figure1)))

(hn !(member-r _x (tup _x | _tail)))
(hn (member-r _x (tup _head | _tail))
    (member-r _x _tail))

;;; testing --------------------------------------------------------
(ft (test-analogy _name)
    (figures _name _a _b _c)               ; binds a,b,c
    (answers _name _answers)               ; binds answers
    (analogy _a _b _c _answers))           ; calls program

(ft (pattern-analogy _myfig _yourfig)      ; classical analogy problem
    (analogy `(above square _myfig)        ; a:b = c:x with variables
             `(above _myfig square)        ; IN a,b (_myfig), and c,x
             `(above circle _yourfig)      ; (_yourfig). The id permits
             id))                          ; arbitrary x answers

;;; data ----------------------------------------------------------
(hn (figures test1
          (within square triangle)         ; figure a
          (within triangle square)         ; figure b
          (within circle square)))         ; figure c

(hn (answers test1
      (tup (within circle triangle)        ; list of possible
           (within square circle)          ; answers
           (within triangle square))))

;;; sample calls --------------------------------------------------
;
;    rfi> consult "analogy"
;
;    rfi> (test-analogy test1)
;    (within square circle)
;
;    rfi> (pattern-analogy _myfig _yourfig)
;    (above _figure2:4 circle)
;    (myfig = _figure2:3)
;    (yourfig = _figure2:4)
;
;    rfi> (analogy `(within jonas fish) `(above fish jonas) `(within martian ufo) id)
;    (above ufo martian)
