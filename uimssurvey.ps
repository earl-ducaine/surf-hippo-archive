%!PS-Adobe-2.0
%%Title: uimstochi.mss
%%DocumentFonts: (atend)
%%Creator: Brad Myers and Scribe 7(1700)
%%CreationDate: 2 August 1994 17:17
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {showpage SV restore} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq 
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT neg sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def newpath 3 -1 roll sub translate
    100.0 -100.0 scale /showpage {} def} bind def
/PE {PV restore} bind def
/GB {/PV save def newpath translate rotate
    div dup scale 100.0 -100.0 scale
    /showpage {} def
    /letter {} def
    /lettersmall {} def
    /note {} def
    } bind def
/GE {PV restore} bind def
/FB {dict dup /FontMapDict exch def begin} bind def
/FM {cvn exch cvn exch def} bind def
/FE {end /original-findfont /findfont load def  /findfont
   {dup FontMapDict exch known{FontMapDict exch get} if
   original-findfont} def} bind def
/BC {gsave moveto dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto closepath clip} bind def
/EC /grestore load def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
/RC {100.0 -100.0 scale
612.0 0.0 translate
-90.0 rotate
.01 -.01 scale} bind def
/URC {100.0 -100.0 scale
90.0 rotate
-612.0 0.0 translate
.01 -.01 scale} bind def
/RCC {100.0 -100.0 scale
0.0 -792.0 translate 90.0 rotate
.01 -.01 scale} bind def
/URCC {100.0 -100.0 scale
-90.0 rotate 0.0 792.0 translate
.01 -.01 scale} bind def


% Scribe Systems version of LaserPrep v5.2
% All lines added/changed by Scribe Systems contain "%UNI"
%
%{appledict version #65
% CopyRight Apple Computer, Inc. 1984,1985,1986,1987 All Rights Reserved.
systemdict/currentpacking known{currentpacking true setpacking}if
/LW{save statusdict/product get(LaserWriter)anchorsearch
exch pop{length 0 eq{1}{2}ifelse}{0}ifelse exch restore}bind def
/LW+{LW 2 eq}bind def
/ok{systemdict/statusdict known dup{LW 0 gt and}if}bind def
%UNI ok{statusdict begin 9 sccinteractive 3 ne exch 0 ne or{9 0 3 setsccinteractive}if end}if
/md 250 dict def md begin
/av 65 def
/T true def
/F false def
/mtx matrix def
/s75 75 string def
/s8 8 string def
/s1 ( ) def
/pxs 1 def
/pys 1 def
1 0 mtx defaultmatrix dtransform exch atan/pa exch def
/nlw .24 def
/ppr [-32 -29.52 762 582.48] def  % default printable page rectangle
/pgs 1 def
/por true def
/xb 500 array def
/so true def
/fillflag false def
/pnm 1 def
/fmv true def
/sfl false def
/ma 0 def
/invertflag false def
/xflip false def
/yflip false def
/noflips true def
/scaleby96 false def
/fNote true def
/fBitStretch true def
/fg (Rvd\001\001\000\000\177) def
/bdf{bind def}bind def
/xdf{exch def}bdf
/xl{neg exch neg translate}bdf
/fp{pnsh 0 ne pnsv 0 ne and}bdf
/nop{}bdf/lnop[/nop load]cvx bdf
/vrb[
{fp{gsave 1 setlinewidth pnsh pnsv scale stroke grestore}if newpath}bind
/eofill load
dup
/newpath load
2 index
dup
{clip newpath}bind
{}bind
dup
2 copy
]def
currentscreen/spf xdf/rot xdf/freq xdf
/doop{vrb exch get exec}bdf

% psu - page setup called at begining of page
% args: smooth, por, bbs1, bbs2, bbey, bbex, scale, dpix, dpiy, pgs,
%       invert, xflip, yflip, scaleby96, fBitStretch, fNote
%
%       smooth is T if smoothing was selected in page setup, else F
%       por is T for portrait orientation, F for landscape
%       bbs2 seems to be offset for start of image area (in 72nds of an inch)
%       bbs1 seems to be offset for start of image area (in 72nds of an inch)
%       bbey is length (or end?) of printable area in 72nd of an inch
%       bbex is width (or end?) of printable area in 72nd of an inch
%       dpix is dots per inch of coordinate system
%       dpiy is dots per inch of coordinate system
%       scale is scale factor selected in page setup
%       pgs is a small integer denoting paper cassette type (legal, a4, etc.)
%       invert is T to reverse black/white
%       xflip is T to rotate image horizontally
%       yflip is T to rotate image vertically
%       scaleby96 is T if "Precision Bitmap Graphics" requested
%       fBitStretch is T if "Faster Bitmap Printing" requested
%       fNote is T to use small imageable region, F to use large
/psu{ pop
        /fNote xdf
        /fBitStretch xdf
        /scaleby96 xdf
        pop F   %UNI force yflip off
        /yflip xdf
        pop F   %UNI force xflip off
        /xflip xdf
        pop F   %UNI force black/white reversing off
        /invertflag xdf
        xflip yflip or{/noflips false def}if
        /pgs xdf                        % set pgs
        2 index                         % get copy of scale
        .72 mul exch div /pys xdf       % pys = (.72 * scale) / dpiy
        % S: smooth por bbs1 bbs2 bbey bbex scale dpix
        div .72 mul /pxs xdf            % pxs = .72 * (scale / dpix)
        2 index pxs mul 4 index pys mul neg translate %UNI xlate for scribe
        ppr astore pop                  % put "bbs1 bbs2 bbey bbex" into ppr
        pop T   %UNI force portrait on
        /por xdf                        % set por
        pop F   %UNI force smooth request off
        sn and /so xdf          % set "so" T if smooth req'd AND avail in LW
}bdf

/txpose{
%UNI don't change paper type
%UNI    fNote{smalls}{bigs}ifelse pgs get exec
        pxs pys scale
        ppr aload pop
        por
            {
                noflips{pop exch neg exch translate pop 1 -1 scale}if
                xflip yflip and{
                        pop exch neg exch translate
                        180 rotate
                        1 -1 scale
                        ppr 3 get
                        ppr 1 get neg sub neg
                        ppr 2 get
                        ppr 0 get neg sub neg
                        translate
                }if 
                xflip yflip not and{
                        pop exch neg exch translate pop
                        180 rotate
                        ppr 3 get
                        ppr 1 get neg sub neg 0
                        translate
                }if
                yflip xflip not and{
                        ppr 1 get neg
                        ppr 0 get neg
                        translate
                }if
            }
            {
                noflips{translate pop pop 270 rotate 1 -1 scale}if
                xflip yflip and{
                        translate pop pop
                        90 rotate
                        1 -1 scale
                        ppr 3 get
                        ppr 1 get neg sub neg
                        ppr 2 get
                        ppr 0 get neg sub neg
                        translate
                }if
                xflip yflip not and{
                        translate
                        pop pop 90 rotate
                        ppr 3 get
                        ppr 1 get neg sub neg 0
                        translate
                }if
                yflip xflip not and{
                        translate
                        pop pop 270 rotate
                        ppr 2 get
                        ppr 0 get neg sub neg 0 exch
                        translate
                }if
            }
        ifelse
        %UNI statusdict begin waittimeout 300 lt{/waittimeout 300 def}if end
        scaleby96{
                ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy
                translate
                .96 dup scale
                neg exch neg exch translate
        }if
}bdf

/fr{3 index 3 index xl ppr aload pop 3 -1 roll 2 mul add 3 1 roll exch 2 mul add
6 2 roll 3 -1 roll sub 3 1 roll exch sub 3 1 roll exch 3 -1 roll div 3 1 roll div exch scale}bdf
/lws{show}bdf
/tv{show pop pop}bdf
/obl{{0.212557 mul}{pop 0}ifelse}bdf
/sfd{ps fg 5 -1 roll get mul 100 div 0 ps 5 -1 roll obl ps neg 0 0 6a astore makefont setfont}bdf
/fnt{findfont sfd}bdf
/bt{sa 3 1 roll 3 index and put}bdf
/sa(\000\000\000\000\000\000\000\000\000\000)def
/fs{0 1 bt 1 2 bt 2 4 bt 3 8 bt 4 16 bt 5 32 bt 6 64 bt 7 128 bt sa exch 8 exch put}bdf
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/bu{currentpoint currentgray currentlinewidth currentlinecap currentlinejoin currentdash exch aload length
fg 5 sfl{1}{0}ifelse put pnsv pnsh
2t aload pop 3a aload pop mx2 aload pop mx1 aload pop mtx currentmatrix aload pop
mx3 aload pop ps pm restore/ps xdf mx3 astore pop}bdf
/bn{/pm save def mx3 setmatrix newpath 0 0 moveto ct dup 39 get 0 exch getinterval cvx exec
mtx astore setmatrix mx1 astore pop mx2 astore pop 3a astore pop
2t astore pop/pnsh xdf/pnsv xdf gw
/sfl fg 5 get 0 ne def array astore exch setdash setlinejoin setlinecap
setlinewidth setgray moveto}bdf
/fc{save vmstatus exch sub 50000 lt
{(%%[|0|]%%)=print flush}if pop restore}bdf
/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}bdf
/3a [0 0 0] def
/2t 2 array def
/tp{3a astore pop}bdf
/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy translate 3a aload pop exch dup 0 eq
{pop}{1 eq{-1 1}{1 -1}ifelse scale}ifelse rotate pop neg exch neg exch translate moveto}bdf
/te{mx2 setmatrix}bdf
/th{3 -1 roll div 3 1 roll exch div 2 copy mx1 scale pop scale/sfl true def}bdf
/tu{1 1 mx1 itransform scale/sfl false def}bdf
/ts{1 1 mx1 transform scale/sfl true def}bdf
/fz{/ps xdf}bdf
/dv{dup 0 ne{div}{pop}ifelse}bdf
/pop4{pop pop pop pop}bdf
/it{sfl{mx1 itransform}if}bdf
/gm{exch it moveto}bdf/rm{it rmoveto}bdf
/lm{currentpoint sfl{mx1 transform}if exch pop sub 0 exch it rmoveto}bdf
/fm{statusdict/manualfeed known}bdf
/se{statusdict exch/manualfeed exch put}bdf
/mf{
pop     %UNI never allow manual feed
%UNI dup/ma exch def 0 gt{fm se/t1 5 st ok ma 1 gt and{/t2 0 st/t3 0 st statusdict/manualfeedtimeout 3600 put}if}if
}bdf
/jn{
pop     %UNI don't set job name
%UNI /statusdict where exch pop{statusdict exch/jobname exch put}if
}bdf
/pen{pnm mul/pnsh xdf pnm mul/pnsv xdf pnsh setlinewidth}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/dh{fg 6 1 put array astore exch pop exch pop exch setdash}bdf
/ih[currentdash]def
/rh{fg 6 0 put ih aload pop setdash}bdf
/dl{gsave nlw pys div setlinewidth 0 setgray}bdf
/dlin{exch currentpoint currentlinewidth 2 div dup
translate newpath moveto lineto currentpoint stroke grestore moveto}bdf
/lin{fg 6 get 0 ne{exch lineto currentpoint 0 doop moveto}
{exch currentpoint/pnlv xdf/pnlh xdf gsave newpath/@1 xdf/@2 xdf fp{pnlh @2 lt{pnlv @1 ge
{pnlh pnlv moveto @2 @1 lineto pnsh 0 rlineto
0 pnsv rlineto pnlh pnsh add pnlv pnsv add lineto pnsh neg 0 rlineto}
{pnlh pnlv moveto pnsh 0 rlineto @2 pnsh add @1 lineto 0 pnsv rlineto
pnsh neg 0 rlineto pnlh pnlv pnsv add lineto}ifelse}{pnlv @1 gt
{@2 @1 moveto pnsh 0 rlineto pnlh pnsh add pnlv lineto 0 pnsv rlineto
pnsh neg 0 rlineto @2 @1 pnsv add lineto}{pnlh pnlv moveto pnsh 0 rlineto
0 pnsv rlineto @2 pnsh add @1 pnsv add lineto pnsh neg 0 rlineto
0 pnsv neg rlineto}ifelse}ifelse
closepath fill}if @2 @1 grestore moveto}ifelse}bdf
/gw{/pnm fg 3 get fg 4 get div def}bdf
/lw{fg exch 4 exch put fg exch 3 exch put gw pnsv pnsh pen}bdf
/barc{/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf
/@6 xdf/@7 xdf/@8 xdf gsave
@5 @7 add 2 div @6 @8 add 2 div translate newpath 0 0 moveto
@5 @7 sub @6 @8 sub mtx currentmatrix pop scale @1{newpath}if
0 0 0.5 @4 @3 arc @4 @3 sub abs 360 ge{closepath}if
mtx setmatrix @2 doop grestore}bdf
/ar{dup 0 eq barc}bdf
/ov{0 exch 360 exch true barc}bdf
/rc{/@t xdf currentpoint 6 2 roll newpath 4 copy 4 2 roll exch moveto
6 -1 roll lineto lineto lineto closepath @t doop moveto}bdf
/mup{dup pnsh 2 div le exch pnsv 2 div le or}bdf
/rr{/@1 xdf 2. div/@2 xdf 2. div/@3 xdf
/@4 xdf/@5 xdf/@6 xdf/@7 xdf
@7 @5 eq @6 @4 eq @2 mup or or{@7 @6 @5 @4 @1 rc}
{@4 @6 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@5 @7 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@1 0 eq{/@2 @2 pnsh 2 div 2 copy gt{sub def}{0 pop4}ifelse}if
currentpoint newpath
@4 @6 add 2. div @7 moveto
@4 @7 @4 @5 @2 arcto pop4
@4 @5 @6 @5 @2 arcto pop4
@6 @5 @6 @7 @2 arcto pop4
@6 @7 @4 @7 @2 arcto pop4
closepath @1 doop moveto}ifelse}bdf
/pr{gsave newpath/pl{exch moveto/pl{exch lineto}def}def}bdf
/pl{exch lineto}bdf
/ep{dup 0 eq{{moveto}{exch lin}{}{(%%[|1|]%%)= flush}pathforall
pop grestore}{doop grestore}ifelse currentpoint newpath moveto}bdf
/gr{64. div setgray}bdf
/pat{s8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi s8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}setscreen gr}bdf
/sg{freq rot/spf load setscreen gr}bdf
/dc{transform round .5 sub exch round .5 sub exch itransform}bdf
/sn{userdict/smooth4 known}bdf
/x8{3 bitshift}bdf
/x4{2 bitshift}bdf
/d4{-2 bitshift}bdf
/d8{-3 bitshift}bdf
/rb{15 add -4 bitshift 1 bitshift}bdf
/db{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf/@6 @5 @3 4 add mul def
dc translate scale/xdbit 1 1 idtransform abs/ydbit exch def abs def{0 0 1 ydbit add 1 10 rc clip}if
@1 0 eq @1 4 eq or{1 setgray ydbit 0 1 ydbit add 1 2 rc}if
@1 3 eq @1 7 eq or{1}{0}ifelse setgray/@9 @1 0 eq @1 1 eq @1 3 eq or or invertflag xor def/@13 @6 def
@2 fBitStretch or{/@10 @4 x4 def/@11 @3 x4 def/@12 @10 rb def/@13 @12 @11 mul def/@15 1 1 dtransform abs/calcY 1 index def round cvi/@14 exch def
abs/calcX 1 index def round cvi scaleby96 not{1 add}if def/@16 @15 rb def/@17 @16 @14 mul def}if
sn @13 60000 lt and @2 fBitStretch or and{mtx currentmatrix dup 1 get exch 2 get 0. eq exch 0. eq and @17 60000 lt and fBitStretch and{@16 3 bitshift @14 @9 [calcX 0 0 calcY 0 0]{@17 string @13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4
@10 @11 @12 dup string 5 index @15 @14 @16 dup string stretch}imagemask}{@12 x8 @11 @9 [@10 0 0 @11 0 0]{@13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4}imagemask}ifelse}{@5 3 bitshift @3 4 add @9 [@4 0 0 @3 0 2]{currentfile @6 string readhexstring pop}imagemask}ifelse
@7 restore}bdf
/wd 16 dict def
/mfont 14 dict def
/mdf{mfont wcheck not{/mfont 14 dict def}if mfont begin xdf end}bdf
/cf{{1 index/FID ne{def}{pop pop}ifelse}forall}bdf
/rf{/@1 exch def/@2 exch def
FontDirectory @2 known{cleartomark pop}{findfont dup begin dup length @1 add dict begin
cf {/Encoding macvec def}{Encoding dup length array copy/Encoding exch def
counttomark 2 idiv{Encoding 3 1 roll put}repeat}ifelse
pop
exec currentdict end end @2 exch definefont pop}ifelse}bdf
/bmbc{exch begin wd begin
/cr xdf
save
CharTable cr 6 mul 6 getinterval{}forall
/bitheight xdf/bitwidth xdf
.96 div/width xdf
Gkernmax add/XOffset xdf Gdescent add/YOffset xdf/rowbytes xdf
rowbytes 255 eq{0 0 0 0 0 0 setcachedevice}
{Gnormsize dup scale
width 0 XOffset YOffset bitwidth XOffset add bitheight YOffset add
setcachedevice
rowbytes 0 ne{
XOffset YOffset translate newpath 0 0 moveto
bitwidth bitheight scale
sn{
/xSmt bitwidth x4 def
/ySmt bitheight x4 def
/rSmt xSmt rb def
rSmt x8 ySmt true
[xSmt 0 0 ySmt neg 0 ySmt]
{rSmt ySmt mul string CharData cr get
1 index bitwidth bitheight rowbytes rSmt so smooth4}
}{rowbytes 3 bitshift bitheight 4 add true
[bitwidth 0 0 bitheight neg 0 bitheight 2 add]
{CharData cr get}
}ifelse
imagemask
}if
}ifelse
restore
end end
}bdf
/bb{.96 exch div/Gnormsize mdf 2 index
/Gkernmax mdf 1 index/Gdescent mdf
3 index div 4 1 roll
2 index div 1. 5 2 roll
exch div 4 1 roll
4 array astore/FontBBox mdf
}bdf
/cdf{mfont/CharData get 3 1 roll put}bdf
/bf{
mfont begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/Encoding macvec def
/BuildChar/bmbc load def
end
mfont definefont pop
}bdf
/wi LW 1 eq{{gsave 0 0 0 0 0 0 0 0 moveto lineto lineto lineto closepath clip stringwidth grestore}bind}{/stringwidth load}ifelse def
/aps{0 get 124 eq}bdf
/xc{s75 cvs dup}bdf
/xp{put cvn}bdf
/scs{xc 3 67 put dup 0 95 xp}bdf
/sos{xc 3 79 xp}bdf
/sbs{xc 1 66 xp}bdf
/sis{xc 2 73 xp}bdf
/sob{xc 2 79 xp}bdf
/sss{xc 4 83 xp}bdf
/dd{exch 1 index add 3 1 roll add exch}bdf
/smc{moveto dup lws}bdf
/kwn{FontDirectory 1 index known{findfont exch pop}}bdf
/gl{1 currentgray sub setgray}bdf
/mm{/mfont 10 dict def mfont begin
/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def
/Encoding macvec def
/df 4 index findfont def
/FontBBox [0 0 1 1] def
/xda xdf/mbc xdf
/BuildChar{wd begin/cr xdf/fd xdf/cs s1 dup 0 cr put def fd/mbc get exec end}def
exec end mfont definefont}bdf
/ac{dup scs kwn{exch findfont dup length 1 add dict begin
cf fmv{/Encoding macvec def}if/StrokeWidth nlw 1000 mul pys div ps div dup 12 lt{pop 12}if def
/PaintType 2 def currentdict /UniqueID known{/UniqueID UniqueID 16#A80000 xor def}if currentdict end definefont}ifelse}bdf
/mb{dup sbs kwn{exch{pop}{bbc}{}mm}ifelse sfd}bdf
/mo{dup sos kwn{exch{pop}{boc}{}mm}ifelse sfd}bdf
/ms{dup sss kwn{exch{pop}{bsc}{}mm}ifelse sfd}bdf
/ou{dup sos kwn{exch dup ac pop{scs findfont /df2 xdf}{aoc}{}mm}ifelse sfd}bdf
/su{dup sss kwn{exch dup ac pop{scs findfont /df2 xdf}{asc}{}mm}ifelse sfd}bdf
/ao{/fmv true def ou}bdf/as{/fmv true def su}bdf
/vo{/fmv false def ou}bdf/vs{/fmv false def su}bdf
/bbc{/da .03 def fd/df get setfont
gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da moveto lws}bdf
/boc{/da 1 ps div def fd/df get setfont
gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da smc gl da 2. div dup moveto lws}bdf
/bsc{/da 1 ps div def
/ds .05 def/da2 da 2. div def fd/df get setfont
gsave cs wi 1 index 0 ne{exch ds add da2 add exch}if grestore setcharwidth
cs ds da2 add .01 add 0 smc 0 ds da2 sub translate 0 0 smc
da 0 smc da da smc 0 da smc gl da 2. div dup moveto lws}bdf
/aoc{fd/df get setfont
gsave cs wi grestore setcharwidth
gl cs 0 0 smc fd/df2 get setfont gl 0 0 moveto lws}bdf
/asc{/da .05 def fd/df get setfont
gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs da .01 add 0 smc 0 da translate gl 0 0 smc gl fd/df2 get setfont 0 0 moveto lws}bdf
/st{1000 mul usertime add dup 2147483647 gt{2147483647 sub}if def}bdf
/the{usertime sub dup 0 lt exch -2147483648 gt and}bdf
/6a 6 array def
/2a 2 array def
/3q 3 array def
/qs{3 -1 roll sub exch 3 -1 roll sub exch}bdf
/qa{3 -1 roll add exch 3 -1 roll add exch}bdf
/qm{3 -1 roll 1 index mul 3 1 roll mul}bdf
/qn{6a exch get mul}bdf
/qA .166667 def/qB .833333 def/qC .5 def
/qx{6a astore pop
qA 0 qn qB 2 qn add   qA 1 qn qB 3 qn add
qB 2 qn qA 4 qn add   qB 3 qn qA 5 qn add
qC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}bdf
/qp{6 copy 12 -2 roll pop pop}bdf
/qc{exch qp qx curveto}bdf
/qi{{exch 4 copy 2a astore aload pop qa .5 qm newpath moveto}{exch 2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}bdf
/qq{{qc 2a aload pop qx curveto}{exch 4 copy qs qa qx curveto}ifelse}bdf
/pt{currentpoint newpath moveto}bdf
/qf{/fillflag true def}bdf
/ec{1 and 0 ne{0 doop}if grestore currentpoint newpath moveto/fillflag false def}bdf
/eu{currentpoint fp{0 ep}{grestore newpath}ifelse moveto/fillflag false def}bdf
/bp{currentpoint newpath 2 copy moveto}bdf
/ef{gsave fillflag{gsave eofill grestore}if}bdf
/sm{0 exch{@1 eq{1 add}if}forall}bdf
/lshow{4 1 roll exch/@1 exch def{1 index wi pop sub 1 index sm dv 0 @1 4 -1 roll widthshow}{1 index wi pop sub
1 index dup sm 10 mul exch length 1 sub add dv dup 10. mul 0 @1 4 -1 roll 0 6 -1 roll awidthshow}ifelse}bdf
/setTxMode{sa 9 2 index put 3 eq{1}{0}ifelse setgray}bdf
/SwToSym{{}mark false/Symbol/|______Symbol 0 rf 0 sa 6 get 0 ne{pop 1}{sa 7 get 0 eq{pop 2}if}ifelse
sa 1 get 0 ne/|______Symbol
sa 4 get 0 ne{vs}{sa 3 get 0 ne{vo}{fnt}ifelse}ifelse}bdf
/mc{0 3 1 roll transform neg exch pop}bdf
/ul{dup 0 ne sa 2 get 0 ne and{gsave 0 0
/UnderlinePosition kif{mc}{ps -10 div}ifelse/UnderlineThickness kif{mc}{ps 15 div}ifelse
abs setlinewidth neg rmoveto
sa 4 get 0 ne{gsave currentlinewidth 2. div dup rmoveto currentpoint newpath moveto
2 copy rlineto stroke grestore}if
sa 3 get sa 4 get or 0 ne{gsave gl 2 copy rlineto stroke grestore rlineto strokepath nlw pys div setlinewidth}{rlineto}ifelse
stroke grestore}{pop}ifelse}bdf
/sgt{2 copy known{get true}{pop pop false}ifelse}bdf
/kif{currentfont dup/FontMatrix get exch/FontInfo sgt{true}{currentfont/df sgt
{dup/FontInfo sgt{3 1 roll/FontMatrix get mtx concatmatrix exch true}{pop pop pop false}
ifelse}{pop pop false}ifelse}ifelse{3 -1 roll sgt{exch true}{pop false}ifelse}{false}ifelse}bdf
/blank/Times-Roman findfont/CharStrings get/space get def
/macvec 256 array def
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
macvec 0 32 getinterval astore pop
macvec 32/Times-Roman findfont/Encoding get
32 96 getinterval putinterval macvec dup 39/quotesingle put 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
macvec 128 128 getinterval astore pop
{}mark true/Courier/|______Courier 0 rf
{/Metrics 21 dict begin/zero 600 def/one 600 def/two 600 def/three 600 def/four 600 def/five 600 def/six 600 def/seven 600 def/eight 600 def
/nine 600 def/comma 600 def/period 600 def/dollar 600 def/numbersign 600 def/percent 600 def/plus 600 def/hyphen 600 def/E 600 def/parenleft 600 def/parenright 600 def/space 600 def
currentdict end def currentdict/UniqueID known{/UniqueID 16#800000 def}if/FontBBox FontBBox 4 array astore def}mark true/Helvetica/|______Seattle 1 rf
/oldsettransfer/settransfer load def
/concatprocs{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx}def
/settransfer{currenttransfer concatprocs oldsettransfer}def
/PaintBlack{{1 exch sub}settransfer gsave newpath clippath 1 setgray fill grestore}def
/od{(Rvd\001\001\000\000\177) fg copy pop txpose
1 0 mtx defaultmatrix dtransform exch atan/pa exch def
newpath clippath mark
{transform{itransform moveto}}{transform{itransform lineto}}
{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform
{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}
{{closepath}}pathforall newpath counttomark array astore/gc xdf pop ct 39 0 put
10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}bdf
/cd{}bdf
/op{/sfl false def/pm save def}bdf

% two args, booleans
/cp{
%UNI don't actually print page
        pop pop         %UNI ignore two args
%UNI    not{userdict/#copies 0 put}if
%UNI    ma 0 gt{{t1 the{exit}if}loop}if
%UNI    {copypage}{showpage}ifelse
        pm restore
}bdf
/px{0 3 1 roll tp tt}bdf
/psb{/us save def}bdf
/pse{us restore}bdf
/ct 40 string def
/nc{currentpoint initclip newpath gc{dup type dup/arraytype eq exch/packedarraytype eq or{exec}if}
forall clip newpath moveto}bdf
/kp{ct 0 2 index length 2 index 39 2 index put getinterval copy cvx exec mx3 currentmatrix pop}bdf
end     % dict "md"

%UNI don't initialize LaserWriter
%UNI LW 1 eq userdict/a4small known not and{/a4small
%UNI [[300 72 div 0 0 -300 72 div -120 3381]
%UNI 280 3255
%UNI {statusdict/jobstate (printing) put 0 setblink
%UNI margins
%UNI exch 196 add exch 304 add 8 div round cvi frametoroket
%UNI statusdict/jobstate (busy) put
%UNI 1 setblink}
%UNI /framedevice load
%UNI 60 45{dup mul exch dup mul add 1.0 exch sub}/setscreen load
%UNI {}/settransfer load/initgraphics load/erasepage load]cvx
%UNI statusdict begin bind end readonly def}if
%UNI md begin/bigs[lnop lnop/legal load userdict/a4 known{/a4 load}{lnop}ifelse lnop lnop lnop lnop lnop]def
%UNI /smalls[lnop userdict/note known{/note load}{dup}ifelse lnop userdict/a4small known{/a4small load}{lnop}ifelse 2 index lnop lnop lnop lnop ]def end
systemdict/currentpacking known{setpacking}if
%UNI currentfile ok userdict/stretch known not and{eexec}{flushfile}ifelse

%%EndProlog
%%Page: 0 1
BS
0 SI
16 /Times-Bold AF
20360 11736 MT
(User Interface Software Tools)SH
11 SS 
27102 14328 MT
(Brad A. Myers)SH
/Times-Roman SF
23819 15624 MT
(Computer Science Department)SH
24429 16920 MT
(Carnegie Mellon University)SH
26018 18216 MT
(5000 Forbes Avenue)SH
25847 19512 MT
(Pittsburgh, PA 15213)SH
26672 20808 MT
(bam@cs.cmu.edu)SH
27163 22104 MT
(\050412\051 268-5150)SH
/Times-BoldItalic SF
20882 24696 MT
(** SUBMITTED FOR PUBLICATION **)SH
/Times-Roman SF
27223 27288 MT
(August 2, 1994)SH
/Times-Bold SF
28554 34776 MT
(Abstract)SH
/Times-Roman SF
8200 36528 MT
(Almost as long as there have been)
7 W( user interfaces, there have been special software systems and tools to)6 W
7200 37824 MT
(help design and implement the user interface software.  Many of these)
SH( tools have demonstrated significant)1 W
7200 39120 MT
(productivity gains for programmers, and have become)
230 W( important commercial products.  Others have)229 W
7200 40416 MT
(proven less)
234 W( successful at supporting the kinds of user interfaces people want to build.  This article)235 W
7200 41712 MT
(discusses the different kinds of user interface software tools, and)
38 W( investigates why some approaches have)37 W
7200 43008 MT
(worked and others have not.  Many examples of commercial and research)
44 W( systems are included.  Finally,)45 W
7200 44304 MT
(current research directions and open issues in the field are discussed.)SH
/Times-Bold SF
8200 49335 MT
(CR CATEGORIES AND SUBJECT DESCRIPTORS)113 W
/Times-Roman SF
(: D.2.2)
501 W( [)112 W
/Times-Bold SF
(Software Engineering)112 W
/Times-Roman SF
(]: Tools and)112 W
7200 50631 MT
(Techniques-)SH
/Times-Italic SF
(User Interfaces)213 W
/Times-Roman SF
(; H.1.2 [)213 W
/Times-Bold SF
(Models and)
213 W( Principles)214 W
/Times-Roman SF
(]: User/Machine Systems-)214 W
/Times-Italic SF
(Human Factors)214 W
/Times-Roman SF
(;)SH
7200 51927 MT
(H.5.2 [)32 W
/Times-Bold SF
(Information Interfaces and Presentation)32 W
/Times-Roman SF
(]: User Interfaces-)31 W
/Times-Italic SF
(User Interface Management Systems)31 W
/Times-Roman SF
(;)SH
7200 53223 MT
(I.2.2 [)SH
/Times-Bold SF
(Artificial Intelligence)SH
/Times-Roman SF
(]: Automatic Programming-)SH
/Times-Italic SF
(Program Synthesis)SH
/Times-Roman SF
(;)SH
/Times-Bold SF
8200 56817 MT
(ADDITIONAL KEYWORDS AND PHRASES:)501 W
/Times-Roman SF
32816 XM
(User Interface Software, Toolkits, Interface)502 W
7200 58113 MT
(Builders, User Interface Development Environments.)SH
8200 64140 MT
(This paper is revised from an earlier version which appeared as:)SH
10200 65336 MT
(Brad A.)
287 W( Myers. ``State of the Art in User Interface Software Tools,'')286 W
/Times-Italic SF
44204 XM
(Advances in Human-)286 W
13800 66532 MT
(Computer Interaction, Volume 4)41 W
/Times-Roman SF
(. Edited)
357 W( by H. Rex Hartson)
41 W( and Deborah Hix.  Norwood,)42 W
13800 67728 MT
(NJ: Ablex Publishing, 1993.  pp. 110-150.)SH
ES
%%Page: 1 2
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 1 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
14 /Times-Bold AF
7200 8138 MT
(1. Introduction)SH
11 /Times-Roman AF
8200 9967 MT
(User interface software)
128 W( is often large, complex and difficult to implement, debug, and modify.  One)127 W
7200 11796 MT
(study found that an average of 48% of the code of applications is devoted)
74 W( to the user interface, and that)75 W
7200 13625 MT
(about 50% of the implementation time)
141 W( is devoted to implementing the user interface portion)
140 W( [57].)
SH( As)555 W
7200 15454 MT
(interfaces become easier to use, they become)
31 W( harder to create)
32 W( [64].)
SH( Today,)
339 W( direct manipulation interfaces)32 W
7200 17283 MT
(\050also called ``GUIs'' for Graphical User Interfaces\051 are almost)
44 W( universal: one 1993 study found that 97%)43 W
794 50 18368 17483 UL
794 50 23023 17483 UL
366 50 25418 17483 UL
7200 19112 MT
(of all software development on Unix involved)
230 W( a GUI)
231 W( [126,)
SH( p.80].  These interfaces require that the)231 W
7200 20941 MT
(programmer deal with elaborate graphics, multiple ways)
362 W( for giving the same command, multiple)361 W
7200 22770 MT
(asynchronous input devices \050usually a keyboard and a locator or)
166 W( pointing device such as a mouse\051, a)167 W
7200 24599 MT
(``mode free'' interface where)
57 W( the user can give any command at virtually any time, and rapid ``semantic)56 W
7200 26428 MT
(feedback'' where determining the appropriate response)
131 W( to user actions requires specialized information)132 W
7200 28257 MT
(about the objects in the program.  Tomorrow's user interfaces)
387 W( will provide speech and gesture)386 W
7200 30086 MT
(recognition, intelligent agents and integrated multi-media, and will probably be)
157 W( even more difficult to)158 W
7200 31915 MT
(create. Furthermore,)
693 W( because user interface)209 W
/Times-Italic SF
27934 XM
(design)SH
/Times-Roman SF
31290 XM
(is so difficult,)
209 W( the only reliable way to get good)208 W
7200 33744 MT
(interfaces is to iteratively re-design \050and therefore re-implement\051 the interfaces)
95 W( after user-testing, which)96 W
7200 35573 MT
(makes the implementation task even harder.)SH
8200 38504 MT
(Fortunately, there has been significant)
78 W( progress in software tools to help with creating user interfaces,)77 W
7200 40333 MT
(and today, virtually)
34 W( all user interface software is created using tools that make the implementation easier.)35 W
7200 42162 MT
(For example, the MacApp system from Apple has)
64 W( been reported to reduce development time by a factor)63 W
7200 43991 MT
(of four or five)
116 W( [92].)
SH( A)
507 W( study commissioned by NeXT claims)
116 W( that the average application programmed)117 W
7200 45820 MT
(using the NeXTStep environment wrote 83% fewer lines of)
39 W( code and took one-half the time compared to)38 W
7200 47649 MT
(applications written using less advanced)
145 W( tools, and some applications were completed in one-tenth the)146 W
7200 49478 MT
(time [7].)SH
8200 52409 MT
(Furthermore, user interface tools)
32 W( are a major business.  In the Unix market alone, over US$133 million)31 W
7200 54238 MT
(of tools were sold in 1993, which is)
164 W( about 50,000 licenses)
165 W( [126].)
SH( This)
605 W( is a 64% increase over 1992.)165 W
7200 56067 MT
(Forrester Research claims that the total market for UI software tools on all platforms, including)
37 W( ``vertical)36 W
7200 57896 MT
(tools'' which include database and user interface construction tools,)
392 W( will be 130,000 developers)393 W
7200 59725 MT
(generating US$400 million in)
14 W( revenue.  They estimate that this will double each year, growing to 700,000)13 W
7200 61554 MT
(developers and $1.2 billion by 1996 [16].)SH
8200 64485 MT
(Mark Hanner from the Meta Group market)
159 W( research firm says that the user interface tool market is)160 W
7200 66314 MT
(about to explode)
105 W( [24].)
SH( Whereas)
485 W( the ``first generation'')
105 W( of commercial tools were not fully graphical or)104 W
7200 68143 MT
(were not sufficiently powerful, this is no longer true for)
32 W( today's tools.  Furthermore, prices for tools have)33 W
7200 69972 MT
(dropped significantly, and fees)
62 W( for run-times have been mostly eliminated \050so that designers do not have)61 W
7200 71801 MT
(to pay the tool creator for products)
120 W( created using the tools\051.  For the future, there is still a tremendous)121 W
ES
%%Page: 2 3
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 2 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(opportunity for good tools, especially in)
466 W( niche areas like multimedia, distributed systems, and)465 W
7200 9784 MT
(geographical information systems.)SH
8200 12715 MT
(This article)
113 W( surveys user interface software tools, and explains the different types and classifications.)114 W
7200 14544 MT
(There have been many previous surveys on this)
121 W( topic)
120 W( [49, 25],)
SH( but since this is a fast-changing field, a)120 W
7200 16373 MT
(new one seemed in order.  In addition, this article takes)
340 W( a broader approach and includes more)341 W
7200 18202 MT
(components of user interface software, including windowing systems.)
68 W( However,)
409 W( it is now impossible to)67 W
9 SS 
32604 19668 MT
(1)SH
11 SS 
7200 20031 MT
(discuss)SH
/Times-Italic SF
10764 XM
(all)SH
/Times-Roman SF
12312 XM
(user interface tools, since there are so many.)111 W
33825 XM
(For example, there are over 100 commercial)110 W
7200 21860 MT
(graphical user interface builders, and)
25 W( many new research tools are reported every year at conferences like)26 W
7200 23689 MT
(the annual ACM User Interface Software)
163 W( and Technology Symposium \050UIST\051 and the ACM SIGCHI)162 W
7200 25518 MT
(conference. There)
549 W( are also about three PhD theses)
137 W( on user interface tools every year.  Therefore, this)138 W
7200 27347 MT
(article provides an overview of the most popular approaches, rather than an exhaustive survey.)SH
14 /Times-Bold AF
7200 31885 MT
(2. Definitions)SH
11 /Times-Roman AF
8200 33714 MT
(The)SH
/Times-Italic SF
10218 XM
(user interface)33 W
/Times-Roman SF
16638 XM
(\050UI\051 of a computer program is the part that handles the)
33 W( output to the display and the)32 W
7200 35543 MT
(input from the person using the program.  The rest)
232 W( of the program is called the)233 W
/Times-Italic SF
45712 XM
(application)SH
/Times-Roman SF
51232 XM
(or the)233 W
/Times-Italic SF
7200 37372 MT
(application semantics)SH
/Times-Roman SF
(.)SH
8200 40303 MT
(User interface tools have been called)
78 W( various names over the years, with the most popular being)77 W
/Times-Italic SF
51862 XM
(User)SH
7200 42132 MT
(Interface Management Systems \050UIMS\051)68 W
/Times-Roman SF
25056 XM
([75]. However,)
411 W( many people feel that the term)
68 W( UIMS should be)69 W
7200 43961 MT
(used only for tools that handle the sequencing of operations \050what)
165 W( happens after each event from the)164 W
7200 45790 MT
(user\051, so other)
352 W( terms like)353 W
/Times-Italic SF
20143 XM
(Toolkits)SH
/Times-Roman SF
(,)SH
/Times-Italic SF
24592 XM
(User Interface Development Environments)353 W
/Times-Roman SF
(,)SH
/Times-Italic SF
45399 XM
(Interface Builders)353 W
/Times-Roman SF
(,)SH
/Times-Italic SF
7200 47619 MT
(Interface Development Tools)35 W
/Times-Roman SF
(, and)35 W
/Times-Italic SF
22521 XM
(Application Frameworks)35 W
/Times-Roman SF
33835 XM
(have been used.  This paper)
35 W( will try to define)34 W
7200 49448 MT
(these terms more specifically, and use the general term ``user interface tool'' for all)
117 W( software aimed to)118 W
7200 51277 MT
(help create user interfaces.  Note that the word ``tool'' is being)
310 W( used to include what are called)309 W
7200 53106 MT
(``toolkits,'' as well as higher-level tools, such as Interface Builders, that are)SH
/Times-Italic SF
40829 XM
(not)SH
/Times-Roman SF
42510 XM
(toolkits.)SH
1590 50 44222 53306 UL
8200 56037 MT
(Four different classes of people are involved with user interface software, and it is)
100 W( important to have)101 W
7200 57866 MT
(different names for them to avoid confusion.  The)
65 W( first is the person using the resulting program, who is)64 W
7200 59695 MT
(called the)SH
/Times-Italic SF
11720 XM
(end user)SH
/Times-Roman SF
15752 XM
(or just)SH
/Times-Italic SF
18808 XM
(user)SH
/Times-Roman SF
(. The next person creates)
SH( the user interface of the program, and is called the)1 W
/Times-Italic SF
7200 61524 MT
(user interface designer)26 W
/Times-Roman SF
17695 XM
(or just)26 W
/Times-Italic SF
20803 XM
(designer)SH
/Times-Roman SF
(. Working)
325 W( with the user interface designer will be the person who)25 W
7200 63353 MT
(writes the software for the rest of)
13 W( the application.  This person is called the)14 W
/Times-Italic SF
40576 XM
(application programmer)14 W
/Times-Roman SF
(. The)303 W
7200 65182 MT
(designer may use special user interface tools which are provided)
133 W( to help create user interfaces.  These)132 W
7200 67011 MT
(tools are created by the)52 W
/Times-Italic SF
17935 XM
(tool creator)53 W
/Times-Roman SF
(. Note)
381 W( that the designer will be a user of the software created by the)53 W
10800 50 7200 69158 UL
7 SS 
8100 70659 MT
(1)SH
9 SS 
8450 70986 MT
(A partial list which is frequently updated is available through Mosaic or other world-wide-web interfaces as)445 W
/Courier SF
7200 72000 MT
(http://www.cs.cmu.edu:8001/afs/cs.cmu.edu/user/bam/www/toolnames.html)SH
ES
%%Page: 3 4
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 3 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(tool creator, but we still do not use the term ``user'' here to)
31 W( avoid confusion with the end user.  Although)30 W
7200 9784 MT
(this classification discusses)
20 W( each role as a different person, in fact, there may be many people in each role)21 W
7200 11613 MT
(or one person may perform multiple roles.  The general term)51 W
/Times-Italic SF
34700 XM
(programmer)SH
/Times-Roman SF
40585 XM
(is used for anyone who writes)50 W
7200 13442 MT
(code, and may be a designer, application programmer, or tool creator.)SH
14 /Times-Bold AF
7200 17980 MT
(3. Importance of User Interface Tools)SH
11 /Times-Roman AF
8200 19809 MT
(There are many advantages to using user interface software tools.  These can be)
146 W( classified into two)147 W
7200 21638 MT
(main groups:)SH
/Symbol SF
9169 23216 MT
(\267)SH
/Times-Bold SF
9950 XM
(The quality of the interfaces will be higher.)SH
/Times-Roman SF
30666 XM
(This is because:)SH
8 /Symbol AF
12057 24554 MT
(\267)SH
11 /Times-Roman AF
12700 24704 MT
(Designs can be rapidly prototyped and implemented, possibly)
431 W( even before the)430 W
12700 25900 MT
(application code is written.)SH
8 /Symbol AF
12057 27644 MT
(\267)SH
11 /Times-Roman AF
12700 27794 MT
(It is easier to incorporate changes discovered through user testing.)SH
8 /Symbol AF
12057 29538 MT
(\267)SH
11 /Times-Roman AF
12700 29688 MT
(There can be multiple user interfaces for the same application.)SH
8 /Symbol AF
12057 31432 MT
(\267)SH
11 /Times-Roman AF
12700 31582 MT
(More effort can be)
193 W( expended on the tool than may be practical on any single user)194 W
12700 32778 MT
(interface since the tool will be used with many different applications.)SH
8 /Symbol AF
12057 34522 MT
(\267)SH
11 /Times-Roman AF
12700 34672 MT
(Different applications are)
205 W( more likely to have consistent user interfaces if they are)204 W
12700 35868 MT
(created using the same user interface tool.)SH
8 /Symbol AF
12057 37612 MT
(\267)SH
11 /Times-Roman AF
12700 37762 MT
(It will be)
274 W( easier for a variety of specialists to be involved in designing the user)275 W
12700 38958 MT
(interface, rather than)
344 W( having the user interface created entirely by programmers.)343 W
12700 40154 MT
(Graphic artists, cognitive)
286 W( psychologists, and human factors specialists may all be)287 W
12700 41350 MT
(involved. In)
1054 W( particular, professional user interface designers, who may not be)389 W
12700 42546 MT
(programmers, can be in charge of the overall design.)SH
/Symbol SF
9169 44440 MT
(\267)SH
/Times-Bold SF
9950 XM
(The user interface code will be)
192 W( easier and more economical to create and maintain.)193 W
/Times-Roman SF
9950 45636 MT
(This is because:)SH
8 /Symbol AF
12057 46974 MT
(\267)SH
11 /Times-Roman AF
12700 47124 MT
(Interface specifications can be represented, validated, and evaluated more easily.)SH
8 /Symbol AF
12057 48868 MT
(\267)SH
11 /Times-Roman AF
12700 49018 MT
(There will be less code to write, because much is supplied by the tools.)SH
8 /Symbol AF
12057 50762 MT
(\267)SH
11 /Times-Roman AF
12700 50912 MT
(There will be)
378 W( better modularization due to the separation of the user interface)377 W
12700 52108 MT
(component from the application.  This)
282 W( should allow the user interface to change)283 W
12700 53304 MT
(without affecting the application, and a large class of changes to the application \050such)66 W
12700 54500 MT
(as changing the internal algorithms\051 should be)
252 W( possible without affecting the user)253 W
12700 55696 MT
(interface.)SH
8 /Symbol AF
12057 57440 MT
(\267)SH
11 /Times-Roman AF
12700 57590 MT
(The level of programming expertise of the)
6 W( interface designers and implementors can be)5 W
12700 58786 MT
(lower, because the tools hide much of the complexities of the underlying system.)SH
8 /Symbol AF
12057 60530 MT
(\267)SH
11 /Times-Roman AF
12700 60680 MT
(The reliability of the user interface will be higher, since the)
45 W( code for the user interface)46 W
12700 61876 MT
(is created automatically from a higher level specification.)SH
8 /Symbol AF
12057 63620 MT
(\267)SH
11 /Times-Roman AF
12700 63770 MT
(It will be easier)
27 W( to port an application to different hardware and software environments)26 W
12700 64966 MT
(since the device dependencies are isolated in the user interface tool.)SH
8200 67897 MT
(Based on these goals for user interface software tools, we)
38 W( can list a number of important functions that)39 W
7200 69726 MT
(should be provided.  This list can be)
163 W( used to evaluate the various tools to see how much they cover.)162 W
7200 71555 MT
(Naturally, no tool will help with everything, and different)
205 W( user interface designers may put different)206 W
ES
%%Page: 4 5
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 4 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(emphasis on the different features.)SH
8200 10886 MT
(In general, the tools might:)SH
/Symbol SF
9169 12464 MT
(\267)SH
/Times-Roman SF
9950 XM
(help)SH
/Times-Italic SF
12119 XM
(design)SH
/Times-Roman SF
15266 XM
(the interface given a specification of the end users' tasks,)SH
/Symbol SF
9169 13660 MT
(\267)SH
/Times-Roman SF
9950 XM
(help)SH
/Times-Italic SF
12119 XM
(implement)SH
/Times-Roman SF
16976 XM
(the interface given a specification of the design,)SH
/Symbol SF
9169 14856 MT
(\267)SH
/Times-Roman SF
9950 XM
(help)SH
/Times-Italic SF
12166 XM
(evaluate)SH
/Times-Roman SF
16213 XM
(the interface after it is designed and propose improvements, or at least provide)46 W
9950 16052 MT
(information to allow the designer to evaluate the interface,)SH
/Symbol SF
9169 17248 MT
(\267)SH
/Times-Roman SF
9950 XM
(create easy-to-use interfaces,)SH
/Symbol SF
9169 18444 MT
(\267)SH
/Times-Roman SF
9950 XM
(allow the designer to rapidly investigate different designs,)SH
/Symbol SF
9169 19640 MT
(\267)SH
/Times-Roman SF
9950 XM
(allow non-programmers to design and implement user interfaces,)SH
/Symbol SF
9169 20836 MT
(\267)SH
/Times-Roman SF
9950 XM
(allow the end user to customize the interface,)SH
/Symbol SF
9169 22032 MT
(\267)SH
/Times-Roman SF
9950 XM
(provide portability, and)SH
/Symbol SF
9169 23228 MT
(\267)SH
/Times-Roman SF
9950 XM
(be easy to use themselves.)SH
8200 26159 MT
(This might be achieved by having the tools:)SH
/Symbol SF
9169 27737 MT
(\267)SH
/Times-Roman SF
9950 XM
(automatically choose which user interface styles, input devices, widgets, etc. should be used,)SH
/Symbol SF
9169 28933 MT
(\267)SH
/Times-Roman SF
9950 XM
(help with screen layout and graphic design,)SH
/Symbol SF
9169 30129 MT
(\267)SH
/Times-Roman SF
9950 XM
(validate user inputs,)SH
/Symbol SF
9169 31325 MT
(\267)SH
/Times-Roman SF
9950 XM
(handle user errors,)SH
/Symbol SF
9169 32521 MT
(\267)SH
/Times-Roman SF
9950 XM
(handle aborting and undoing of operations,)SH
/Symbol SF
9169 33717 MT
(\267)SH
/Times-Roman SF
9950 XM
(provide appropriate feedback to show that inputs have been received,)SH
/Symbol SF
9169 34913 MT
(\267)SH
/Times-Roman SF
9950 XM
(provide help and prompts,)SH
/Symbol SF
9169 36109 MT
(\267)SH
/Times-Roman SF
9950 XM
(update the screen display when application data changes,)SH
/Symbol SF
9169 37305 MT
(\267)SH
/Times-Roman SF
9950 XM
(notify the application when the user updates application data,)SH
/Symbol SF
9169 38501 MT
(\267)SH
/Times-Roman SF
9950 XM
(deal with field scrolling and editing,)SH
/Symbol SF
9169 39697 MT
(\267)SH
/Times-Roman SF
9950 XM
(help with the sequencing of operations,)SH
/Symbol SF
9169 40893 MT
(\267)SH
/Times-Roman SF
9950 XM
(insulate the application from)
319 W( all device dependencies and the underlying software and)320 W
9950 42089 MT
(hardware systems,)SH
/Symbol SF
9169 43285 MT
(\267)SH
/Times-Roman SF
9950 XM
(provide customization facilities to end users, and)SH
/Symbol SF
9169 44481 MT
(\267)SH
/Times-Roman SF
9950 XM
(evaluate the graphic design and layout, usability, and learnability of the interface.)SH
14 /Times-Bold AF
7200 49019 MT
(4. Overview of User Interface Software Tools)SH
11 /Times-Roman AF
8200 50848 MT
(Since user interface software is so difficult to create,)
39 W( it is not surprising that people have been working)38 W
7200 52677 MT
(for a long time)
21 W( to create tools to help with it.  Today, many of these tools and ideas have progressed from)22 W
7200 54506 MT
(research into commercial systems, and their effectiveness has been)
276 W( amply demonstrated.  Research)275 W
7200 56335 MT
(systems also continue to evolve quickly, and the models that were popular five years)
18 W( ago have been made)19 W
7200 58164 MT
(obsolete by more effective tools, changes in)
20 W( the computer market \050e.g., the demise of OpenLook will take)19 W
7200 59993 MT
(with it a number of tools\051, and)
273 W( the emergence of new styles of user interfaces such as pen-based)274 W
7200 61822 MT
(computing and multi-media.)SH
ES
%%Page: 5 6
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 5 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
13 /Times-Bold AF
7200 8071 MT
(4.1 Components of User Interface Software)SH
11 /Times-Roman AF
8200 9900 MT
(As shown in Figure 1, user interface)
211 W( software may be divided into various layers: the windowing)210 W
7200 11729 MT
(system, the toolkit and higher-level tools.  Of course, many practical systems span multiple layers.)SH
46800 50 7200 13880 UL
1 1 0 21600 95735 GB 
%%BeginDocument: componentparts.PS
%!PS-Adobe-2.0
%%Title: componentparts
%%Creator: MacDraw 1.9.5
%%CreationDate: Wednesday, July 24, 1991
%%%Pages: (atend)
%%BoundingBox: ? ? ? ?
%%%PageBoundingBox: 30 31 582 761
%%For: Brad Myers II
%%IncludeProcSet: "(AppleDict md)" 68 0
%%EndComments
%%EndProlog
%%BeginDocumentSetup
md begin

T T -31 -30 761 582 100 72 72 1 F F F F T T T psu
(Brad Myers II; document: componentparts)jn
0 mf
od
%%EndDocumentSetup
%%%Page: ? 1
op
0 0 xl
1 1 pen
0 0 gm
(nc 0 0 720 540 6 rc)kp
135 41 gm
1 setTxMode
8 fs
bu fc
{}mark T /Times-Roman /|______Times-Roman 0 rf
bn
14 fz
bu fc
2 F /|______Times-Roman ao
bn
6.12243 0. 32 0.61224 0.(Operating System)awidthshow
109 20 gm
1 fs
bu fc
{}mark T /Times-Bold /|______Times-Bold 0 rf
bn
18 fz
bu fc
2 F /|______Times-Bold fnt
bn
4.20349 0. 32 0.42034 0.(Windowing System)awidthshow
82 69 gm
0.66598 0.(Toolkit)ashow
55 22 gm
5.01342 0. 32 0.50134 0.(Higher-level Tools)awidthshow
27 55 gm
9 fs
14 fz
bu fc
2 F /|______Times-Bold ao
bn
1.80032 0.(Application)ashow
0 0 gm
0 gr
9.5 9.5 144.5 189.5 0 rc
36 9 gm
36 189 lin
63 9 gm
63 189 lin
90 9 gm
90 189 lin
117 9 gm
117 189 lin
F T cp
%%Trailer
cd
end
%%%Pages: 1 0
%%EOF

%%EndDocument
 GE /Times-Bold SF
8200 34487 MT
(Figure 1:)SH
/Times-Roman SF
13057 XM
(The components of user interface software discussed in this article.)SH
46800 50 7200 35883 UL
8200 38630 MT
(The)SH
/Times-Italic SF
10202 XM
(windowing system)17 W
/Times-Roman SF
18548 XM
(supports the separation of the screen)
17 W( into different \050usually rectangular\051 regions,)18 W
7200 40459 MT
(called)SH
/Times-Italic SF
10113 XM
(windows)SH
/Times-Roman SF
(. The)
299 W( X system)
12 W( [91])
SH( divides the window functionality into two layers: the)
12 W( window)11 W
/Times-Italic SF
50793 XM
(system)SH
/Times-Roman SF
(,)SH
7200 42288 MT
(which is)
87 W( the functional or programming interface, and the window)88 W
/Times-Italic SF
37556 XM
(manager)SH
/Times-Roman SF
41829 XM
(which is the user interface.)88 W
7200 44117 MT
(Thus the ``window system'' provides procedures that allow the application to draw)
23 W( pictures on the screen)22 W
7200 45946 MT
(and get input from the user, and the ``window manager'' allows the end user to move)
81 W( windows around,)82 W
7200 47775 MT
(and is responsible for displaying the title lines,)
75 W( borders and icons around the windows.  However, many)74 W
7200 49604 MT
(people and systems use the name ``window manager'')
86 W( to refer to both layers, since systems such as the)87 W
7200 51433 MT
(Macintosh and Microsoft Windows do not separate them.  This article will use)
2 W( the X terminology, and use)1 W
7200 53262 MT
(the term ``windowing system'' when referring to both layers.)SH
1406 50 15386 53462 UL
8200 56193 MT
(On top of the)
87 W( windowing system is the)88 W
/Times-Italic SF
26195 XM
(toolkit)SH
/Times-Roman SF
(, which contains many commonly used)88 W
/Times-Italic SF
46980 XM
(widgets)SH
/Times-Roman SF
50705 XM
(such as)88 W
7200 58022 MT
(menus, buttons, scroll bars, and text input fields.)
29 W( On)
331 W( top of the toolkit might be)28 W
/Times-Italic SF
42977 XM
(higher-level tools)28 W
/Times-Roman SF
(, which)28 W
7200 59851 MT
(help the)
123 W( designer use the toolkit widgets.  The following sections discuss each of these components in)124 W
7200 61680 MT
(more detail.)SH
ES
%%Page: 6 7
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 6 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
14 /Times-Bold AF
7200 8138 MT
(5. Windowing Systems)SH
11 /Times-Roman AF
8200 9967 MT
(A windowing system is a software package)
7 W( that helps the user monitor and control different contexts by)6 W
7200 11796 MT
(separating them physically onto different parts of one or more display screens.)
189 W( A)
655 W( survey of various)190 W
7200 13625 MT
(windowing systems was published earlier)
17 W( [47].)
SH( Although)
309 W( most of today's systems provide toolkits)
17 W( on top)16 W
7200 15454 MT
(of the windowing systems, as will be)
152 W( explained below, toolkits generally only address the drawing of)153 W
7200 17283 MT
(widgets such)
64 W( as buttons, menus and scroll bars.  Thus, when the programmer wants to draw application-)63 W
7200 19112 MT
(specific parts of the interface and allow the user to manipulate these,)
SH( the window system interface must be)1 W
7200 20941 MT
(used directly.  Therefore, the windowing system's)
50 W( programming interface has significant impact on most)49 W
7200 22770 MT
(user interface programmers.)SH
8200 25701 MT
(The first windowing systems were implemented as part of a single program or)
90 W( system.  For example,)91 W
7200 27530 MT
(the EMACs text editor)
92 W( [100],)
SH( and)
92 W( the Smalltalk)
91 W( [112])
SH( and DLISP)
91 W( [111])
SH( programming environments had)91 W
7200 29359 MT
(their own windowing systems.  Later systems implemented the windowing system as an)
81 W( integral part of)82 W
7200 31188 MT
(the operating system, such as Sapphire for PERQs)
181 W( [45],)
SH( SunView for Suns)
181 W( [106],)
SH( and)
181 W( the Macintosh,)180 W
7200 33017 MT
(NeXT and Microsoft Windows systems.)
28 W( In)
332 W( order to allow different windowing systems to operate on the)29 W
7200 34846 MT
(same operating system, some windowing systems,)
176 W( such as X and Sun's NeWS, operate as a separate)175 W
7200 36675 MT
(process, and use the)
466 W( operating system's inter-process communication mechanism to connect to)467 W
7200 38504 MT
(applications.)SH
13 /Times-Bold AF
7200 42255 MT
(5.1 Structure of Windowing Systems)SH
11 /Times-Roman AF
8200 44084 MT
(A windowing)
50 W( system can be logically divided into two layers, each of which has two parts \050see Figure)49 W
7200 45913 MT
(2\051. The)335 W
/Times-Italic SF
11016 XM
(window system)30 W
/Times-Roman SF
(, or)30 W
/Times-Italic SF
19478 XM
(base layer)30 W
/Times-Roman SF
(, implements the basic functionality of)
30 W( the windowing system.  The)31 W
7200 47742 MT
(two parts of this layer handle the display of graphics in windows \050the)34 W
/Times-Italic SF
38343 XM
(output model)34 W
/Times-Roman SF
(\051 and the)
34 W( access to the)33 W
7200 49571 MT
(various input devices \050the)40 W
/Times-Italic SF
18968 XM
(input model)40 W
/Times-Roman SF
(\051, which usually includes a keyboard and a pointing)
40 W( device such as)41 W
7200 51400 MT
(a mouse.  The primary interface of the base layer is)
132 W( procedural, and is called the windowing system's)131 W
/Times-Italic SF
7200 53229 MT
(application)SH
/Times-Roman SF
12487 XM
(or)SH
/Times-Italic SF
13678 XM
(program interface)SH
/Times-Roman SF
(.)SH
8200 56160 MT
(The other layer of)
198 W( windowing system is the)199 W
/Times-Italic SF
29157 XM
(window manager)199 W
/Times-Roman SF
37439 XM
(or)SH
/Times-Italic SF
38829 XM
(user interface)199 W
/Times-Roman SF
(. This)
673 W( includes all)199 W
7200 57989 MT
(aspects that are visible to the user.  The two parts of the user interface)
19 W( layer are the)18 W
/Times-Italic SF
44217 XM
(presentation)SH
/Times-Roman SF
(, which is)18 W
7200 59818 MT
(comprised of the pictures that)
53 W( the window manager displays, and the)54 W
/Times-Italic SF
38276 XM
(commands)SH
/Times-Roman SF
(, which are how the user)54 W
7200 61647 MT
(manipulates the windows and their contents.)SH
13 /Times-Bold AF
7200 65398 MT
(5.2 Base Layer)SH
11 /Times-Roman AF
8200 67227 MT
(The base layer is the procedural interface to the windowing system.  In the 1970s and early)
6 W( 1980s, there)5 W
7200 69056 MT
(were a large number of different windowing systems, each with a different)
74 W( procedural interface \050at least)75 W
7200 70885 MT
(one for each hardware platform\051.)
144 W( People)
562 W( writing software found this to be unacceptable because they)143 W
ES
%%Page: 7 8
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 7 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
46800 50 7200 8155 UL
11 SS 
9 10 0 7920 72550 GB 
%%BeginDocument: windowparts.PS
%!PS-Adobe-2.0
%%Title: windowparts
%%Creator: MacDraw 1.9.5
%%CreationDate: Wednesday, July 24, 1991
%%%Pages: (atend)
%%BoundingBox: ? ? ? ?
%%%PageBoundingBox: 30 31 582 761
%%For: Brad Myers II
%%IncludeProcSet: "(AppleDict md)" 68 0
%%EndComments
%%EndProlog
%%BeginDocumentSetup
md begin

T T -31 -30 761 582 100 72 72 1 F F F F T T T psu
(Brad Myers II; document: windowparts)jn
0 mf
od
%%EndDocumentSetup
%%%Page: ? 1
op
0 0 xl
1 1 pen
0 0 gm
(nc 0 0 720 540 6 rc)kp
120 5 gm
1 setTxMode
1 fs
bu fc
{}mark T /Times-Bold /|______Times-Bold 0 rf
bn
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
3.29620 0. 32 0.32962 0.(User Interface Layer)awidthshow
165 67 gm
3.02017 0. 32 0.30201 0.(Base Layer)awidthshow
120 366 gm
2.83218 0. 32 0.28321 0.(Window Manager)awidthshow
165 366 gm
3.26293 0. 32 0.32629 0.(Window System)awidthshow
118 164 gm
0 fs
bu fc
{}mark T /Helvetica /|______Helvetica 0 rf
bn
12 fz
bu fc
2 F /|______Helvetica fnt
bn
0.14967 0.(Presentation)ashow
163 160 gm
0.46783 0. 32 0.04678 0.(Output Model)awidthshow
118 275 gm
0.23811 0.(Commands)ashow
163 274 gm
0.31677 0. 32 0.03167 0.(Input Model )awidthshow
0 0 gm
0 gr
99.5 153.5 126.5 243.5 0 rc
99.5 261.5 126.5 351.5 0 rc
144.5 153.5 171.5 243.5 0 rc
144.5 261.5 171.5 351.5 0 rc
134 189 154 209 246 294 1 ar
126 198 gm
136 198 lin
0 0 gm
179 189 199 209 246 294 1 ar
171 198 gm
181 198 lin
0 0 gm
161 297 181 317 66 114 1 ar
189 306 gm
179 306 lin
0 0 gm
116 297 136 317 66 114 1 ar
144 306 gm
134 306 lin
135 0 gm
40<83070E1C3870E0C1>pat
135 486 lin
F T cp
%%Trailer
cd
end
%%%Pages: 1 0
%%EOF

%%EndDocument
 GE /Times-Bold SF
8200 24082 MT
(Figure 2:)SH
/Times-Roman SF
13057 XM
(The windowing system can be divided into two layers, called the)142 W
/Times-Italic SF
43458 XM
(base)SH
/Times-Roman SF
45892 XM
(or)SH
/Times-Italic SF
47226 XM
(window system)143 W
/Times-Roman SF
13057 25278 MT
(layer, and the)104 W
/Times-Italic SF
19599 XM
(user interface)104 W
/Times-Roman SF
26161 XM
(or)SH
/Times-Italic SF
27456 XM
(window manager)104 W
/Times-Roman SF
35548 XM
(layer. Each)
483 W( of these can)
104 W( be divided into)103 W
13057 26474 MT
(parts that handle output and input.)SH
46800 50 7200 27870 UL
7200 30617 MT
(wanted to be able to)
57 W( run their software on different platforms, but they would have to rewrite significant)58 W
7200 32446 MT
(amounts of code to convert from one window system to another.  The)
153 W( X windowing system)
152 W( [91])
SH( was)152 W
7200 34275 MT
(created to)
138 W( solve this problem by providing a hardware-independent interface to windows.  X has been)139 W
7200 36104 MT
(quite successful at this, and has)
204 W( driven virtually all other windowing systems out of the workstation)203 W
7200 37933 MT
(hardware market.  In the small computer market, the)
93 W( Macintosh runs its own window system or X, and)94 W
7200 39762 MT
(IBM PC-class machines primarily run Microsoft Windows or IBM's Presentation Manager \050part of OS/2\051.)SH
12 /Times-Bold AF
7200 43446 MT
(5.2.1 Output Model)SH
11 /Times-Roman AF
8200 45275 MT
(The output model is the set)
35 W( of procedures that an application can use to draw pictures on the screen.  It)34 W
7200 47104 MT
(is important that all)
51 W( output be directed through the window system so that the graphics primitives can be)52 W
7200 48933 MT
(clipped to the window's borders.  For example, if a program draws a line that would extend out)
153 W( of a)152 W
7200 50762 MT
(window's borders, it must be clipped so that the contents of other, independent, windows are)
285 W( not)286 W
7200 52591 MT
(overwritten. Most)
275 W( windowing systems provide special escapes that allow programs to draw directly to the)SH
7200 54420 MT
(screen, without using the)
28 W( window system's clipping.  These operations can be much quicker, but are very)29 W
7200 56249 MT
(dangerous and therefore should seldom be used.  Most modern computers provide)
29 W( graphics hardware that)28 W
7200 58078 MT
(is specially optimized to work efficiently with the window system.)SH
8200 61009 MT
(In early windowing)
109 W( systems, such as Smalltalk)
110 W( [112],)
SH( Blit)
110 W( [85])
SH( and Sapphire)
110 W( [46],)
SH( the primary output)110 W
7200 62838 MT
(operation was BitBlt \050also)
29 W( called ``RasterOp''\051.  These systems primarily supported monochrome screens)28 W
7200 64667 MT
(\050each pixel is either black or white\051.)
99 W( BitBlt)
474 W( takes a rectangle of pixels from one part of the screen and)100 W
7200 66496 MT
(copies it to)
73 W( another part.  Various boolean operations can be specified for combining the pixel values of)72 W
7200 68325 MT
(the source and destination rectangles.  For example, the source rectangle can simply replace the)341 W
7200 70154 MT
(destination, or it might be XORed with the destination.  BitBlt can be used to draw solid rectangles in)115 W
7200 71983 MT
(either black or white, display text, scroll windows,)
236 W( and perform many other effects)
237 W( [35].)
SH( The)
749 W( only)237 W
ES
%%Page: 8 9
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 8 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(additional drawing operation typically supported by these early systems was drawing straight lines.)SH
8200 10886 MT
(Later windowing systems, such as the Macintosh)
21 W( and X, added a full set of drawing operations, such as)20 W
7200 12715 MT
(filled and unfilled polygons, text, lines, arcs, etc.  These cannot be implemented)
11 W( using the BitBlt operator.)12 W
7200 14544 MT
(With the growing popularity)
6 W( of color screens and non-rectangular primitives \050such as rounded rectangles\051,)5 W
7200 16373 MT
(the use of BitBlt has significantly decreased.  It is primarily used now for scrolling and)
SH( copying off-screen)1 W
7200 18202 MT
(pictures onto the screen \050e.g., to implement double-buffering\051.)SH
8200 21133 MT
(A few windowing systems allow the)
85 W( full Postscript imaging model)
84 W( [1])
SH( to be used to create images on)84 W
7200 22962 MT
(the screen.  Postscript provides device-independent coordinate systems and arbitrary)
23 W( rotations and scaling)24 W
7200 24791 MT
(for all objects,)
186 W( including text.  Another advantage of using Postscript for the screen is that the same)185 W
7200 26620 MT
(language can be)
39 W( used to print the windows on paper \050since many printers accept Postscript\051.  Sun created)40 W
7200 28449 MT
(a version used in the NeWS windowing system, and then Adobe \050the creator of Postscript\051)
29 W( came out with)28 W
7200 30278 MT
(an official version called ``Display Postscript'' which is used in the NeXT windowing system)
177 W( and is)178 W
7200 32107 MT
(supplied as an extension to the X windowing system by a number of vendors, including DEC and IBM.)SH
8200 35038 MT
(All of the standard output models only contain drawing operations for two)
80 W( dimensional objects.  Two)79 W
7200 36867 MT
(extensions to support 3-D objects are PEX and)
73 W( OpenGL.  PEX)
74 W( [84])
SH( is an extension to the X windowing)74 W
7200 38696 MT
(system that incorporates much of the PHIGS graphics standard.  OpenGL)
255 W( [78])
SH( is)
255 W( based on the GL)254 W
7200 40525 MT
(programming interface that has been used)
242 W( for many years on Silicon Graphics machines.  OpenGL)243 W
7200 42354 MT
(provides machine independence for 3-D since it is available for various X platforms \050SGI, Sun, etc.\051)
52 W( and)51 W
7200 44183 MT
(is included as a standard part of new versions of Microsoft Windows.)SH
8200 47114 MT
(As shown in Figure 3, the)
226 W( earlier windowing systems assumed that a graphics package would be)227 W
7200 48943 MT
(implemented using the windowing system.  For example, the CORE graphics package was)
68 W( implemented)67 W
7200 50772 MT
(on top of the SunView windowing system.  All newer systems, including the)
199 W( Macintosh, X, NeWS,)200 W
7200 52601 MT
(NeXT, and Microsoft)
304 W( Windows, have implemented a sophisticated graphics system as)303 W
/Times-Italic SF
48750 XM
(part)SH
/Times-Roman SF
51162 XM
(of the)303 W
7200 54430 MT
(windowing system.)SH
12 /Times-Bold AF
7200 58114 MT
(5.2.2 Input Model)SH
11 /Times-Roman AF
8200 59943 MT
(The early graphics)
7 W( standards, such as CORE and PHIGS, provided an input model that does not support)6 W
7200 61772 MT
(the modern, direct manipulation style of interfaces.  In those standards, the)
40 W( programmer calls a routine to)41 W
7200 63601 MT
(request the value of a ``virtual device'' such as a ``locator'' \050pointing device position\051, ``string'' \050edited)74 W
7200 65430 MT
(text string\051, ``choice'' \050selection from a menu\051, or ``pick'' \050selection)
29 W( of a graphical object\051.  The program)30 W
7200 67259 MT
(would then pause waiting for the user to take action.  This is clearly at odds with the direct)
45 W( manipulation)44 W
7200 69088 MT
(``mode-free'' style, where the user can decide whether to make a menu choice, select an object, or type)80 W
7200 70917 MT
(something.)SH
ES
%%Page: 9 10
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29767 XM
(- 9 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
46800 50 7200 8155 UL
11 SS 
7 10 0 11070 64270 GB 
%%BeginDocument: partsorgs.PS
%!PS-Adobe-2.0
%%Title: partsorgs
%%Creator: MacDraw 1.9.5
%%CreationDate: Tuesday, December 17, 1991
%%%Pages: (atend)
%%BoundingBox: ? ? ? ?
%%%PageBoundingBox: 30 30 582 761
%%For: Brad Myers II
%%IncludeProcSet: "(AppleDict md)" 68 0
%%EndComments
%%EndProlog
%%BeginDocumentSetup
md begin

T T -41 -40 1015 776 75 72 72 1 F F F F T T F psu
(Brad Myers II; document: partsorgs)jn
0 mf
od
%%EndDocumentSetup
%%%Page: ? 1
op
0 0 xl
1 1 pen
0 0 gm
(nc 0 0 972 720 6 rc)kp
64 gr
187 222 238 322 26.5 26.5 4 rr
0 gr
187.5 222.5 237.5 321.5 26.5 26.5 0 rr
64 gr
179 214 230 314 26.5 26.5 4 rr
0 gr
179.5 214.5 229.5 313.5 26.5 26.5 0 rr
64 gr
187 60 238 160 26.5 26.5 4 rr
0 gr
187.5 60.5 237.5 159.5 26.5 26.5 0 rr
64 gr
179 52 230 152 26.5 26.5 4 rr
0 gr
179.5 52.5 229.5 151.5 26.5 26.5 0 rr
64 gr
70 141 121 241 26.5 26.5 4 rr
0 gr
70.5 141.5 120.5 240.5 26.5 26.5 0 rr
64 gr
62 133 113 233 26.5 26.5 4 rr
0 gr
62.5 133.5 112.5 232.5 26.5 26.5 0 rr
64 gr
70 519 120 619 26.5 26.5 4 rr
0 gr
70.5 519.5 119.5 618.5 26.5 26.5 0 rr
64 gr
62 511 112 611 26.5 26.5 4 rr
0 gr
62.5 511.5 111.5 610.5 26.5 26.5 0 rr
64 gr
504 210 554 310 26.5 26.5 4 rr
0 gr
504.5 210.5 553.5 309.5 26.5 26.5 0 rr
64 gr
496 202 546 302 26.5 26.5 4 rr
0 gr
496.5 202.5 545.5 301.5 26.5 26.5 0 rr
64 gr
620 398 671 498 26.5 26.5 4 rr
0 gr
620.5 398.5 670.5 497.5 26.5 26.5 0 rr
64 gr
612 390 663 490 26.5 26.5 4 rr
0 gr
612.5 390.5 662.5 489.5 26.5 26.5 0 rr
64 gr
506 372 556 472 26.5 26.5 4 rr
0 gr
506.5 372.5 555.5 471.5 26.5 26.5 0 rr
64 gr
496 364 546 464 26.5 26.5 4 rr
0 gr
496.5 364.5 545.5 463.5 26.5 26.5 0 rr
29 20 gm
1 setTxMode
5 fs
bu fc
{}mark T /Helvetica-Bold /|______Helvetica-Bold 0 rf
bn
24.95983 fz
bu fc
2 F /|______Helvetica-Bold fnt
bn
304.99919 ul
6.46026 0. 32 0.64602 0.(Sapphire, SunWindows:)awidthshow
30 377 gm
314.99790 ul
5.01174 0. 32 0.50117 0.(Cedar, Macintosh, NeXT:)awidthshow
9 351 gm
0 gr
400 351 lin
465 277 gm
1 setTxMode
112.00028 ul
0.63323 0. 32 0.06332 0.(NeWS, X:)awidthshow
0 0 gm
64 gr
695 282 745 382 26.5 26.5 4 rr
0 gr
695.5 282.5 744.5 381.5 26.5 26.5 0 rr
717 307 gm
1 setTxMode
0 fs
bu fc
{}mark T /Helvetica /|______Helvetica 0 rf
bn
12.47991 fz
bu fc
2 F /|______Helvetica fnt
bn
0.72566 0.(Window)ashow
733 308 gm
0.87969 0.(System)ashow
0 0 gm
64 gr
604 382 655 482 26.5 26.5 4 rr
0 gr
604.5 382.5 654.5 481.5 26.5 26.5 0 rr
64 gr
821 278 871 378 26.5 26.5 4 rr
0 gr
821.5 278.5 870.5 377.5 26.5 26.5 0 rr
843 304 gm
1 setTxMode
0.58241 0.(Graphics)ashow
859 306 gm
0.24090 0.(Package)ashow
635 412 gm
1.37582 0.(Toolkit)ashow
0 0 gm
64 gr
488 194 538 294 26.5 26.5 4 rr
0 gr
488.5 194.5 537.5 293.5 26.5 26.5 0 rr
64 gr
488 356 538 456 26.5 26.5 4 rr
0 gr
488.5 356.5 537.5 455.5 26.5 26.5 0 rr
508 210 gm
1 setTxMode
1.09716 0.(Application)ashow
524 217 gm
0.70347 0.(Programs)ashow
508 360 gm
5.06408 0. 32 0.50640 0.(User Interface)awidthshow
524 384 gm
(of W.M.)show
0 0 gm
0 gr
594 416 614 436 175 223 1 ar
538 243 gm
601 417 lin
0 0 gm
594 425 614 445 224 272 1 ar
538 407 gm
597 431 lin
0 0 gm
810 317 830 337 246 294 1 ar
748 326 gm
812 326 lin
0 0 gm
685 342 705 362 308 356 1 ar
653 430 gm
691 358 lin
0 0 gm
686 317 706 337 216 264 1 ar
539 235 gm
689 322 lin
0 0 gm
685 324 705 344 270 318 1 ar
538 404 gm
688 336 lin
399 172 gm
1 setTxMode
bu fc
{}mark T /Times-Roman /|______Times-Roman 0 rf
bn
12 fz
bu fc
2 F /|______Times-Roman fnt
bn
-0.15621 0.(\(a\))ashow
401 545 gm
(\(b\))show
909 322 gm
-0.15621 0.(\(c\))ashow
0 0 gm
64 gr
333 521 383 621 26.5 26.5 4 rr
0 gr
333.5 521.5 382.5 620.5 26.5 26.5 0 rr
64 gr
261 449 311 549 26.5 26.5 4 rr
0 gr
261.5 449.5 310.5 548.5 26.5 26.5 0 rr
355 538 gm
1 setTxMode
12.47991 fz
bu fc
2 F /|______Helvetica fnt
bn
0.58241 0.(Graphics)ashow
371 540 gm
0.24090 0.(Package)ashow
0 0 gm
64 gr
54 503 104 603 26.5 26.5 4 rr
0 gr
54.5 503.5 103.5 602.5 26.5 26.5 0 rr
74 519 gm
1 setTxMode
1.09716 0.(Application)ashow
90 526 gm
0.70347 0.(Programs)ashow
0 0 gm
0 gr
160 545 180 565 246 294 1 ar
103 554 gm
162 554 lin
0 0 gm
251 495 271 515 297 345 1 ar
256 510 gm
216 558 lin
289 479 gm
1 setTxMode
1.37582 0.(Toolkit)ashow
0 0 gm
0 gr
323 576 343 596 233 281 1 ar
216 558 gm
325 583 lin
0 0 gm
64 gr
169 459 220 658 26.5 26.5 4 rr
0 gr
169.5 459.5 219.5 657.5 26.5 26.5 0 rr
192 476 gm
1 setTxMode
0.72566 0.(Window)ashow
208 477 gm
0.87969 0.(System)ashow
192 564 gm
5.06408 0. 32 0.50640 0.(User Interface)awidthshow
208 587 gm
(of W.M.)show
199 544 gm
12 fz
bu fc
2 F /|______Times-Roman fnt
bn
(&)show
0 0 gm
64 gr
171 44 222 144 26.5 26.5 4 rr
0 gr
171.5 44.5 221.5 143.5 26.5 26.5 0 rr
64 gr
171 206 222 306 26.5 26.5 4 rr
0 gr
171.5 206.5 221.5 305.5 26.5 26.5 0 rr
191 64 gm
1 setTxMode
12.47991 fz
bu fc
2 F /|______Helvetica fnt
bn
0.58241 0.(Graphics)ashow
207 66 gm
0.24090 0.(Package)ashow
201 232 gm
1.37582 0.(Toolkit)ashow
0 0 gm
64 gr
54 125 105 225 26.5 26.5 4 rr
0 gr
54.5 125.5 104.5 224.5 26.5 26.5 0 rr
76 138 gm
1 setTxMode
1.09716 0.(Application)ashow
92 144 gm
0.70347 0.(Programs)ashow
0 0 gm
0 gr
161 246 181 266 195 243 1 ar
105 175 gm
166 249 lin
0 0 gm
296 166 316 186 202 250 1 ar
222 96 gm
300 169 lin
0 0 gm
296 166 316 186 291 339 1 ar
223 258 gm
300 181 lin
0 0 gm
161 85 181 105 297 345 1 ar
105 174 gm
166 100 lin
0 0 gm
292 166 312 186 246 294 1 ar
105 175 gm
294 175 lin
0 0 gm
64 gr
306 82 357 281 26.5 26.5 4 rr
0 gr
306.5 82.5 356.5 280.5 26.5 26.5 0 rr
329 99 gm
1 setTxMode
0.72566 0.(Window)ashow
345 100 gm
0.87969 0.(System)ashow
329 187 gm
5.06408 0. 32 0.50640 0.(User Interface)awidthshow
345 210 gm
(of W.M.)show
336 167 gm
12 fz
bu fc
2 F /|______Times-Roman fnt
bn
(&)show
0 0 gm
0 gr
321 541 341 561 179 227 1 ar
311 503 gm
328 543 lin
F T cp
%%Trailer
cd
end
%%%Pages: 1 0
%%EOF

%%EndDocument
 GE /Times-Bold SF
8200 62242 MT
(Figure 3:)SH
/Times-Roman SF
13057 XM
(Various organizations that have been used by windowing systems.  Boxes with extra)
10 W( borders)11 W
13057 63438 MT
(represent systems that can be replaced by users.  Early systems \050a\051 tightly coupled the)230 W
13057 64634 MT
(window manager and the window system, and assumed that sophisticated)
245 W( graphics and)246 W
13057 65830 MT
(toolkits would be built on top.  The next step in designs)
173 W( \050b\051 was to incorporate into the)172 W
13057 67026 MT
(windowing system the graphics and toolkits, so that the)
24 W( window manager itself could have a)25 W
13057 68222 MT
(more sophisticated look and feel, and so)
215 W( applications would be more consistent.  Other)214 W
13057 69418 MT
(systems \050c\051 allow different window managers and different)
117 W( toolkits, while still embedding)118 W
13057 70614 MT
(sophisticated graphics packages.)SH
46800 50 7200 72010 UL
ES
%%Page: 10 11
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 10 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
8200 7955 MT
(With the advent of modern windowing systems, a new model was provided:  a stream of event records)42 W
7200 9784 MT
(is sent to the window which is currently accepting input.)
103 W( The)
483 W( user can select which window is getting)104 W
7200 11613 MT
(events using various commands, described in section 5.3.  Each)
82 W( event record typically contains the type)81 W
7200 13442 MT
(and value of the event \050e.g., which key was pressed\051, the window)
219 W( that the event was directed to, a)220 W
7200 15271 MT
(timestamp, and the x and y position of the mouse.  The windowing system)
189 W( queues keyboard events,)188 W
7200 17100 MT
(mouse button)
314 W( events, and mouse movement events together \050along with other special events\051 and)315 W
7200 18929 MT
(programs must dequeue the events and process)
77 W( them.  It is somewhat surprising that, although there has)76 W
7200 20758 MT
(been substantial progress)
243 W( in the output model for windowing systems \050from BitBlt to complex 2-D)244 W
7200 22587 MT
(primitives to 3-D\051, input is still)
72 W( handled in essentially this same way today as in the original windowing)71 W
7200 24416 MT
(systems, even though there are some well-known unsolved problems with this model:)SH
/Symbol SF
9169 25994 MT
(\267)SH
/Times-Roman SF
9950 XM
(There is no provision for special stop-output \050control-S\051)
94 W( or abort \050control-C, command-dot\051)95 W
9950 27190 MT
(events, so these will be queued with the other input events.)SH
/Symbol SF
9169 29084 MT
(\267)SH
/Times-Roman SF
9950 XM
(The same event mechanism is used to pass special messages from the windowing system to)74 W
9950 30280 MT
(the application.  When)
171 W( a window gets larger or becomes uncovered, the application must)172 W
9950 31476 MT
(usually be notified so it can adjust or redraw the picture in the window.  Most)
208 W( window)207 W
9950 32672 MT
(systems communicate this by enqueuing special events into the the event stream, which)
89 W( the)90 W
9950 33868 MT
(program must then handle.)SH
/Symbol SF
9169 35762 MT
(\267)SH
/Times-Roman SF
9950 XM
(The application must always be willing to)
245 W( accept events in order to process aborts and)244 W
9950 36958 MT
(redrawing requests.  If not, then long operations cannot be aborted,)
49 W( and the screen may have)50 W
9950 38154 MT
(blank areas while they are being processed.)SH
/Symbol SF
9169 40048 MT
(\267)SH
/Times-Roman SF
9950 XM
(The model is device dependent, since the event record has fixed fields for the)
221 W( expected)220 W
9950 41244 MT
(incoming events.  If a 3-D pointing device or one)
139 W( with more than the standard number of)140 W
9950 42440 MT
(buttons was used instead of a mouse, then the standard event mechanism cannot handle it.)SH
/Symbol SF
9169 44334 MT
(\267)SH
/Times-Roman SF
9950 XM
(Because the)
218 W( events are handled asynchronously, there are many race conditions that can)217 W
9950 45530 MT
(cause programs to get out of synchronization)
3 W( with the window system.  For example, in the X)4 W
9950 46726 MT
(windowing system, if you)
3 W( press inside a window and release outside, under certain conditions)2 W
9950 47922 MT
(the program will think)
182 W( that the mouse button is still depressed.  Another example is that)183 W
9950 49118 MT
(refresh requests from the windowing system specify a rectangle of the window that needs to)57 W
9950 50314 MT
(be redrawn, but if the program is changing the contents of the window, the wrong area may)69 W
9950 51510 MT
(be redrawn by)
55 W( the time the event is processed.  This problem can occur when the window is)54 W
9950 52706 MT
(scrolled.)SH
8200 55637 MT
(Although these problems have)
52 W( been known for a long time, there has been little research on new input)53 W
7200 57466 MT
(models \050an exception is the Garnet Interactors model [51]\051.)SH
12 /Times-Bold AF
7200 61150 MT
(5.2.3 Communication)SH
11 /Times-Roman AF
8200 62979 MT
(In the X windowing system and NeWS,)
229 W( all communication between applications and the window)228 W
7200 64808 MT
(system uses inter-process communication)
126 W( through a network protocol.  This means that the application)127 W
7200 66637 MT
(program can be on a different computer)
100 W( from its windows.  In all other windowing systems, operations)99 W
7200 68466 MT
(are implemented by directly calling the window manager procedures or through special traps)
166 W( into the)167 W
7200 70295 MT
(operating system.  The primary advantage of the X mechanism is that it)
97 W( makes it easier for a person to)96 W
ES
%%Page: 11 12
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 11 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(utilize multiple machines with all their windows appearing on a single machine.  Another advantage is)114 W
7200 9784 MT
(that it is easier to provide interfaces for different programming languages: for example the)
129 W( C interface)128 W
7200 11613 MT
(\050called xlib\051 and the Lisp interface \050called)
192 W( CLX\051 send the appropriate messages through the network)193 W
7200 13442 MT
(protocol. The)
439 W( primary)
82 W( disadvantage is efficiency, since each window request will typically be encoded,)81 W
7200 15271 MT
(passed to the transport layer, and then decoded, even)
16 W( when the computation and windows are on the same)17 W
7200 17100 MT
(machine.)SH
13 /Times-Bold AF
7200 20851 MT
(5.3 User Interface Layer)SH
11 /Times-Roman AF
8200 22680 MT
(The user interface of the windowing system allows the user to control the windows.  In)
33 W( X, the user can)32 W
7200 24509 MT
(easily switch user)
200 W( interfaces, by killing one window manager and starting another.  Popular window)201 W
7200 26338 MT
(managers under X include uwm \050which has no title lines and borders\051, twm, mwm \050the Motif window)126 W
7200 28167 MT
(manager\051, and olwm)
196 W( \050the OpenLook window manager\051.  There is a standard protocol through which)197 W
7200 29996 MT
(programs and the base layer communicate to the window manager, so that all programs continue to)
90 W( run)89 W
7200 31825 MT
(without change when the)
108 W( window manager is switched.  It is possible, for example, to run applications)109 W
7200 33654 MT
(that use Motif widgets inside the windows controlled by the OpenLook window manager.)SH
8200 36585 MT
(A complete discussion of the)
235 W( options for the user interfaces of window managers was previously)234 W
7200 38414 MT
(published [47].)
SH( Also,)
523 W( the video)124 W
/Times-Italic SF
21996 XM
(All the Widgets)124 W
/Times-Roman SF
29241 XM
([52] has a 30 minute segment showing many)
124 W( different)125 W
7200 40243 MT
(forms of window manager user interfaces.)SH
8200 43174 MT
(Some parts of the user interface of a windowing system, which is sometimes called its)
8 W( ``look and feel,'')7 W
7200 45003 MT
(can apparently be copyrighted and patented.)
221 W( Which)
718 W( parts is a highly complex issue, and the status)222 W
7200 46832 MT
(changes with decisions in various court cases.  Good references for)
111 W( more information are the ``Legally)110 W
7200 48661 MT
(Speaking'' columns of)SH
/Times-Italic SF
17495 XM
(Communications of the ACM)SH
/Times-Roman SF
30573 XM
([90].)SH
12 /Times-Bold AF
7200 52345 MT
(5.3.1 Presentation)SH
11 /Times-Roman AF
8200 54174 MT
(The)SH
/Times-Italic SF
10372 XM
(presentation)SH
/Times-Roman SF
16334 XM
(of the)
187 W( windows defines how the screen looks.  One very important aspect of the)188 W
7200 56003 MT
(presentation of windows is whether they can)140 W
/Times-Italic SF
28065 XM
(overlap)SH
/Times-Roman SF
31840 XM
(or not.)
140 W( Overlapping)
554 W( windows, sometimes called)139 W
/Times-Italic SF
7200 57832 MT
(covered)SH
/Times-Roman SF
11093 XM
(windows, allow one window to be partially or totally on top of)
138 W( another window, as shown in)139 W
7200 59661 MT
(Figure 4.  This is also sometimes)
78 W( called the)77 W
/Times-Italic SF
27209 XM
(desktop metaphor)77 W
/Times-Roman SF
(, since windows can cover each other like)77 W
9 SS 
29060 61127 MT
(2)SH
11 SS 
7200 61490 MT
(pieces of paper can cover each other)
129 W( on a desk.)128 W
30316 XM
(The other alternative is called)128 W
/Times-Italic SF
44303 XM
(tiled)SH
/Times-Roman SF
46662 XM
(windows, which)128 W
7200 63319 MT
(means that windows are not allowed to cover each other.)
71 W( Figure)
418 W( 5 shows an example of tiled windows.)72 W
7200 65148 MT
(Obviously, a window manager that supports)
19 W( covered windows can also allow them to be side-by-side, but)18 W
7200 66977 MT
(not vice-versa.  Therefore, a window manager is classified as ``covered'' if)
29 W( it allows windows to overlap.)30 W
10800 50 7200 69158 UL
7 SS 
8100 70659 MT
(2)SH
9 SS 
8450 70986 MT
(There are usually other aspects to the desktop metaphor, however, such as)
93 W( presenting file operations in a way that mimics)94 W
7200 72000 MT
(office operations, as in the Star office workstation [98].)SH
ES
%%Page: 12 13
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 12 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(The tiled style was popular for awhile, and was used by Cedar)
58 W( [109],)
SH( and early versions of)
58 W( the Star)
57 W( [98],)SH
7200 9784 MT
(Andrew [82],)
SH( and Microsoft Windows.  A study even suggested that)
220 W( using tiled windows was more)221 W
7200 11613 MT
(efficient for users)
189 W( [6].)
SH( However,)
653 W( today tiled windows are rarely seen, because users)
189 W( generally prefer)188 W
7200 13442 MT
(overlapping.)SH
46800 50 7200 15593 UL
21802 35203 MT
(sorry, picture does not print from ps file)SH
/Times-Bold SF
8200 51452 MT
(Figure 4:)SH
/Times-Roman SF
13057 XM
(A screen from the Macintosh showing 3 windows covering each other, and some icons along)3 W
13057 52648 MT
(the right margin.)SH
46800 50 7200 54044 UL
8200 56791 MT
(Another important aspect of the presentation of windows is the use of)87 W
/Times-Italic SF
40157 XM
(icons)SH
/Times-Roman SF
42840 XM
(\050also shown in Figures 4)86 W
7200 58620 MT
(and 5\051.  These are small)
131 W( pictures that represent windows \050or sometimes files\051.  They are used because)132 W
7200 60449 MT
(there would otherwise be too)
19 W( many windows to conveniently fit on the screen and manage.  Other aspects)18 W
7200 62278 MT
(of the presentation)
57 W( include whether the window has a title line or not, what the background \050where there)58 W
7200 64107 MT
(are no windows\051 looks like, and whether the)
64 W( title and borders have control areas for performing window)63 W
7200 65936 MT
(operations.)SH
ES
%%Page: 13 14
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 13 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
46800 50 7200 8155 UL
11 SS 
22443 25248 MT
(sorry, picture does not print in ps file)SH
/Times-Bold SF
8200 42397 MT
(Figure 5:)SH
/Times-Roman SF
13057 XM
(A screen from the Cedar)
114 W( [109])
SH( windowing system.  Windows)
114 W( are ``tiled'' into 2 columns.)113 W
13057 43593 MT
(There is a row of icons along the)
133 W( bottom.  Each window has a fixed menu of commands)134 W
13057 44789 MT
(below the title line.)SH
46800 50 7200 46185 UL
12 /Times-Bold AF
7200 49669 MT
(5.3.2 Commands)SH
11 /Times-Roman AF
8200 51498 MT
(Since computers typically have multiple windows and only one mouse and keyboard, there must be a)84 W
7200 53327 MT
(way for the)
49 W( user to control which window is getting keyboard input.  This window is called the)48 W
/Times-Italic SF
50133 XM
(input)SH
/Times-Roman SF
52718 XM
(\050or)SH
/Times-Italic SF
7200 55156 MT
(keyboard)SH
/Times-Roman SF
(\051)SH
/Times-Italic SF
12071 XM
(focus)SH
/Times-Roman SF
(. Another)
551 W( term)
138 W( is the)139 W
/Times-Italic SF
24847 XM
(listener)SH
/Times-Roman SF
28561 XM
(since it is listening to the user's typing.  Some systems)139 W
7200 56985 MT
(called the focus the)
102 W( ``active window'' or ``current window,'' but these are poor terms since in a multi-)101 W
7200 58814 MT
(processing system, many windows can be actively)
165 W( outputting information at the same time.  Window)166 W
7200 60643 MT
(managers provide various ways to specify and show which window is the)
90 W( listener.  The most important)89 W
7200 62472 MT
(options are:)SH
/Symbol SF
9169 64050 MT
(\267)SH
/Times-Italic SF
9950 XM
(click-to-type)SH
/Times-Roman SF
(, which means that the user must click the mouse button in a window)
168 W( before)169 W
9950 65246 MT
(typing to it.  This is used by the Macintosh.)SH
/Symbol SF
9169 67140 MT
(\267)SH
/Times-Italic SF
9950 XM
(move-to-type)SH
/Times-Roman SF
(, which)
66 W( means that the mouse only has to move over a window to allow typing)65 W
9950 68336 MT
(to it.)
9 W( This)
295 W( is usually faster for the user, but may cause input to go to the wrong window if the)10 W
9950 69532 MT
(user accidentally knocks the mouse.)SH
7200 71361 MT
(Most X window)
206 W( managers \050including the Motif and OpenLook window managers\051 allow the user to)205 W
ES
%%Page: 14 15
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 14 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(choose which)
5 W( method is desired.  However, the choice can have significant impact on the user interface of)6 W
7200 9784 MT
(applications. For)
289 W( example, because the Macintosh requires click-to-type, it can provide a single)
7 W( menu-bar)6 W
7200 11613 MT
(at the)
64 W( top, and the commands can always operate on the focussed window.  With move-to-type, the user)65 W
7200 13442 MT
(might have to pass through various windows \050thus giving them the focus\051 on the)
111 W( way to the top of the)110 W
7200 15271 MT
(screen. Therefore,)
359 W( Motif applications must have a menubar in each window so)
42 W( the commands will know)43 W
7200 17100 MT
(which window to operate on.)SH
8200 20031 MT
(All covered window systems allow the user to)
91 W( change which window is on top \050not covered by other)90 W
7200 21860 MT
(windows\051, and usually to send a)
19 W( window to the bottom \050covered by all other windows\051.  Other commands)20 W
7200 23689 MT
(allow windows to be changed size, moved, created and destroyed.)SH
14 /Times-Bold AF
7200 28227 MT
(6. Toolkits)SH
11 /Times-Roman AF
8200 30056 MT
(A)SH
/Times-Italic SF
9359 XM
(toolkit)SH
/Times-Roman SF
12536 XM
(is a)
90 W( library of ``widgets'' that can be called by application programs.  A)89 W
/Times-Italic SF
45640 XM
(widget)SH
/Times-Roman SF
48938 XM
(is a way of)89 W
7200 31885 MT
(using a physical input device to input a certain type of value.  Typically,)
181 W( widgets in toolkits include)182 W
7200 33714 MT
(menus, buttons, scroll bars, text type-in)
49 W( fields, etc.  Figure 6 shows some examples of widgets.  Creating)48 W
7200 35543 MT
(an interface using a)
116 W( toolkit can only be done by programmers, because toolkits only have a procedural)117 W
7200 37372 MT
(interface.)SH
8200 40303 MT
(Using a toolkit has the advantage that the final UI will look and act similarly to other UIs)
23 W( created using)22 W
7200 42132 MT
(the same toolkit, and each application does not)
25 W( have to re-write the standard functions, such as menus.  A)26 W
7200 43961 MT
(problem with toolkits is that the styles of interaction are limited to those provided.  For example,)
132 W( it is)131 W
7200 45790 MT
(difficult to create a single slider that contains two indicators, which might)
8 W( be useful to input the upper and)9 W
7200 47619 MT
(lower bounds of a range.  In)
222 W( addition, the toolkits themselves are often expensive to create:  ``The)221 W
7200 49448 MT
(primitives never seem complex in principle, but the programs that implement them)
244 W( are surprisingly)245 W
7200 51277 MT
(intricate'' [13,)
SH( p.199].  Another problem with toolkits is that they are often difficult)
20 W( to use since they may)19 W
7200 53106 MT
(contain hundreds of procedures,)
127 W( and it is often not clear how to use the procedures to create a desired)128 W
7200 54935 MT
(interface. For)
487 W( example, the documentation for the Macintosh Toolbox now covers six books, of which)106 W
7200 56764 MT
(about 1/3 is related to user interface programming.)SH
8200 59695 MT
(As with the graphics package, the toolkit can)
252 W( be implemented either using or being used by the)253 W
7200 61524 MT
(windowing system \050see Figure 3\051.  Early systems)
48 W( provided only minimal widgets \050e.g., just a menu\051, and)47 W
7200 63353 MT
(expected applications to provide others.  In the Macintosh, the toolkit is at a low level, and the)
83 W( window)84 W
7200 65182 MT
(manager user interface is built using it.)
78 W( The)
430 W( advantage of this is that the window manager can then use)77 W
7200 67011 MT
(the same sophisticated toolkit routines for its user interface.  When)
99 W( the X system was being developed,)100 W
7200 68840 MT
(the developers could not agree on a single toolkit, so they left)
72 W( the toolkit to be on top of the windowing)71 W
7200 70669 MT
(system. In)
707 W( X, programmers can use a variety of toolkits \050for)
216 W( example, the xt)
217 W( [44],)
SH( InterViews)
217 W( [42],)SH
ES
%%Page: 15 16
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 15 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
46800 50 7200 8155 UL
11 SS 
8 10 0 6120 58152 GB 
%%BeginDocument: demo-motif.PS
%!PS-Adobe-2.0
%%Title: Demo-Motif
%%Creator: Make-PS-File -- Garnet Version 1.4
%%CreationDate: Oct 15, 1991, 1:50 PM
%%For: 
%%DocumentFonts: (atend)
%%BoundingBox: 72 176 540 615
%%%Pages: 1
%%EndComments


/BitmapDict 9 dict def
/DrawBitmap
   {    % stack: left top width height pattern transparent-p
        %        red green blue color-p
        BitmapDict begin
        /picstr 256 string def
        /color-p exch def  /blue exch def  /green exch def /red exch def
        /transparent-p exch def
        /pattern exch def  /height exch def  /width exch def
        gsave
          translate
          width height scale
          color-p {red green blue setrgbcolor} if
          transparent-p
          % The case where the background is not drawn
          { width height false
            [ width 0 0 height 0 height ]
            {pattern} imagemask }
          % The case where the background is drawn
          { width height 1
            [ width 0 0 height 0 height ]
            {pattern} image } ifelse
        grestore
        end
   } def

/ArcDict 22 dict def
ArcDict /mtrx matrix put
/DrawArc
   {
        ArcDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /endangle exch def
        /startangle exch def  /yrad exch def  /xrad exch def  /y exch def
        /x exch def  /savematrix mtrx currentmatrix def
        newpath
          x y translate
          xrad yrad scale
          % Fill the arc
          newpath
            0 0 moveto  0 0 1 startangle endangle arc  closepath
            fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          % Draw the border
          newpath
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-halftone line-red line-green line-blue line-color-p
            line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/DrawLine
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        %        x2, y2, x1, y1
        newpath
          moveto
          lineto
          StrokeShape
   } def

/PolylineDict 15 dict def
/DrawPolyline
   {    % stack: x1, y1, ..., xn, yn, n, line-halftone, line-red, line-blue,
        %        line-green, line-join, line-cap, dash-pattern,
        %        line-thickness, fill-halftone
        PolylineDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def  /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /num-points exch 4 sub def
        newpath
          moveto
          num-points -2 0 {pop lineto} for
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/TextDict 19 dict def
/DrawText
   {    % stack: left top base-y opal-width height line-halftone fill-p
        %        fore-red fore-green fore-blue fore-color-p
        %        back-red back-green back-blue back-color-p
        %        string size font-name
        TextDict begin
        gsave
        findfont exch scalefont setfont
        /s exch def
        /back-color-p exch def  /back-blue exch def  /back-green exch def
        /back-red exch def  /fore-color-p exch def  /fore-blue exch def
        /fore-green exch def  /fore-red exch def  /fill-p exch def
        /line-halftone exch def /height exch def  /opal-width exch def
        /base-y exch def  /top exch def  /left exch def

        % Calculate distance to add between each character, based on the width
        % expected by Opal, the width expected by postscript, and the number
        % of characters to distribute the change over
        /x-dist opal-width s stringwidth pop sub s length div def

        % Draw background of text if appropriate
        fill-p
        { gsave
            newpath
            left top opal-width height RectanglePath
            1 back-red back-green back-blue back-color-p
            FillShape
          grestore } if

        % Draw text in the appropriate color
        newpath
          fore-color-p
          { fore-red fore-green fore-blue setrgbcolor }
          { line-halftone setgray } ifelse
          left base-y moveto
          x-dist 0 s ashow
        grestore
        end
   } def

/RectanglePath
   {    % stack: left, top, width, height
        /h exch def  /w exch def
        moveto                  % Go to the left,top corner
        w 0 rlineto             % top side
        0 h neg rlineto         % right side
        w neg 0 rlineto         % bottom side
        closepath               % left side
   } def

/RectangleDict 21 dict def
/DrawRectangle
   {    % stack: left, top, width, height, line-halftone, line-red, line-green,
        %        line-blue, line-color-p,
        %        line-cap, line-join, dash-pattern, line-thickness,
        %        fill-halftone, fill-red, fill-green, fill-blue, fill-color-p
        RectangleDict begin
        /fill-color-p exch def  /fill-blue exch def  /fill-green exch def
        /fill-red exch def /fill-halftone exch def  /lt exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color-p exch def  /line-blue exch def  /line-green exch def
        /line-red exch def  /line-halftone exch def  /height exch def
        /width exch def  /top exch def  /left exch def  /lt-by-2 lt 2 div def
        % Draw filling
        newpath
          left lt-by-2 add  top lt-by-2 sub   width lt sub  height lt sub
          RectanglePath
          fill-halftone fill-red fill-green fill-blue fill-color-p FillShape
        % Draw border
        newpath
          left top width height RectanglePath
          line-halftone line-red line-green line-blue line-color-p
          line-cap line-join dash-pattern lt StrokeShape
        end
   } def

/ClipDict 2 dict def
/ClipToRectangle
   {    % stack: left, top, width, height
        ClipDict begin
        /height exch def  /width exch def
        newpath
          moveto                % Go to the left,top corner
          width 0 rlineto       % top side
          0 height neg rlineto  % right side
          width neg 0 rlineto   % bottom side
          closepath             % left side
        gsave 1 setgray fill grestore
        clip newpath
        end
   } def

/FillShape
   {    % stack: fill-halftone, red, green, blue, color-p
        %   Color-p should be true or false - false means ignore the three vals
        %   Use -1 for fill-halftone to mean NIL, 0 = black, 1 = white
        %   Use -2 for fill-halftone to indicate there is an arbitrary filling
        % style on the stack
        gsave
        { setrgbcolor fill pop }
        { pop pop pop 
          dup 0 ge
            % if fill-halftone >= 0, then fill the shape with a halftone
            { setgray fill}
            % else, if there is an arbitrary filling style, then fill
            { -2 eq
              {SetPattern fill} if
            } ifelse } ifelse
        grestore
   } def

/StrokeShape
   {    % stack: line-halftone, red, green, blue, color-p,
        %        line-cap, line-join, dash-pattern, line-thickness
        % If no line is desired, pass -1 for line-thickness
        % Halftones: 0 = black, 1 = white
        dup 0 ge
          % if line-thickness >= 0, then draw the outline
          {gsave
           setlinewidth 0 setdash setlinejoin setlinecap
             { setrgbcolor pop }
             { pop pop pop setgray } ifelse
           stroke
           grestore}
          {pop pop pop pop pop pop pop pop pop newpath} ifelse
   } def

/image-2
<ffff ff3f ff3f fe7f ee7f e4ff e0ff e01f e03f e07f e0ff e1ff e3ff e7ff efff
ffff>
def

/image-1
<ff3f fe1f fe1f cc3f c43f c07f c00f c00f c01f c03f c07f c0ff c1ff c3ff c7ff
cfff>
def


%%EndProlog
%%%Page: 1 1

72 72 translate
0.98 0.98 scale

%
% Begin new window
%
0 -108 translate
gsave
0 665 480 450 ClipToRectangle
0 0 translate
gsave
0 665 480 450 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
133 512 12 12 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
135 510 10 10 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
135 510 8 8 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
150 513 502 21 14 0 false 0 0 0 false 0 0 0 false (Red) 12 /Courier DrawText
133 489 12 12 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
135 487 10 10 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
135 487 8 8 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
150 490 479 34 14 0 false 0 0 0 false 0 0 0 false (Green) 12 /Courier DrawText
133 466 12 12 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
135 464 10 10 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
135 464 8 8 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
150 467 456 27 14 0 false 0 0 0 false 0 0 0 false (Blue) 12 /Courier DrawText
131 514 57 16 0 0 0 0 false 0 0 [] 2 -1 0 0 0 false DrawRectangle
10 420 95 25 0 0 0 0 false 0 0 [] 1 0.0 0.87 0.64 0.87 true DrawRectangle
133 611 139 617 145 611 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
133 611 139 605 145 611 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawPolyline
150 618 607 27 14 0 false 0 0 0 false 0 0 0 false (Gray) 12 /Courier DrawText
133 589 139 595 145 589 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
133 589 139 583 145 589 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
150 596 585 40 14 0 false 0 0 0 false 0 0 0 false (Orange) 12 /Courier DrawText
133 567 139 573 145 567 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
133 567 139 561 145 567 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
150 574 563 34 14 0 false 0 0 0 false 0 0 0 false (Green) 12 /Courier DrawText
133 545 139 551 145 545 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
133 545 139 539 145 545 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
150 552 541 27 14 0 false 0 0 0 false 0 0 0 false (Blue) 12 /Courier DrawText
10 655 25 25 0 0 0 0 false 0 0 [] 1 0.0 0.87 0.00 0.00 true DrawRectangle
45 655 25 25 0 0 0 0 false 0 0 [] 1 0.0 0.00 0.64 0.00 true DrawRectangle
80 655 25 25 0 0 0 0 false 0 0 [] 1 0.0 0.00 0.00 0.87 true DrawRectangle
16 623 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
18 621 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
18 621 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
18 597 12 82 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
20 595 10 80 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
20 595 8 78 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
24 620 28 610 19 610 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 19 610 24 620 DrawLine
24 432 19 442 29 442 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 0.46 0.46 0.46 true 0 0 [] 2 24 432 29 442 DrawLine
86 623 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
88 621 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
88 621 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
88 597 12 82 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
90 595 10 80 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
90 595 8 78 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
94 620 98 610 89 610 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 89 610 94 620 DrawLine
94 432 89 442 99 442 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 0.46 0.46 0.46 true 0 0 [] 2 94 432 99 442 DrawLine
51 623 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
53 621 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
53 621 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
53 579 12 82 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
55 577 10 80 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
55 577 8 78 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
59 620 63 610 54 610 6 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 1.00 1.00 1.00 true 0 0 [] 2 54 610 59 620 DrawLine
59 432 54 442 64 442 6 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
0 0.46 0.46 0.46 true 0 0 [] 2 59 432 64 442 DrawLine
243 655 25 25 0 0 0 0 false 0 0 [] 1 0.0 0.46 0.46 0.46 true DrawRectangle
248 623 16 196 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
250 621 14 194 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
250 621 12 192 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
250 530 12 48 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
252 528 10 46 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
252 528 8 44 0 0 0 0 false 0 0 [] -1 0.0 0 0 0 false DrawRectangle
0 1.00 1.00 1.00 true 0 0 [] 2 260 506 252 506 DrawLine
0 0.46 0.46 0.46 true 0 0 [] 2 260 504 252 504 DrawLine
230 513 502 13 14 0 false 0 0 0 false 0 0 0 false (55) 12 /Courier DrawText
132 418 73 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
134 416 71 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
134 416 69 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
137 415 404 63 14 0 false 0 0 0 false 0 0 0 false (Highlight) 12 /Courier DrawText
214 418 80 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
216 416 78 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
216 416 76 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
219 415 404 70 14 0 false 0 0 0 false 0 0 0 false (Foreground) 12 /Courier DrawText
303 418 80 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
305 416 78 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
305 416 76 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
308 415 404 70 14 0 false 0 0 0 false 0 0 0 false (Background) 12 /Courier DrawText
392 418 51 20 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
394 416 49 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
394 416 47 16 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
397 415 404 41 14 0 false 0 0 0 false 0 0 0 false (Shadow) 12 /Courier DrawText
300 645 121 202 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
302 643 119 200 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
302 643 117 198 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
304 553 113 18 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
306 551 111 16 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
306 551 109 14 0 0 0 0 false 0 0 [] -1 0.0 0.83 0.83 0.83 true DrawRectangle
308 639 628 62 14 0 false 0 0 0 false 0 0 0 false (Navy Blue) 12 /Courier DrawText
398 639 628 13 14 0 false 0 0 0 false 0 0 0 false (F2) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 315 626 308 626 DrawLine
308 617 606 27 14 0 false 0 0 0 false 0 0 0 false (Gold) 12 /Courier DrawText
398 617 606 13 14 0 false 0 0 0 false 0 0 0 false (F3) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 322 604 315 604 DrawLine
308 595 584 42 14 0 false 0 0 0 false 0 0 0 false (Violet) 12 /Courier DrawText
398 595 584 13 14 0 false 0 0 0 false 0 0 0 false (F4) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 315 582 308 582 DrawLine
308 573 562 62 14 0 false 0 0 0 false 0 0 0 false (Turquoise) 12 /Courier DrawText
398 573 562 13 14 0 false 0 0 0 false 0 0 0 false (F5) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 315 560 308 560 DrawLine
308 551 540 28 14 0 false 0 0 0 false 0 0 0 false (Plum) 12 /Courier DrawText
398 551 540 13 14 0 false 0 0 0 false 0 0 0 false (F6) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 315 538 308 538 DrawLine
308 529 518 41 14 0 false 0 0 0 false 0 0 0 false (Sienna) 12 /Courier DrawText
398 529 518 13 14 0 false 0 0 0 false 0 0 0 false (F7) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 315 516 308 516 DrawLine
308 507 496 70 14 0 false 0 0 0 false 0 0 0 false (Motif-Gray) 12 /Courier DrawText
398 507 496 13 14 0 false 0 0 0 false 0 0 0 false (F8) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 357 494 350 494 DrawLine
308 485 474 77 14 0 false 0 0 0 false 0 0 0 false (Motif-Green) 12 /Courier DrawText
398 485 474 13 14 0 false 0 0 0 false 0 0 0 false (F9) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 364 472 357 472 DrawLine
308 463 452 69 14 0 false 0 0 0 false 0 0 0 false (Motif-Blue) 12 /Courier DrawText
391 463 452 20 14 0 false 0 0 0 false 0 0 0 false (F10) 12 /Courier DrawText
0 0 0 0 false 0 0 [] 1 357 450 350 450 DrawLine
0 0.46 0.46 0.46 true 0 0 [] 1 417 511 304 511 DrawLine
0 1.00 1.00 1.00 true 0 0 [] 1 417 510 304 510 DrawLine
282 361 350 39 14 0 false 0 0 0 false 0 0 0 false (Title:) 12 /Courier-Bold DrawText
326 363 122 18 0 0 0 0 false 0 0 [] -1 0.0 0.46 0.46 0.46 true DrawRectangle
328 361 120 16 0 0 0 0 false 0 0 [] -1 0.0 1.00 1.00 1.00 true DrawRectangle
328 361 118 14 0 0 0 0 false 0 0 [] -1 0.0 0.70 0.70 0.70 true DrawRectangle
331 361 350 76 14 0 false 0 0 0 false 0 0 0 false (Motif Gauge) 12 /Courier DrawText
0 1.00 1.00 1.00 true 0 0 [] 2 237 268 45 268 DrawLine
141.0 268.0 96.0 96.0 0 180 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.70 0.70 0.70 true DrawArc
0 0 0 0 false 0 0 [] 1 232 268 237 268 DrawLine
242 279 270 4 11 0 false 0 0 0 false 0 0 0 false (0) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 227 299 231 301 DrawLine
236 312 303 10 11 0 false 0 0 0 false 0 0 0 false (20) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 211 327 215 330 DrawLine
220 341 332 11 11 0 false 0 0 0 false 0 0 0 false (40) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 187 347 189 351 DrawLine
194 362 353 10 11 0 false 0 0 0 false 0 0 0 false (60) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 157 358 158 363 DrawLine
153 377 368 10 11 0 false 0 0 0 false 0 0 0 false (80) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 125 358 124 363 DrawLine
116 377 368 16 11 0 false 0 0 0 false 0 0 0 false (100) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 95 347 93 351 DrawLine
72 362 353 16 11 0 false 0 0 0 false 0 0 0 false (120) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 71 327 67 330 DrawLine
46 341 332 16 11 0 false 0 0 0 false 0 0 0 false (140) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 55 299 51 301 DrawLine
30 312 303 16 11 0 false 0 0 0 false 0 0 0 false (160) 10 /Courier DrawText
0 0 0 0 false 0 0 [] 1 50 268 45 268 DrawLine
24 279 270 16 11 0 false 0 0 0 false 0 0 0 false (180) 10 /Courier DrawText
141 268 145 265 174 315 179 311 179 335 10 0 0.46 0.46 0.46 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
179 335 159 323 166 320 137 271 141 268 10 0 1.00 1.00 1.00 true 0 0 [] 2 0.0 0.83 0.83 0.83 true DrawPolyline
103 263 252 76 14 0 false 0 0 0 false 0 0 0 false (Motif Gauge) 12 /Courier DrawText
121 245 234 40 14 0 false 0 0 0 false 0 0 0 false (60.000) 12 /Courier DrawText
360 540 16 16 image-1 true 1.00 1.00 1.00 true DrawBitmap
360 540 16 16 image-2 true 0 0 0 false DrawBitmap
grestore

grestore

0 665 480 450 0 0 0 0 false 0 0 [] 1 -1 0 0 0 false DrawRectangle

showpage
%%Trailer
%%DocumentFonts: /Courier-Bold /Courier 

%%EndDocument
 GE /Times-Bold SF
8200 45824 MT
(Figure 6:)SH
/Times-Roman SF
13057 XM
(Some of the widgets with a Motif look-and-feel provided by the Garnet toolkit.)SH
46800 50 7200 47220 UL
7200 49967 MT
(Garnet [53])
SH( or tk)
18 W( [80])
SH( toolkits can be used on top of X\051, but the window manager must)
18 W( usually implement)17 W
7200 51796 MT
(its user interface from scratch.)SH
8200 54727 MT
(Because the designers of X could not agree on a single look-and-feel,)
6 W( they created an)7 W
/Times-Italic SF
46042 XM
(intrinsics)SH
/Times-Roman SF
50420 XM
(layer on)7 W
7200 56556 MT
(which to build different widget sets, which they called xt)
31 W( [44].)
SH( This)
336 W( layer provides the common services,)30 W
7200 58385 MT
(such as techniques for object-oriented programming and layout control.  The)216 W
/Times-Italic SF
43604 XM
(widget set)216 W
/Times-Roman SF
48742 XM
(layer is the)216 W
7200 60214 MT
(collection of widgets that is implemented using the intrinsics.  Multiple widget sets with different)
85 W( looks)84 W
7200 62043 MT
(and feels can be implemented on top of the same intrinsics layer \050Figure 7-a\051, or else)
46 W( the same look-and-)47 W
7200 63872 MT
(feel can be implemented on top of different intrinsics \050Figure 7-b\051.  Recently, Sun announced)
56 W( that it was)55 W
7200 65701 MT
(phasing out OpenLook, which means that X and xt will be standardized on the Motif widget set.)SH
ES
%%Page: 16 17
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 16 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
46800 50 7200 8155 UL
11 SS 
10 10 0 0 55381 GB 
%%BeginDocument: toolkitparts.PS
%!PS-Adobe-2.0 EPSF-2.0
%%Title: Opal 13
%%Creator: Make-PS-File -- Garnet Version 2.2
%%CreationDate: Aug 30, 1993, 12:37 PM
%%For: 
%%This file does not use real color
%%DocumentFonts: (atend)
%%BoundingBox: 72 346 540 446
%%%Pages: 1
%%EndComments


/PolylineDict 20 dict def
/DrawPolyline { % x1 y1 {{x y ...} ...} line-color
                % join cap dash thickness fill-color => -
    gsave PolylineDict begin
        /fill-color exch def  /thickness exch def  /dash-pattern exch def
        /line-join exch def  /line-cap exch def  /line-color exch def
        % Don't draw the path of the fill if the filling-style is null.
        fill-color null eq not {
                3 copy
                newpath
                3 1 roll moveto
                { aload length 2 idiv { lineto } repeat } forall
                fill-color FillShape
                } if

        newpath
        .5 -.5 translate

        % Stroke after every sub-array to avoid a limitcheck error
        2 index 2 index moveto
        { aload length 2 sub 2 idiv { lineto } repeat
        2 copy lineto
        line-color line-cap line-join dash-pattern thickness StrokeShape
        moveto
        } forall

        currentpoint
        3 -1 roll sub abs .01 lt
        3 1 roll sub abs .01 lt and {
          0 0 rlineto closepath
        } if

        line-color line-cap line-join dash-pattern
        thickness
%       dup -1 ne { .5 add } if % fudge outline width thicker
        StrokeShape

    end grestore
} def

/RoundtanglePath { % left top width height radius => -
    /r exch def  /h exch def  /w exch def  /t exch def  /l exch def
    /right l w add def  /bottom t h sub def
    l r add t moveto                         % origin
    right t right t r sub r arcto            % top side
    right bottom right r sub bottom r arcto  % right side
    l bottom l bottom r add r arcto          % bottom side
    l t l r add t r arcto                    % left side
    16 {pop} repeat  % each arcto accumulates 4 stack parameters
} def

/RoundtangleDict 27 dict def
/DrawRoundtangle { % left top width height radius line-color
                   % cap join dash thickness fill-color => -
    gsave RoundtangleDict begin
        /fill-color exch def  /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /radius exch def
        /height exch def  /width exch def  /top exch def  /left exch def
        
        % Draw filling
        newpath
        left thickness add top thickness sub
        width thickness 2 mul sub height thickness 2 mul sub
        radius thickness sub dup 0 lt { pop 0 } if RoundtanglePath
        fill-color FillShape

        left thickness 2 div add top thickness 2 div sub
        width thickness sub height thickness sub
        radius thickness 2 div sub dup 0 lt { pop 0 } if RoundtanglePath

        % Draw border
        line-color line-cap line-join dash-pattern thickness
        StrokeShape
    end grestore
} def


/EllipseDict 23 dict def
EllipseDict /mtrx matrix put
/DrawEllipse { % x y xrad yrad startangle endangle line-color
               % cap join dash thickness fill-color => -
    EllipseDict begin
        /fill-color exch def /thickness exch def
        /dash-pattern exch def  /line-join exch def  /line-cap exch def
        /line-color exch def  /endangle exch def /startangle exch def
        /yrad exch def  /xrad exch def /y exch def /x exch def
        /savematrix mtrx currentmatrix def
        % Draw the filling
        gsave
            newpath
            x y translate
            xrad thickness sub yrad thickness sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            fill-color FillShape
            newpath
            x y translate
            xrad thickness 2 div sub yrad thickness 2 div sub scale
            0 0 1 startangle endangle arc
            savematrix setmatrix
            line-color
            0 % line-cap
            line-join dash-pattern thickness
            StrokeShape
        grestore
    end
} def

/TextDict 40 dict def
/DrawText { % left top base-y opal-width height fill-p
            % fore-color back-color string size font-name => -
    TextDict begin
        gsave
            findfont exch scalefont setfont
            /s exch def
            /back-color exch def /fore-color exch def /fill-p exch def
            /height exch def  /opal-width exch def
            /base-y exch def  /top exch def
            /left exch 1 sub def % XXX: I don't know why!

            % Calculate distance to add between each character, based on the 
            % width expected by Opal, the width expected by postscript, and 
            % the number of characters to distribute the change over.
            /x-dist opal-width s stringwidth pop sub s length div def

            % Draw background of text if appropriate
            fill-p {
                gsave
                    newpath
                    left top opal-width height RectanglePath
                    back-color FillShape
                grestore
            } if

            % Draw text in the appropriate color
            newpath
            s length 0 ne {
                left base-y moveto
                fore-color aload length 3 eq {
                    setrgbcolor
                    x-dist 0 s ashow
                } { % Halftone pattern:
                    %   fgR fgG fgB bgR bgG bgB top pattern
                    %   fgR fgG fgB false top pattern
                    /pattern exch def /top exch def /opaque? exch def
                    opaque? not { .5 .5 .5 } if
                    /bgB exch def /bgG exch def /bgR exch def
                    /fgB exch def /fgG exch def /fgR exch def

                    fgR bgR add 2 div
                    fgG bgG add 2 div
                    fgB bgB add 2 div
                    setrgbcolor

                    opaque? {
                        x-dist 0 s ashow
                    } {
                        mark
                        /ch 1 string def
                        /space { /space { x-dist 0 rmoveto } def } def
%                       /jt statusdict begin jobtimeout end def
                        gsave { % try really hard to do it right
                            s {
                                % don't take more than 2 seconds a character
%                               statusdict begin 2 setjobtimeout end
                                space
                                ch 0 3 -1 roll put
                                ch true charpath
                                currentpoint /yy exch def /xx exch def
                                fgR fgG fgB false top pattern FillPattern
                                newpath xx yy moveto
                            } forall
                        } stopped grestore { % fall back in case we fail
                            x-dist 0 s ashow
                        } if
%                       statusdict begin jt setjobtimeout end
                        cleartomark
                    } ifelse
                } ifelse
            } if
        grestore
    end
} def

/AdjustLineDict 20 dict def
/AdjustLine { % x1 y1 x2 y2 width => x1 y1 x2 y2
  AdjustLineDict begin
    /width exch cvi def
    /hw width 2 div def
    /oddwidth? width 1 and 1 eq def
    /y2 exch def /x2 exch def /y1 exch def /x1 exch def
    /dx x2 x1 sub def /dy y2 y1 sub def
    dy 0 eq {
      dx 0 eq {
        % point
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } {
        % horizontal
        oddwidth? {
          /y1 y1 .5 sub def
          /y2 y2 .5 sub def
        } if
      } ifelse
    } {
      dx 0 eq {
        % vertical
        oddwidth? {
          /x1 x1 .5 add def
          /x2 x2 .5 add def
        } if
      } {
        % diagonal
        oddwidth? {
          /x1 x1 .5 add def /y1 y1 .5 sub def
          /x2 x2 .5 add def /y2 y2 .5 sub def
        } if
      } ifelse
    } ifelse
    x1 y1 x2 y2
  end
} def

/DrawLineDict 20 dict def
/DrawLine { % line-color cap join dash thickness x2 y2 x1 y1 => -
    gsave DrawLineDict begin
        4 index AdjustLine
        moveto lineto
        StrokeShape
    end grestore
} def

/RectanglePath { % left top width height => -
    /h exch def  /w exch def
    moveto                      % Go to the left,top corner
    w 0 rlineto                 % top side
    0 h neg rlineto             % right side
    w neg 0 rlineto             % bottom side
    closepath                   % left side
} def

/RectangleDict 21 dict def
/DrawRectangle { % left top width height line-color
                 % cap join dash thickness fill-color => -
    RectangleDict begin
        /fill-color exch def  /thickness exch def /dash-pattern exch def
        /line-join exch def  /line-cap exch def /line-color exch def
        /height exch def /width exch def  /top exch def  /left exch def
        /thickness-for-fill thickness 0 lt {0} {thickness} ifelse def
        % Draw filling
        newpath
        left thickness-for-fill add top thickness-for-fill sub
        width thickness-for-fill 2 mul sub height thickness-for-fill 2 mul sub
        RectanglePath
        fill-color FillShape
        % Draw border
        newpath
        left thickness 2 div add  top thickness 2 div sub
        width thickness sub  height thickness sub
        RectanglePath
        line-color line-cap line-join dash-pattern thickness StrokeShape
    end
} def

/FillShape { % [halftone] | [r g b] | null => -
    gsave
        dup null eq { pop } {
          aload length 3 eq { setrgbcolor fill } {
              FillPattern
          } ifelse
        } ifelse
    grestore
    newpath
} def

/StrokeShape { % line-color cap join dash thickness => -
    % If no line is desired, pass -1 for line-thickness
    dup 0 ge 5 index null ne and {
        % if line-thickness >= 0, then draw the outline
        gsave
            setlinewidth 0 setdash setlinejoin setlinecap
            aload length 3 eq { setrgbcolor stroke } {
                strokepath FillPattern
            } ifelse
        grestore
    } {
        pop pop pop pop pop
    } ifelse
    newpath
} def

/ClipDict 2 dict def
/ClipToRectangle { % left top width height => -
    ClipDict begin
        /height exch def  /width exch def
        newpath
            moveto                      % Go to the left,top corner
            width 0 rlineto             % top side
            0 height neg rlineto        % right side
            width neg 0 rlineto         % bottom side
            closepath                   % left side
        gsave 1 setgray fill grestore
        clip newpath
    end
} def


%%EndProlog
%%%Page: 1 1

gsave
72 72 translate
0.77 0.77 scale
0 487 translate

%
% Begin new window
%
gsave
0 0 610 130 ClipToRectangle
gsave
0 0 610 130 [0 0 0] 0 0 [] -1 [1 1 1] DrawRectangle
grestore


%
% Begin new window
%
gsave
0 0 translate
0 0 610 130 ClipToRectangle
gsave
523 -42 81 81 [0 0 0] 0 0 [] 1 null DrawRectangle
383 -42 121 81 [0 0 0] 0 0 [] 1 null DrawRectangle
2 -2 241 61 [0 0 0] 0 0 [] 1 null DrawRectangle
[0 0 0] 0 0 [] 1 82 -62 82 -2 DrawLine
[0 0 0] 0 0 [] 1 162 -62 162 -2 DrawLine
2 -62 241 61 [0 0 0] 0 0 [] 1 null DrawRectangle
56 -81 -103 132 28 false [0 0 0] [1 1 1] (Xt Intrinsics) 24 /Times-Bold DrawText
4 -17 -39 150 28 false [0 0 0] [1 1 1] (Athena  Motif) 24 /Times-Bold DrawText
166 -3 -25 70 28 false [0 0 0] [1 1 1] (Open-) 24 /Times-Bold DrawText
166 -31 -53 62 28 false [0 0 0] [1 1 1] ( Look) 24 /Times-Bold DrawText
303 -42 61 81 [0 0 0] 0 0 [] 1 null DrawRectangle
303 -42 -64 59 28 false [0 0 0] [1 1 1] (Motif) 24 /Times-Bold DrawText
318 -86 -108 25 28 false [0 0 0] [1 1 1] (Xt) 24 /Times-Bold DrawText
417 -42 -64 59 28 false [0 0 0] [1 1 1] (Motif) 24 /Times-Bold DrawText
534 -42 -64 59 28 false [0 0 0] [1 1 1] (Motif) 24 /Times-Bold DrawText
390 -86 -108 109 28 false [0 0 0] [1 1 1] (Interviews) 24 /Times-Bold DrawText
526 -86 -108 74 28 false [0 0 0] [1 1 1] (Garnet) 24 /Times-Bold DrawText
[0 0 0] 0 0 [] 1 363 -82 303 -82 DrawLine
[0 0 0] 0 0 [] 1 503 -82 383 -82 DrawLine
[0 0 0] 0 0 [] 1 603 -82 523 -82 DrawLine
0.0 0.0 0.0 0.0 0 360 [0 0 0] 0 0 [4 4] 1 null DrawEllipse
[0 0 0] 0 0 [4 4] 1 0 0 0 0 DrawLine
0 0 {
  { 0 0 0 0 0 0 }
} [0 0 0] 0 0 [4 4] 1 null DrawPolyline
[0 0 0] 0 0 [4 4] 1 0 0 0 0 DrawLine
0 0 {
  { 0 0 0 0 0 0 }
} [0 0 0] 0 0 [4 4] 1 null DrawPolyline
0 0 {
  { 0 0 0 0 0 0 }
} [0 0 0] 0 0 [4 4] 1 null DrawPolyline
grestore

grestore

grestore

grestore


showpage
%%Trailer
%%DocumentFonts: /Times-Bold 
%%BoundingBox: 72 346 540 446

%%EndDocument
 GE 16200 22533 MT
(\050a\051)SH
39600 XM
(\050b\051)SH
/Times-Bold SF
8200 24285 MT
(Figure 7:)SH
/Times-Roman SF
13057 XM
(\050a\051 At least three different widget sets that)
315 W( have different looks and feels have been)316 W
13057 25481 MT
(implemented on top of the xt intrinsics.  \050b\051 The Motif)
51 W( look-and-feel has been implemented)50 W
13057 26677 MT
(on at least three different intrinsics.)SH
46800 50 7200 28073 UL
13 /Times-Bold AF
7200 31624 MT
(6.1 Toolkit Intrinsics)SH
11 /Times-Roman AF
8200 33453 MT
(Toolkits come in two basic varieties.  The most conventional is simply a collection of procedures)
69 W( that)70 W
7200 35282 MT
(can be called by)
224 W( application programs.  Examples of this style include the SunTools toolkit for the)223 W
7200 37111 MT
(SunView windowing system)
157 W( [106],)
SH( and the Macintosh Toolbox)
157 W( [2].)
SH( The)
590 W( other variety uses an object-)158 W
7200 38940 MT
(oriented programming style which makes)
398 W( it easier for the designer to customize the interaction)397 W
7200 40769 MT
(techniques. Examples)
275 W( include Smalltalk [112], Andrew [82] Garnet [53], InterViews [42], and Xt [44].)SH
8200 43700 MT
(The advantages of using object-oriented intrinsics)
7 W( are that it is a natural way to think about widgets \050the)8 W
7200 45529 MT
(menus and buttons on the screen)16 W
/Times-Italic SF
21898 XM
(seem)SH
/Times-Roman SF
24387 XM
(like objects\051, the)
16 W( widget objects can handle some of the chores that)15 W
7200 47358 MT
(otherwise would be left to the programmer \050such as refresh\051, and it is easier to create custom widgets)
36 W( \050by)37 W
7200 49187 MT
(sub-classing an existing widget\051.  The advantage of the older, procedural style is that it is easier)
214 W( to)213 W
7200 51016 MT
(implement, no special object-oriented system is needed, and it is easier)
375 W( to interface to multiple)376 W
7200 52845 MT
(programming languages.)SH
8200 55776 MT
(To implement the objects, the toolkit might invent its own object system, as was)
20 W( done with Xt, Andrew)19 W
7200 57605 MT
(and Garnet, or it might use an existing object system, as was)
101 W( done in InterViews)
102 W( [42])
SH( which uses C++,)102 W
7200 59434 MT
(NeXTStep [68])
SH( which uses Objective-C, and Rendezvous)
67 W( [30])
SH( which uses CLOS)
67 W( \050the standard Common)66 W
7200 61263 MT
(Lisp Object System\051.)SH
8200 64194 MT
(The usual way that object-oriented toolkits interface with application programs is through the use of)125 W
/Times-Italic SF
7200 66023 MT
(call-back procedures)1 W
/Times-Roman SF
(. These)
277 W( are procedures defined by the application programmer that are called when)
1 W( a)SH
7200 67852 MT
(widget is operated by the end user.  For)
54 W( example, the programmer might supply a procedure to be called)55 W
7200 69681 MT
(when the user selects a menu item.  Experience has shown that real interfaces often)
69 W( contain hundreds of)68 W
7200 71510 MT
(call-backs, which makes the code harder to modify and maintain)
8 W( [57].)
SH( In)
293 W( addition, different toolkits, even)9 W
ES
%%Page: 17 18
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 17 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(when implemented on the same intrinsics like Motif and OpenLook, have different call-back)
106 W( protocols.)105 W
7200 9784 MT
(This means that code for one toolkit is difficult to port to a different toolkit.  Therefore, research)
37 W( is being)38 W
7200 11613 MT
(directed at reducing the number of call-backs in user interface software [55].)SH
8200 14544 MT
(Some research toolkits have added novel things)
169 W( to the toolkit intrinsics.  For example, Garnet)
168 W( [53],)SH
7200 16373 MT
(Rendezvous [31],)
SH( and Bramble)
285 W( [21])
SH( allow the objects to be connected)
285 W( using)286 W
/Times-Italic SF
43683 XM
(constraints)SH
/Times-Roman SF
(, which are)286 W
7200 18202 MT
(relationships that are declared once and then maintained automatically by the)
84 W( system.  For example, the)83 W
7200 20031 MT
(designer can specify that the color of a rectangle is)
90 W( constrained to be the value of a slider, and then the)91 W
7200 21860 MT
(system will automatically update the rectangle if the user moves the slider.)SH
13 /Times-Bold AF
7200 25611 MT
(6.2 Widget Set)SH
11 /Times-Roman AF
8200 27440 MT
(Typically, the intrinsics)
82 W( layer is look-and-feel independent, which means that the widgets built on top)81 W
7200 29269 MT
(of it can have any desired appearance and behavior.)
68 W( However,)
413 W( a particular widget set must pick a look-)69 W
7200 31098 MT
(and-feel. The)
421 W( video)72 W
/Times-Italic SF
16621 XM
(All the Widgets)72 W
/Times-Roman SF
23834 XM
(shows many examples of widgets that have been designed over the)72 W
7200 32927 MT
(years [52].)
SH( For)
289 W( example, it shows 35 different kinds)
7 W( of menus.  Like window manager user interfaces, the)8 W
7200 34756 MT
(widgets' look-and-feel can be copyrighted and patented [90].)SH
8200 37687 MT
(As was mentioned above, different widget sets \050with different looks and feels\051 can be)
56 W( implemented on)55 W
7200 39516 MT
(top of the same intrinsics.  In addition, the)
120 W( same look-and-feel can be implemented on top of different)121 W
7200 41345 MT
(intrinsics. For)
501 W( example, there are Motif look-and-feel widgets on top of the xt, InterViews and)
113 W( Garnet)112 W
7200 43174 MT
(intrinsics \050Figure 7-b\051.  Although they all look and operate the same \050so)
21 W( would be indistinguishable to the)22 W
7200 45003 MT
(end user\051, they are)
37 W( implemented quite differently, and have completely different procedural interfaces for)36 W
7200 46832 MT
(the programmer.)SH
13 /Times-Bold AF
7200 50583 MT
(6.3 Specialized Toolkits)SH
11 /Times-Roman AF
8200 52412 MT
(A number)
69 W( of toolkits have been developed to support specific kinds of applications or specific classes)70 W
7200 54241 MT
(of programmers.  For example,)
56 W( the SUIT system)
55 W( [83])
SH( \050which contains a toolkit and an interface builder\051,)55 W
7200 56070 MT
(is specifically designed to be easy to learn and is aimed at classroom)
103 W( instruction.  Garnet)
104 W( [53])
SH( provides)104 W
7200 57899 MT
(high-level support for graphical, direct manipulation interfaces, and includes a toolkit, interface)
115 W( builder)114 W
7200 59728 MT
(and other high-level tools.  Rendezvous)
197 W( [30])
SH( is designed to make it easier to create applications that)198 W
7200 61557 MT
(support multiple users on multiple machines operating synchronously.  Whereas)
272 W( most toolkits only)271 W
7200 63386 MT
(provide 2-D)
13 W( interaction techniques, the Brown Animation Generation System)
14 W( [128])
SH( and Silicon Graphics')14 W
7200 65215 MT
(Inventor toolkit)
193 W( [102, 121])
SH( provide preprogrammed)
193 W( 3-D widgets and a framework for creating others.)192 W
7200 67044 MT
(The Ttoolkit)
349 W( [23])
SH( provides built-in)
349 W( primitives for controlling the timing of an interface, which is)350 W
7200 68873 MT
(important for supporting multi-media, such as video.  Special)
96 W( support for animations has been added to)95 W
7200 70702 MT
(Artkit, including motion blur, timing and curved trajectories [33].)SH
ES
%%Page: 18 19
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 18 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
8200 7955 MT
(Tk [80])
SH( is a popular toolkit for the X window system because it uses an interpretive)
31 W( language called tcl)32 W
7200 9784 MT
(which makes it possible to dynamically change the)
130 W( user interface.  Tcl also supports the Unix style of)129 W
7200 11613 MT
(programming where many small programs are glued together.)SH
14 /Times-Bold AF
7200 16151 MT
(7. Virtual Toolkits)SH
11 /Times-Roman AF
8200 17980 MT
(Although there are many small)
118 W( differences among the various toolkits, much remains the same.  For)119 W
7200 19809 MT
(example, all have some type of menu, button, scroll bar, text input field, etc.  Although there)
92 W( are fewer)91 W
7200 21638 MT
(windowing systems and toolkits than there were five)
1 W( years ago, people are still finding that they must do a)2 W
7200 23467 MT
(lot of work to convert)
268 W( their software from Motif to OpenLook to the Macintosh and to Microsoft)267 W
7200 25296 MT
(Windows.)SH
8200 28227 MT
(Therefore, a number of)
27 W( systems have been developed that try to hide the differences among the various)28 W
7200 30056 MT
(toolkits, by providing)138 W
/Times-Italic SF
17393 XM
(virtual)SH
/Times-Roman SF
20739 XM
(widgets which can be mapped into the widgets of each toolkit.  Another)137 W
7200 31885 MT
(name for these tools)
32 W( is)33 W
/Times-Italic SF
17535 XM
(cross-platform development systems)33 W
/Times-Roman SF
(. The)
341 W( programmer writes the code once using)33 W
7200 33714 MT
(the virtual toolkit and the code will run without change on)
102 W( different platforms and still look like it was)101 W
7200 35543 MT
(designed with that)
184 W( platform's widgets.  For example, the virtual toolkit might provide a single menu)185 W
7200 37372 MT
(routine, which always has the)
1 W( same programmer interface, but connects to a Motif menu, Macintosh menu)SH
7200 39201 MT
(or a Windows menu depending on which machine the application)
395 W( is run on.  A recent report)396 W
7475 41030 MT
([15] compares a number of virtual toolkits.)SH
8200 43961 MT
(There are)
1 W( two styles of virtual toolkits.  In one, the virtual toolkit links to the different)SH
/Times-Italic SF
46298 XM
(actual)SH
/Times-Roman SF
49323 XM
(toolkits on)SH
7200 45790 MT
(the host machine.  For example, XVT)
60 W( [127])
SH( provides a C or C++ interface that links to the)
60 W( actual Motif,)61 W
7200 47619 MT
(OpenLook, Macintosh, MS-Windows, and OS/2-PM toolkits \050and also character terminals\051)
200 W( and hides)199 W
7200 49448 MT
(their differences.  The second style of virtual toolkit)244 W
/Times-Italic SF
32551 XM
(re-implements)SH
/Times-Roman SF
39363 XM
(the widgets in each style.  For)245 W
7200 51277 MT
(example, Galaxy)
130 W( [116])
SH( and Open)
130 W( Interface)
129 W( [77])
SH( provide libraries of widgets that look like those on the)129 W
7200 53106 MT
(various platforms.)
25 W( The)
326 W( advantage of the first style is that the user interface is more likely to be look-and-)26 W
7200 54935 MT
(feel conformant \050since it uses)
87 W( the real widgets\051.  The disadvantages are that the virtual toolkit must still)86 W
7200 56764 MT
(provide an interface to the graphical drawing primitives on the platforms. Furthermore, they tend to only)51 W
7200 58593 MT
(provide functions that appear in all toolkits.  Many of the virtual toolkits that)
81 W( take the second approach,)80 W
7200 60422 MT
(for example Galaxy, provide)
268 W( a sophisticated graphics package and complete sets of widgets on all)269 W
7200 62251 MT
(platforms. However,)
491 W( with the second approach,)
108 W( there must always be a large run-time library, since in)107 W
7200 64080 MT
(addition to the built-in widgets that are native)
154 W( to the machine, there is the re-implementation of these)155 W
7200 65909 MT
(same widgets in the virtual toolkit library.)SH
8200 68840 MT
(All of the toolkits that work on)
17 W( multiple platforms can be considered virtual toolkits of the second type.)16 W
7200 70669 MT
(For example, SUIT)
187 W( [83])
SH( works on X, Macintosh)
187 W( and Windows, and Garnet)
188 W( [53])
SH( works on X and the)188 W
ES
%%Page: 19 20
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 19 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(Macintosh. However,)
499 W( these use the same look-and-feel on all platforms \050and therefore do not look the)111 W
7200 9784 MT
(same as the other applications on that platform\051, so they are not classified as virtual toolkits.)SH
14 /Times-Bold AF
7200 14322 MT
(8. Higher Level Tools)SH
11 /Times-Roman AF
8200 16151 MT
(Since programming)
91 W( at the toolkit level is quite difficult, there is a tremendous interest in higher level)92 W
7200 17980 MT
(tools that will make the user interface software production process easier.  These are discussed next.)SH
13 /Times-Bold AF
7200 21731 MT
(8.1 Phases)SH
11 /Times-Roman AF
8200 23560 MT
(Many higher-level tools have components that)
80 W( operate at different times.  The)79 W
/Times-Italic SF
43700 XM
(design time component)79 W
/Times-Roman SF
7200 25389 MT
(helps the user interface designer design)
59 W( the user interface.  For example, this might be a graphical editor)60 W
7200 27218 MT
(which can lay out the interface, or a compiler to process a user)
18 W( interface specification language.  The next)17 W
7200 29047 MT
(phase is when the end-user is using the program.  Here, the)38 W
/Times-Italic SF
33924 XM
(run-time component)38 W
/Times-Roman SF
43164 XM
(of the)
38 W( tool is used.  This)39 W
7200 30876 MT
(usually includes a toolkit, but may also include additional software specifically for the tool.  Since the)122 W
7200 32705 MT
(run-time component is ``managing'' the user interface, the term)227 W
/Times-Italic SF
37587 XM
(User Interface Management System)228 W
/Times-Roman SF
7200 34534 MT
(seems appropriate for tools with a significant run-time component.)SH
8200 37465 MT
(There may also be an)131 W
/Times-Italic SF
18536 XM
(after-run-time component)131 W
/Times-Roman SF
30406 XM
(that helps with the evaluation and debugging of the)131 W
7200 39294 MT
(user interface.  Unfortunately,)
114 W( very few user interface tools have an after-run-time component.  This is)115 W
7200 41123 MT
(partially because)
34 W( tools that have tried, such as MIKE)
33 W( [73],)
SH( discovered that there are very few metrics that)33 W
7200 42952 MT
(can be applied by computers.  A new generation of tools are trying to evaluate how people will)
80 W( interact)81 W
7200 44781 MT
(with interfaces by)
281 W( automatically creating cognitive models from high-level descriptions of the user)280 W
7200 46610 MT
(interface. For)
721 W( example, USAGE creates an NGOMSL cognitive model from)
223 W( a UIDE user interface)224 W
7200 48439 MT
(specification [12].)SH
13 /Times-Bold AF
7200 52190 MT
(8.2 Specification Styles)SH
11 /Times-Roman AF
8200 54019 MT
(High-level user interface tools come in a large variety of forms.  One important)
86 W( way that they can be)85 W
7200 55848 MT
(classified is by how the)
4 W( designer specifies what the interface should be.  As shown in Figure 8, some tools)5 W
7200 57677 MT
(require the programmer to program in)
411 W( a special-purpose language, some provide an application)410 W
7200 59506 MT
(framework to guide the programming, some automatically generate the)
33 W( interface from a high-level model)34 W
7200 61335 MT
(or specification, and others allow the interface to be)
230 W( designed interactively.  Each of these types is)229 W
7200 63164 MT
(discussed below.  Of course, some tools)
38 W( use different techniques for specifying different parts of the user)39 W
7200 64993 MT
(interface. These)
275 W( are classified by their predominant or most interesting feature.)SH
ES
%%Page: 20 21
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 20 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
16500 8336 MT
(Specification Format)SH
34173 XM
(Examples)SH
43920 XM
(Section)SH
34710 50 13245 8966 LH BX1
-1766 50 29623 8966 LV BX1
-1766 50 43307 8966 LV BX1
/Times-Italic SF
13644 10120 MT
(Language Based)SH
/Times-Roman SF
43706 XM
(8.2.1)SH
34710 50 13245 10760 LH BX1
14744 11914 MT
(State Transition Networks)SH
30297 XM
([67], [36])SH
43706 XM
(8.2.1.1)SH
34710 50 13245 12554 LH BX1
14744 13708 MT
(Context-Free Grammars)SH
30022 XM
(YACC, LEX,)SH
43706 XM
(8.2.1.2)SH
30022 14904 MT
(Syngraph [70])SH
34710 50 13245 15544 LH BX1
14744 16698 MT
(Event Languages)SH
30022 XM
(ALGAE [19],)SH
43706 XM
(8.2.1.3)SH
30022 17894 MT
(Sassafras [29],)SH
30022 19090 MT
(HyperTalk)SH
34710 50 13245 19730 LH BX1
14744 20884 MT
(Declarative Languages)SH
30022 XM
(Cousin [27],)SH
43706 XM
(8.2.1.4)SH
30022 22080 MT
(Open Dialog [93],)SH
30022 23276 MT
(Motif UIL)SH
34710 50 13245 23916 LH BX1
14744 25070 MT
(Constraint Languages)SH
30022 XM
(Thinglab [8],)SH
43706 XM
(8.2.1.5)SH
30022 26266 MT
(C32 [56])SH
34710 50 13245 26906 LH BX1
14744 28060 MT
(Screen Scrapers)SH
30022 XM
(Easel [17])SH
43706 XM
(8.2.1.6)SH
34710 50 13245 28700 LH BX1
14744 29854 MT
(Database Interfaces)SH
30022 XM
(Oracle [79])SH
43706 XM
(8.2.1.7)SH
34710 50 13245 30494 LH BX1
14744 31648 MT
(Visual Programming)SH
30022 XM
(LabView [40])SH
43706 XM
(8.2.1.8)SH
30022 32844 MT
(Prograph [87])SH
30022 34040 MT
(Visual Basic [117])SH
34710 50 13245 34680 LH BX1
/Times-Italic SF
13644 35834 MT
(Application Frameworks)SH
/Times-Roman SF
30022 XM
(MacApp [125],)SH
43706 XM
(8.2.2)SH
30022 37030 MT
(Unidraw [119])SH
34710 50 13245 37670 LH BX1
/Times-Italic SF
13644 38824 MT
(Model-Based Generation)SH
/Times-Roman SF
30022 XM
(MIKE [71],)SH
43706 XM
(8.2.3)SH
30022 40020 MT
(UIDE [104],)SH
30022 41216 MT
(ITS [123],)SH
30022 42412 MT
(Humanoid [110])SH
34710 50 13245 43052 LH BX1
/Times-Italic SF
13644 44206 MT
(Interactive Graphical Specification)SH
/Times-Roman SF
43706 XM
(8.2.4)SH
34710 50 13245 44846 LH BX1
14744 46000 MT
(Prototypers)SH
30022 XM
(Bricklin's Demo [89],)SH
43706 XM
(8.2.4.1)SH
30022 47196 MT
(Director [43],)SH
30022 48392 MT
(HyperCard)SH
34710 50 13245 49032 LH BX1
14744 50186 MT
(Cards)SH
30022 XM
(Menulay [11],)SH
43706 XM
(8.2.4.2)SH
30022 51382 MT
(HyperCard)SH
34710 50 13245 52022 LH BX1
14744 53176 MT
(Interface Builders)SH
30022 XM
(DialogEditor [14],)SH
43706 XM
(8.2.4.3)SH
30022 54372 MT
(NeXT Interface Builder [68],)SH
30022 55568 MT
(Prototyper [97],)SH
30022 56764 MT
(UIMX [118])SH
34710 50 13245 57404 LH BX1
14744 58558 MT
(Data Visualization Tools)SH
30022 XM
(DataViews [113])SH
43706 XM
(8.2.4.4)SH
34710 50 13245 59198 LH BX1
14744 60352 MT
(Graphical Editors)SH
30022 XM
(Peridot [48],)SH
43706 XM
(8.2.4.5)SH
30022 61548 MT
(Lapidary [50],)SH
30022 62744 MT
(Marquise [63])SH
34710 56184 50 13245 63384 BX BX1
-54418 50 29623 63384 LV BX1
-54418 50 43307 63384 LV BX1
/Times-Bold SF
8200 65136 MT
(Figure 8:)SH
/Times-Roman SF
13057 XM
(Ways to specify the user interface, some tools that use)
24 W( that technique, and the section of this)23 W
13057 66332 MT
(article that discusses the technique.)SH
ES
%%Page: 21 22
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 21 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
12 /Times-Bold AF
7200 8004 MT
(8.2.1 Language Based)SH
11 /Times-Roman AF
8200 9833 MT
(With most of the older user)
8 W( interface tools, the designer specified the user interface in a special-purpose)9 W
7200 11662 MT
(language. This)
1005 W( language can take)
365 W( many forms, including context-free grammars, state transition)364 W
7200 13491 MT
(diagrams, declarative languages,)
26 W( event languages, etc.  The language is usually used to specify the syntax)27 W
7200 15320 MT
(of the user)
96 W( interface; i.e., the legal sequences of input and output actions.  This is sometimes called the)95 W
7200 17149 MT
(``dialog.'' Green)
683 W( [22])
SH( provides an extensive comparison of grammars, state transition)
204 W( diagrams, and)205 W
7200 18978 MT
(event languages, and Olsen [75] surveys various UIMS techniques.)SH
/Times-Bold SF
7200 21875 MT
(8.2.1.1 State Transition Networks)SH
/Times-Roman SF
8200 23704 MT
(Since many parts of user interfaces)
25 W( involve handling a sequence of input events, it is natural to think of)24 W
7200 25533 MT
(using a state transition network to code the interface.  A)
14 W( transition network consists of a set of states, with)15 W
7200 27362 MT
(arcs out of each state labeled with the input tokens that will cause a)
31 W( transition to the state at the other end)30 W
7200 29191 MT
(of the arc.)
65 W( In)
406 W( addition to input tokens, calls to application procedures and the output to display can also)66 W
7200 31020 MT
(be put)
94 W( on the arcs in some systems.  Newman implemented a simple tool using finite state machines in)93 W
7200 32849 MT
(1968 [67])
SH( which handled textual input.  This was apparently)
129 W( the first user interface tool.  Many of the)130 W
7200 34678 MT
(assumptions and techniques used in modern systems were)
83 W( present in Newman's: different languages for)82 W
7200 36507 MT
(defining the user)
22 W( interface and the semantics \050the semantic routines were coded in a normal programming)23 W
7200 38336 MT
(language\051, a table-driven syntax analyzer, and device independence.)SH
8200 41267 MT
(State diagram tools are most useful for creating user interfaces where the user interface has a large)156 W
7200 43096 MT
(number of modes \050each state)
37 W( is really a mode\051.  For example, state diagrams are useful for describing the)38 W
7200 44925 MT
(operation of low-level widgets \050e.g., how a)
113 W( menu or scroll bar works\051, or the overall global flow of an)112 W
7200 46754 MT
(application \050e.g., this command will pop-up a dialog box, from which you can get to these two dialog)131 W
7200 48583 MT
(boxes, and)
180 W( then to this other window, etc.\051.  However, most highly-interactive systems attempt to be)179 W
7200 50412 MT
(mostly ``mode-free,'' which means that at each point, the user has a)
SH( wide variety of choices of what to do.)1 W
7200 52241 MT
(This requires a large number of arcs out of each state, so state)
33 W( diagram tools have not been successful for)32 W
7200 54070 MT
(these interfaces.  In addition, state diagrams)
210 W( cannot handle interfaces where the user can operate on)211 W
7200 55899 MT
(multiple objects at the same)
1 W( time.  Another problem is that they can be very confusing for large interfaces,)SH
7200 57728 MT
(since they get to be a ``maze of wires'' and off-page \050or off-screen\051 arcs can be hard to follow.)SH
8200 60659 MT
(Recognizing these problems,)
84 W( but still trying to retain the perspicuousness of state transition diagrams,)85 W
7200 62488 MT
(Jacob [36])
SH( invented a new formalism, which is)
165 W( a combination of state diagrams with a form of event)164 W
7200 64317 MT
(languages \050see section 8.2.1.3\051.  There can be multiple diagrams active at the)
151 W( same time, and flow of)152 W
7200 66146 MT
(control transfers)
138 W( from one to another in a co-routine fashion.  The system can create various forms of)137 W
7200 67975 MT
(direct manipulation interfaces.)
60 W( VAPS)
397 W( is a commercial system that uses the state transition model, and it)61 W
7200 69804 MT
(eliminates the maze-of-wires problem by providing a)
116 W( spreadsheet-like table in which the states, events,)115 W
7200 71633 MT
(and actions are specified)
221 W( [115].)
SH( Transition)
717 W( networks)
221 W( have been thoroughly researched, but have not)222 W
ES
%%Page: 22 23
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 22 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(proven particularly successful or useful either as a research or commercial approach.)SH
/Times-Bold SF
7200 10852 MT
(8.2.1.2 Context-Free Grammars)SH
/Times-Roman SF
8200 12681 MT
(Many grammar-based systems are based on parser generators used in)
220 W( compiler development.  For)219 W
7200 14510 MT
(example, the designer might specify the user interface syntax using some)
141 W( form of BNF.  Examples of)142 W
7200 16339 MT
(grammar-based systems are Syngraph [70] and parsers built with YACC and LEX in Unix.)SH
8200 19270 MT
(Grammar-based tools, like state diagram tools, are)
196 W( not appropriate for specifying highly-interactive)195 W
7200 21099 MT
(interfaces, since they are oriented to batch processing of strings with a complex)
4 W( syntactic structure.  These)5 W
7200 22928 MT
(systems are best for textual command languages, and)
54 W( have been mostly abandoned for user interfaces by)53 W
7200 24757 MT
(researchers and commercial developers.)SH
/Times-Bold SF
7200 27654 MT
(8.2.1.3 Event Languages)SH
/Times-Roman SF
8200 29483 MT
(With event languages, the input tokens are considered to be ``events'' that are sent to individual)
58 W( event)59 W
7200 31312 MT
(handlers. Each)
423 W( handler will have a condition clause that determines what types of events)
74 W( it will handle,)73 W
7200 33141 MT
(and when it is active.)
82 W( The)
441 W( body of the handler can cause output events, change the internal state of the)83 W
7200 34970 MT
(system \050which might enable other event handlers\051, or call application routines.)SH
8200 37901 MT
(The ALGAE)
27 W( system)
26 W( [19])
SH( uses an event language which is an extension of Pascal.  The user interface is)26 W
7200 39730 MT
(programmed as a)
34 W( set of small event handlers, which ALGAE compiles into conventional code.  Sassafras)35 W
7475 41559 MT
([29], uses a similar idea, but with an)
53 W( entirely different syntax.  Sassafras also adds local variables called)52 W
7200 43388 MT
(``flags'' to help specify the flow of control.  As described below)
231 W( in section 8.2.4.2, the HyperTalk)232 W
7200 45217 MT
(language that is part of HyperCard for the Apple Macintosh, can also be considered an event language.)SH
8200 48148 MT
(The advantages of event languages are that they can)
95 W( handle multiple input devices active at the same)94 W
7200 49977 MT
(time, and it is straightforward to support non-modal interfaces, where the)
42 W( user can operate on any widget)43 W
7200 51806 MT
(or object.  The main disadvantage is that it can be very difficult)
65 W( to create correct code, since the flow of)64 W
7200 53635 MT
(control is not localized and small changes in one part can affect many different pieces of the program.)
39 W( It)354 W
7200 55464 MT
(is also typically difficult for the designer to understand the)
247 W( code once it reaches a non-trivial size.)246 W
7200 57293 MT
(However, the success of HyperTalk and similar tools shows that this approach is appropriate for small)
44 W( to)45 W
7200 59122 MT
(medium-size programs.)SH
/Times-Bold SF
7200 62019 MT
(8.2.1.4 Declarative Languages)SH
/Times-Roman SF
8200 63848 MT
(Another approach is to try to define)
76 W( a language that is declarative \050stating what should happen\051 rather)75 W
7200 65677 MT
(than procedural \050how to make it happen\051.  Cousin)
80 W( [27])
SH( and HP/Apollo's Open-Dialogue)
80 W( [93])
SH( both allow)80 W
7200 67506 MT
(the designer to specify user interfaces in this manner.  The user interfaces supported are)
58 W( basically forms,)57 W
7200 69335 MT
(where fields can be text which is typed by the user, or options)
12 W( selected using menus or buttons.  There are)13 W
7200 71164 MT
(also graphic output areas that the application can use)
229 W( in whatever manner desired.  The application)228 W
ES
%%Page: 23 24
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 23 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(program is connected to the user interface through ``variables'' which can be)
94 W( set and accessed by both.)95 W
7200 9784 MT
(As researchers have extended this idea to support more)
123 W( sophisticated interactions, the specification has)122 W
7200 11613 MT
(grown into full application models, and newer systems are described in section 8.2.3.)SH
8200 14544 MT
(Another type of declarative language is the layout description languages that come)
44 W( with many toolkits.)45 W
7200 16373 MT
(For example, Motif's)
93 W( User Interface Language \050UIL\051 allows the layout of widgets to be defined.  Since)92 W
7200 18202 MT
(the UIL is interpreted when an application starts, users can \050in theory\051 edit the UIL code)
29 W( to customize the)30 W
7200 20031 MT
(interface. UIL)
327 W( is not a complete language, however, in the sense that the designer must still write)
26 W( C code)25 W
7200 21860 MT
(for many parts of)
134 W( the interface, including any areas containing dynamic graphics and any widgets that)135 W
7200 23689 MT
(change.)SH
8200 26620 MT
(The advantage of using declarative languages is)
38 W( that the user interface designer does not have to worry)37 W
7200 28449 MT
(about the time sequence of events,)
86 W( and can concentrate on the information that needs to be passed back)87 W
7200 30278 MT
(and forth.  The disadvantage is that only certain types of interfaces can be provided this way, and)
31 W( the rest)30 W
7200 32107 MT
(must be programmed by hand in the ``graphic areas'' provided to application programs.)
128 W( The)
532 W( kinds of)129 W
7200 33936 MT
(interactions available are preprogrammed and fixed.)
84 W( In)
442 W( particular, these systems provide no support for)83 W
7200 35765 MT
(such things as)
197 W( dragging graphical objects, rubber-band lines, drawing new graphical objects, or even)198 W
7200 37594 MT
(dynamically changing the items in a menu based on the application mode or)
134 W( context.  However, these)133 W
7200 39423 MT
(languages are now)
17 W( proving successful as intermediate languages describing the layout of widgets \050such as)18 W
7200 41252 MT
(UIL\051 that are generated by interactive tools.  They were also an important intermediate research step)
79 W( on)78 W
7200 43081 MT
(the way to today's model-based approaches \050section 8.2.3\051.)SH
/Times-Bold SF
7200 45978 MT
(8.2.1.5 Constraint Languages)SH
/Times-Roman SF
8200 47807 MT
(A number of user interface tools allow the programmer to use)
98 W( constraints to define the user interface)99 W
7475 49636 MT
([9]. Early)
445 W( constraint systems include Sketchpad)
85 W( [108])
SH( which pioneered the use of graphical)
85 W( constraints)84 W
7200 51465 MT
(in a drawing)
180 W( editor, and Thinglab)
181 W( [8])
SH( which used constraints for graphical simulation.  Subsequently,)181 W
7200 53294 MT
(Thinglab was extended to aid in the generation of user interfaces [9].)SH
8200 56225 MT
(Section 6.1 mentioned the use of constraints as part)
30 W( of the intrinsics of a toolkit.  A number of research)29 W
7200 58054 MT
(toolkits now supply)
106 W( constraints as an integral part of the object system \050e.g., Garnet)
107 W( [53]\051.)
SH( In)
489 W( addition,)107 W
7200 59883 MT
(some systems have provided higher-level interfaces to constraints.)
133 W( Graphical)
540 W( Thinglab)
132 W( [10])
SH( allows the)132 W
7200 61712 MT
(designer to create constraints by wiring icons)
254 W( together, and NoPump)
255 W( [124],)
SH( C32)
255 W( [56])
SH( and Penguims)255 W
7475 63541 MT
([34] allow constraints to be defined using spreadsheet-like interfaces.)SH
8200 66472 MT
(The advantages of constraints)
41 W( is that they are a natural way to express many kinds of relationships that)40 W
7200 68301 MT
(arise frequently in user interfaces.  For example, that lines should stay attached to)
189 W( boxes, that labels)190 W
7200 70130 MT
(should stay centered within boxes, etc.  However,)
102 W( a disadvantage with constraints is that they require a)101 W
7200 71959 MT
(sophisticated run-time system to)
169 W( solve them efficiently.  Another problem is that they can be hard to)170 W
ES
%%Page: 24 25
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 24 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(debug when specified incorrectly since it can be difficult to trace)
66 W( the causes and consequences of values)65 W
7200 9784 MT
(changing. However,)
609 W( a growing number of research systems)
167 W( are using constraints, and it appears that)168 W
7200 11613 MT
(modern constraint solvers and debugging techniques may solve these)
179 W( problems, so constraints have a)178 W
7200 13442 MT
(great potential to simplify the programming task.  As yet, there)
122 W( are no commercial user interface tools)123 W
7200 15271 MT
(using constraints.)SH
/Times-Bold SF
7200 18168 MT
(8.2.1.6 Screen Scrapers)SH
/Times-Roman SF
8200 19997 MT
(Some commercial tools are specialized to be ``front-enders'' or)
162 W( ``screen scrapers'' which provide a)161 W
7200 21826 MT
(graphical user)
43 W( interface to old programs without changing the existing application code.  They do this by)44 W
7200 23655 MT
(providing an)
75 W( in-memory buffer that pretends to be the screen of an old character terminal such as might)74 W
7200 25484 MT
(be attached to)
48 W( an IBM mainframe.  When the mainframe application outputs to the buffer, a program the)49 W
7200 27313 MT
(designer writes in a special programming language converts this into an update of)
143 W( a graphical widget.)142 W
7200 29142 MT
(Similarly, when the user operates a widget, the script)
221 W( converts this into the appropriate edits of the)222 W
7200 30971 MT
(character buffer.  The leading program of this type is)
45 W( Easel)
44 W( [17],)
SH( which also contains an interface builder)44 W
7200 32800 MT
(for laying out the widgets.)SH
/Times-Bold SF
7200 35697 MT
(8.2.1.7 Database Interfaces)SH
/Times-Roman SF
8200 37526 MT
(A very)
200 W( important class of commercial tools support form-based or GUI-based access to databases.)201 W
7200 39355 MT
(Major database)
248 W( vendors such as Oracle)
247 W( [79])
SH( provide tools which allow designers to define the user)247 W
7200 41184 MT
(interface for accessing and setting data.  Often these)
159 W( tools include interactive form editors \050which are)160 W
7200 43013 MT
(essentially interface builders\051 and special database languages.  Fourth generation languages \0504GLs\051, that)77 W
7200 44842 MT
(support defining the interactive forms for accessing and entering data, also fall into this category.)SH
/Times-Bold SF
7200 47739 MT
(8.2.1.8 Visual Programming)SH
/Times-Roman SF
8200 49568 MT
(``Visual programs'' use graphics and two \050or more\051 dimensional layout as part of the program)313 W
7200 51397 MT
(specification [54].)
SH( Many)
643 W( different approaches to using visual programming to specify)
184 W( user interfaces)183 W
7200 53226 MT
(have been investigated.  Most systems that support state)
38 W( transition networks \050section 8.2.1.1\051 use a visual)39 W
7200 55055 MT
(representation. Another)
823 W( popular)
274 W( technique is to use dataflow languages.  In these, icons represent)273 W
7200 56884 MT
(processing steps, and the data flow along the connecting wires.  The user interface is usually constructed)50 W
7200 58713 MT
(directly by)
83 W( laying out pre-built widgets, in the style of interface builders \050section 8.2.4.3\051.  Examples of)82 W
7200 60542 MT
(visual programming systems for creating user)
140 W( interfaces include Labview)
141 W( [40])
SH( which is specialized for)141 W
7200 62371 MT
(controlling laboratory instruments, and ProGraph)
81 W( [87].)
SH( Using)
437 W( a visual language seems to)
81 W( make it easier)80 W
7200 64200 MT
(for novice programmers, but large programs still suffer from the familiar)
188 W( ``maze of wires'' problem.)189 W
7200 66029 MT
(Other papers \050e.g., [54]\051 have analyzed the strengths and weaknesses of visual programming in detail.)SH
8200 68960 MT
(Another popular)
87 W( language is Visual Basic from Microsoft)
86 W( [117].)
SH( Although)
447 W( this is more of a structure)86 W
7200 70789 MT
(editor for Basic combined)
223 W( with an interface builder, and therefore does not really count as a visual)224 W
ES
%%Page: 25 26
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 25 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(language, it does make the construction of user interface software easier.)
133 W( Microsoft)
540 W( is pushing Visual)132 W
7200 9784 MT
(Basic as the extension language that people will use to customize and)
59 W( connect all future Windows-based)60 W
7200 11613 MT
(applications.)SH
/Times-Bold SF
7200 14510 MT
(8.2.1.9 Summary of Language Approaches)SH
/Times-Roman SF
8200 16339 MT
(In summary, there have been many different types of languages that have been designed)
40 W( for specifying)39 W
7200 18168 MT
(user interfaces.  One problem with all of these is that they can only be)
17 W( used by professional programmers.)18 W
7200 19997 MT
(Some programmers have objected to the requirement for learning a new)
88 W( language for programming just)87 W
7200 21826 MT
(the user interface portion)
49 W( [72].)
SH( This)
373 W( has been confirmed)
49 W( by market research)
50 W( [126,)
SH( p.29].  Furthermore, it)50 W
7200 23655 MT
(seems more natural to define the)
111 W( graphical part of a user interface using a graphical editor \050see section)110 W
7200 25484 MT
(8.2.4\051. However,)
351 W( it is clear that for)
38 W( the foreseeable future, much of the user interface will still need to be)39 W
7200 27313 MT
(created by writing programs, so it is appropriate to continue investigations into the best language to)
82 W( use)81 W
7200 29142 MT
(for this.  Indeed, a new book)
156 W( is entirely devoted to investigating the languages for programming user)157 W
7200 30971 MT
(interfaces [58].)SH
12 /Times-Bold AF
7200 34655 MT
(8.2.2 Application Frameworks)SH
11 /Times-Roman AF
8200 36484 MT
(After the Macintosh Toolbox had been available for a little)
58 W( while, Apple discovered that programmers)57 W
7200 38313 MT
(had a difficult time figuring out how to call the various toolkit)
164 W( functions, and how to ensure that the)165 W
7200 40142 MT
(resulting interface met)
87 W( the Apple guidelines.  They therefore created a software system that provides an)86 W
7200 41971 MT
(overall)SH
/Times-Italic SF
10733 XM
(application framework)204 W
/Times-Roman SF
21469 XM
(to guide programmers.  This is)
204 W( called MacApp)
205 W( [92, 125])
SH( and uses the)205 W
7200 43800 MT
(object-oriented language Object Pascal.  Classes are provided for the important parts of)
114 W( an application,)113 W
7200 45629 MT
(such as the main windows, the commands, etc.,)
71 W( and the programmer specializes these classes to provide)72 W
7200 47458 MT
(the application-specific details, such as what)
62 W( is actually drawn in the windows and which commands are)61 W
7200 49287 MT
(provided. MacApp)
275 W( has been very successful at simplifying the writing of Macintosh applications.)SH
8200 52218 MT
(Unidraw [119])
SH( uses a similar approach, but it is more specialized for graphical editors.)
12 W( This)
300 W( means that)13 W
7200 54047 MT
(it can provide even more support.  Unidraw uses the C++ object-oriented language and is part of)
161 W( the)160 W
7200 55876 MT
(InterViews system)
6 W( [42].)
SH( Unidraw)
287 W( has been used to create various drawing and)
6 W( CAD programs, and a user)7 W
7200 57705 MT
(interface editor)
217 W( [120].)
SH( The)
709 W( Garnet)
217 W( framework is also aimed at graphical applications, but due to its)216 W
7200 59534 MT
(graphical data model, many of the built-in routines can be used without change \050the)
21 W( programmer does not)22 W
7200 61363 MT
(usually need to write methods for subclasses\051)
133 W( [59].)
SH( The)
540 W( ACE system from HP provides an interactive)132 W
7200 63192 MT
(editor that allows some of the properties of objects to be specified, but most of the)
105 W( application-specific)106 W
7200 65021 MT
(behavior must still be programmed)
173 W( [37].)
SH( Even)
621 W( more specialized are various graph)
173 W( programs, such as)172 W
7200 66850 MT
(Edge [66])
SH( and TGE)
155 W( [38].)
SH( These)
585 W( provide a)
155 W( framework in which the designer can create programs that)156 W
7200 68679 MT
(display their data as trees or graphs.  The programmer typically specializes)
53 W( the node and arc classes, and)52 W
7200 70508 MT
(specifies some of the commands, but the framework handles layout and the overall control.)SH
ES
%%Page: 26 27
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 26 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
8200 7955 MT
(An emerging popular approach aims to replace today's large, monolythic)
189 W( applications with smaller)190 W
7200 9784 MT
(components that attach together.)
166 W( For)
606 W( example, you might buy a separate text editor, ruler, paragraph)165 W
7200 11613 MT
(formatter, spell checker, and drawing program, and have them all work together seamlessly.  This)271 W
7200 13442 MT
(approach was invented by the Andrew)
190 W( environment)
189 W( [82])
SH( which provides an object-oriented document)189 W
7200 15271 MT
(model that supports the embedding of different kinds of data inside other documents.)
21 W( These)
318 W( ``insets'' are)22 W
7200 17100 MT
(unlike data that is cut and pasted in systems like the Macintosh because they bring along the)
106 W( programs)105 W
7200 18929 MT
(that edit them, and therefore can always be edited in place.  Furthermore, the container document does not)4 W
7200 20758 MT
(need to know how to display or print the inset data since the original program)
108 W( that created it is always)107 W
7200 22587 MT
(available. The)
411 W( designer creating a)
68 W( new inset writes subclasses that adheres to a standard protocol so the)69 W
7200 24416 MT
(system knows how to pass input events to the appropriate editor.  The next generation of)
212 W( operating)211 W
7200 26245 MT
(systems will use this approach extensively: it is the foundation for)
305 W( Microsoft's OLE and Apple's)306 W
7200 28074 MT
(OpenDoc.)SH
8200 31005 MT
(All of)
122 W( these frameworks require the designer to write code, typically by creating application-specific)121 W
7200 32834 MT
(sub-classes of the standard classes provided as part of the framework.)SH
8200 35765 MT
(Another class of systems that might be considered ``frameworks'' help create user interfaces that are)104 W
7200 37594 MT
(composed of a)
14 W( series of ``cards,'' such as HyperCard from Apple.  These systems are discussed in section)13 W
7200 39423 MT
(8.2.4.2 because their primary interface to the designer is graphical.)SH
12 /Times-Bold AF
7200 43107 MT
(8.2.3 Model-Based Automatic Generation)SH
11 /Times-Roman AF
8200 44936 MT
(A problem with all of the language-based tools is)
56 W( that the designer must specify a great deal about the)57 W
7200 46765 MT
(placement, format, and design of the user)
119 W( interfaces.  To solve this problem, some tools use)118 W
/Times-Italic SF
49600 XM
(automatic)SH
7200 48594 MT
(generation)SH
/Times-Roman SF
12251 XM
(so that the tool makes many of these choices from a much higher-level specification.  Many of)11 W
7200 50423 MT
(these tools, including Mickey)
65 W( [74],)
SH( Jade)
65 W( [114],)
SH( Chisel)
65 W( [95],)
SH( and DON)
64 W( [39])
SH( have concentrated on creating)64 W
7200 52252 MT
(menus and dialog boxes.  Chisel and Jade allow the designer to use)
3 W( a graphical editor to edit the generated)4 W
7200 54081 MT
(interface if it is not good enough.)
137 W( DON)
547 W( has the most sophisticated layout mechanisms and takes into)136 W
7200 55910 MT
(account the desired window size,)
124 W( balance, columness, symmetry, grouping, etc.  Creating dialog boxes)125 W
7200 57739 MT
(automatically has been very thoroughly researched, but there still are no commercial tools that do this.)SH
8200 60670 MT
(Another approach is to try to create a user interface based on a list of the application)
197 W( procedures.)196 W
7200 62499 MT
(MIKE [71])
SH( creates an)
205 W( initial interface that is menu-oriented and rather verbose, but the designer can)206 W
7200 64328 MT
(change the menu structure, use icons for some)
117 W( commands, and even make some commands operate by)116 W
7200 66157 MT
(direct manipulation.)
24 W( The)
325 W( designer uses a graphical editor, like those described in section 8.2.4, to specify)25 W
7200 67986 MT
(these changes.)SH
8200 70917 MT
(UIDE \050the User-Interface Design Environment\051)
73 W( [104])
SH( requires that the semantics of)
73 W( the application be)72 W
ES
%%Page: 27 28
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 27 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(defined in a special-purpose language,)
169 W( and therefore might be included with the language-based tools)170 W
7200 9784 MT
(\050section 8.2.1\051.)
98 W( It)
469 W( is placed here instead because the language is used to describe the functions that the)97 W
7200 11613 MT
(application supports and not the desired interface.)
190 W( UIDE)
656 W( is classified as a ``model-based'' approach)191 W
7200 13442 MT
(because the specification serves as a high-level, sophisticated model of the application semantics.)
175 W( In)623 W
7200 15271 MT
(UIDE, the)
107 W( description includes pre- and post-conditions of the operations, and the system uses these to)108 W
7200 17100 MT
(reason about the operations,)
211 W( and to automatically generate an interface.  One interesting part of this)210 W
7200 18929 MT
(system is that the user interface designer can apply ``transformations'' to the)
29 W( interface.  These change the)30 W
7200 20758 MT
(interface in various ways.  For example, one transformation changes the)
166 W( interface to have a currently)165 W
7200 22587 MT
(selected object instead of requiring an object to be selected for each)
258 W( operation.  UIDE applies the)259 W
7200 24416 MT
(transformations and insures that the resulting interface remains consistent.)
112 W( Another)
498 W( feature of UIDE is)111 W
7200 26245 MT
(that the pre- and post-conditions are)
67 W( used to automatically generate help)
68 W( [103].)
SH( One)
411 W( direction of current)68 W
7200 28074 MT
(research is to make UIDE models easier to create by allowing users to demonstrate some parts of)
146 W( the)145 W
7200 29903 MT
(interface [20].)SH
8200 32834 MT
(Another model-based system is HUMANOID)
106 W( [110])
SH( which supports the modeling)
106 W( of the presentation,)107 W
7200 34663 MT
(behavior and dialogue of an interface.  The HUMANOID modeling language)
291 W( includes abstraction,)290 W
7200 36492 MT
(composition, recursion,)
260 W( iteration and conditional constructs to support sophisticated interfaces.  The)261 W
7200 38321 MT
(HUMANOID system, which is built on top of the Garnet toolkit)
106 W( [53],)
SH( provides a number)
106 W( of interactive)105 W
7200 40150 MT
(modeling tools to help the designer specify the model.  The developers)
105 W( of HUMANOID and UIDE are)106 W
7200 41979 MT
(collaborating on a new combined model called MASTERMIND that integrates their approaches [65].)SH
8200 44910 MT
(The ITS)
206 W( [123])
SH( system also uses rules to generate an interface.  ITS was)
206 W( used to create the visitor)205 W
7200 46739 MT
(information system for the EXPO 1992)
1 W( worlds fair in Seville, Spain.  Unlike the other rule-based systems,)2 W
7200 48568 MT
(the designer using ITS is expected)
50 W( to write many of the rules, rather than just writing a specification that)49 W
7200 50397 MT
(the rules work on.  In particular,)
179 W( the design philosophy of ITS is that all design decisions should be)180 W
7200 52226 MT
(codified as rules so that they can be)
224 W( used by subsequent designers, which will hopefully mean that)223 W
7200 54055 MT
(interface designs will)
132 W( get easier and better as more rules are entered.  As a result, the designer should)133 W
7200 55884 MT
(never use graphical editing to improve the design,)
8 W( since then the system cannot capture the reason that the)7 W
7200 57713 MT
(generated design was not sufficient.)SH
8200 60644 MT
(While the idea of having the user interface generated automatically is appealing, this approach is still)
16 W( at)17 W
7200 62473 MT
(the research)
11 W( level, because the user interfaces that are generated are generally not good enough.  A further)10 W
7200 64302 MT
(problem is that the specification languages can be quite hard to learn and)
29 W( use.  Extensive current research)30 W
7200 66131 MT
(is addressing the problems of expanding the range of what can be created)
119 W( automatically \050to go beyond)118 W
7200 67960 MT
(dialog boxes\051 and to make the model-based approach easier to use.)SH
ES
%%Page: 28 29
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 28 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
12 /Times-Bold AF
7200 8004 MT
(8.2.4 Direct Graphical Specification)SH
11 /Times-Roman AF
8200 9833 MT
(The tools described next all allow the)
54 W( user interface to be defined, at least partially, by placing objects)55 W
7200 11662 MT
(on the screen using a pointing device.  This is)
19 W( motivated by the observation that the visual presentation of)18 W
7200 13491 MT
(the user interface is of primary importance in graphical user)
72 W( interfaces, and a graphical tool seems to be)73 W
7200 15320 MT
(the most)
11 W( appropriate way to specify the graphical appearance.  Another advantage of this technique is that)10 W
7200 17149 MT
(it is usually much easier for)
1 W( the designer to use.  Many of these systems can be used by non-programmers.)2 W
7200 18978 MT
(Therefore, psychologists,)
79 W( graphic designers and user interface specialists can more easily be involved in)78 W
7200 20807 MT
(the user interface design process when these tools are used.)SH
8200 23738 MT
(These tools can be distinguished from those that)
SH( use ``visual programming'' \050section 8.2.1.8\051 since with)1 W
7200 25567 MT
(direct graphical specification, the actual user interface \050or a)
116 W( part of it\051 is drawn, rather being generated)115 W
7200 27396 MT
(indirectly by a visual program.  Thus, direct graphical specification tools have been)
310 W( called)311 W
/Times-Italic SF
51434 XM
(direct)SH
7200 29225 MT
(manipulation programming)130 W
/Times-Roman SF
19928 XM
(since the user is directly manipulating the user interface widgets and other)129 W
7200 31054 MT
(elements.)SH
8200 33985 MT
(The tools that support graphical specification can)
87 W( be classified into four categories: prototyping tools,)88 W
7200 35814 MT
(those that support a sequence of cards, interface builders, and editors for application-specific graphics.)SH
/Times-Bold SF
7200 38711 MT
(8.2.4.1 Prototyping Tools)SH
/Times-Roman SF
8200 40540 MT
(The goal of)77 W
/Times-Italic SF
13776 XM
(prototyping tools)77 W
/Times-Roman SF
21754 XM
(is to allow the designer to)
77 W( quickly mock up some examples of what the)76 W
7200 42369 MT
(screens in the program will look like.)
15 W( Often,)
307 W( these tools cannot be used to create the real user interface of)16 W
7200 44198 MT
(the program; they just show how)
53 W( some aspects will look.  This is the chief factor that distinguishes them)52 W
7200 46027 MT
(from other high-level tools.  Many parts)
30 W( of the interface may not be operable, and some of the things that)31 W
7200 47856 MT
(look like widgets may just be static pictures.  In most prototypers,)
29 W( no real toolkit widgets are used, which)28 W
7200 49685 MT
(means that the designer has to draw simulations that look like the widgets that will appear in the)
5 W( interface.)6 W
7200 51514 MT
(The normal use is that the designer would spend a few days)
15 W( or weeks trying out different designs with the)14 W
7200 53343 MT
(tool, and then completely reimplement the final design in a separate system.  Most prototyping tools can)57 W
7200 55172 MT
(be used without programming, so they can, for example, be used by graphic designers.)SH
8200 58103 MT
(Note that this use of the term ``prototyping'' is different from the)
48 W( general phrase ``rapid prototyping,'')47 W
7200 59932 MT
(which has become a marketing buzz-word.  Advertisements for just about all)
106 W( user interface tools claim)107 W
7200 61761 MT
(that they support ``rapid prototyping,'' by)
106 W( which they mean that the tool helps create the user interface)105 W
7200 63590 MT
(software quicker.  The term ``prototyping'' is being used in this paper in a much more specific manner.)SH
8200 66521 MT
(Probably the first prototyping tool was Dan Bricklin's Demo)
90 W( [89].)
SH( This)
455 W( is a program for an IBM)
90 W( PC)91 W
7200 68350 MT
(that allows the designer to)
244 W( create sample screens composed of characters and ``character graphics'')243 W
7200 70179 MT
(\050where the fixed-size character cells can contain a)
145 W( graphic like a horizontal, vertical or diagonal line\051.)146 W
ES
%%Page: 29 30
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 29 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(The designer can easily create the various screens for the application.  It is also relatively easy to)
43 W( specify)42 W
7200 9784 MT
(the actions \050mouse)
12 W( or keyboard\051 that cause transitions from one screen to another.  However, it is difficult)13 W
7200 11613 MT
(to define other behaviors.)
258 W( In)
790 W( general, there may be some support for type-in fields and menus in)257 W
7200 13442 MT
(prototyping tools, but there is little ability to process or test the results.)SH
8200 16373 MT
(For graphical user interfaces, designers)
129 W( often use tools like Director)
130 W( [43])
SH( for the Macintosh which is)130 W
7200 18202 MT
(actually an animation tool.  The designer)
192 W( can draw example screens, and then specify that when the)191 W
7200 20031 MT
(mouse is pressed in a particular place, an animation should start or a different screen should be)
20 W( displayed.)21 W
7200 21860 MT
(Components of the picture)
116 W( can be reused in different screens, but again the ability to show behavior is)115 W
7200 23689 MT
(limited. HyperCard)
275 W( for the Macintosh is also often used as a prototyping tool.)SH
8200 26620 MT
(The primary disadvantage of these prototyping tools is that they cannot)
94 W( create the actual code for the)95 W
7200 28449 MT
(user interface.  Therefore,)
10 W( the interfaces must be re-coded after prototyping.  There is also the risk that the)9 W
7200 30278 MT
(programmers who implement the real user interface will)
39 W( ignore the prototype.  Therefore, a new research)40 W
7200 32107 MT
(tool is trying to provide a quick sketching interface and then convert the sketches into actual widgets [41].)SH
/Times-Bold SF
7200 35004 MT
(8.2.4.2 Cards)SH
/Times-Roman SF
8200 36833 MT
(Many graphical programs are limited to user interfaces that can be presented as a sequence of mostly)87 W
7200 38662 MT
(static pages, sometimes called ``frames,'' ``cards,'' or ``forms.''  Each page contains a)
131 W( set of widgets,)132 W
7200 40491 MT
(some of which cause transfer to other pages.  There is usually a fixed set of widgets)
150 W( to choose from,)149 W
7200 42320 MT
(which were coded by hand.)SH
8200 45251 MT
(An early example of this is Menulay)
380 W( [11],)
SH( which)
380 W( allows the designer to place text, graphical)381 W
7200 47080 MT
(potentiometers, iconic pictures, and light buttons)
35 W( on the screen and see exactly what the end user will see)34 W
7200 48909 MT
(when the application)
101 W( is run.  The designer does not need to be a programmer to use Menulay. Trillium)102 W
7475 50738 MT
([28], which is aimed at)
62 W( designing the user interface panels for photocopiers, is very similar to Menulay.)61 W
7200 52567 MT
(One strong advantage that Trillium has over Menulay is that the cards can be executed immediately as)111 W
7200 54396 MT
(they are designed since the specification is interpreted rather than compiled.)
78 W( Trillium)
430 W( also separates the)77 W
7200 56225 MT
(behavior of interactions from the graphic presentation and allows the designer)
166 W( to change the graphics)167 W
7200 58054 MT
(\050while keeping the same behavior\051 without)
98 W( programming.  One weakness is that it has little support for)97 W
7200 59883 MT
(frame-to-frame transitions, since this rarely is necessary for photocopiers.)SH
8200 62814 MT
(Probably, the most famous example of a card-based system is HyperCard from Apple.  There)
60 W( are now)61 W
7200 64643 MT
(many similar programs,)
20 W( such as GUIDE)
19 W( [81],)
SH( Spinnaker Plus)
19 W( [99],)
SH( and Tool Book)
19 W( [3].)
SH( In)
313 W( all of these, the)19 W
7200 66472 MT
(designer can easily create cards containing text fields,)
397 W( buttons, etc., along with various graphic)398 W
7200 68301 MT
(decorations. The)
551 W( buttons can transfer to other cards.  These programs provide a scripting)
138 W( language to)137 W
7200 70130 MT
(provide more flexibility for buttons.)
312 W( HyperCard's)
901 W( scripting language is called HyperTalk, and as)313 W
7200 71959 MT
(mentioned in section 8.2.1.3, is really an event language, since the programmer writes short pieces)
151 W( of)150 W
ES
%%Page: 30 31
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 30 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(code that are executed when input events occur.)SH
/Times-Bold SF
7200 10852 MT
(8.2.4.3 Interface Builders)SH
/Times-Roman SF
8200 12681 MT
(An)SH
/Times-Italic SF
9857 XM
(interface builder)38 W
/Times-Roman SF
17571 XM
(allows the designer to create dialog boxes, menus and)
38 W( windows that are to be part)39 W
7200 14510 MT
(of a larger user interface.)
7 W( These)
288 W( are also called)6 W
/Times-Italic SF
28302 XM
(Interface Development Tools)6 W
/Times-Roman SF
(. Interface)
287 W( builders allow the)6 W
7200 16339 MT
(designer to select from a pre-defined library of widgets, and place)
142 W( them on the screen using a mouse.)143 W
7200 18168 MT
(Other properties of the widgets)
62 W( can be set using property sheets.  Usually, there is also some support for)61 W
7200 19997 MT
(sequencing, such as bringing up sub-dialogs when a particular button is hit.  The Steamer project at)
34 W( BBN)35 W
7200 21826 MT
(demonstrated many of the ideas later incorporated into interface builders and was probably the first)223 W
7200 23655 MT
(object-oriented graphics system)
153 W( [101].)
SH( Other)
582 W( examples of research interface builders are DialogEditor)154 W
7475 25484 MT
([14], vu)
135 W( [94])
SH( and Gilt)
135 W( [55].)
SH( There)
544 W( are literally hundreds of commercial interface builders.  Just a few)134 W
7200 27313 MT
(examples are the NeXT)
75 W( Interface Builder)
76 W( [68],)
SH( Prototyper for the Macintosh)
76 W( [97],)
SH( WindowsMAKER for)76 W
7200 29142 MT
(Microsoft Windows on the PC)
84 W( [5],)
SH( UIMX for X Windows)
84 W( and Motif)
83 W( [118],)
SH( and devGuide from Sun for)83 W
7200 30971 MT
(OpenLook [107].)
SH( Many)
453 W( of the tools discussed above, such)
89 W( as the virtual toolkits, visual languages, and)90 W
7200 32800 MT
(application frameworks, also contain interface builders.)SH
8200 35731 MT
(Interface builders use the)
195 W( actual widgets from a toolkit, so they can be used to build parts of real)194 W
7200 37560 MT
(applications. Most)
373 W( will generate C code)
49 W( templates that can be compiled along with the application code.)50 W
7200 39389 MT
(Others generate a description of the interface in a language that can be read at run-time.)
106 W( For)
486 W( example,)105 W
7200 41218 MT
(UIMX generates a UIL)
28 W( description.  It is usually important that the programmer not edit the output of the)29 W
7200 43047 MT
(tools \050such as the generated C code\051 or else the tool can no longer be used for later modifications.)SH
8200 45978 MT
(Although interface builders make laying out the dialog boxes and menus easier, this is only part of)
49 W( the)48 W
7200 47807 MT
(user interface design)
52 W( problem.  These tools provide little guidance towards creating good user interfaces,)53 W
7200 49636 MT
(since they give designers significant freedom.  Another problem is that for any kind of program)
19 W( that has a)18 W
7200 51465 MT
(graphics area \050such as drawing programs, CAD, visual)
107 W( language editors, etc.\051, interface builders do not)108 W
7200 53294 MT
(help with the contents of the graphics pane.  Also,)
75 W( they cannot handle widgets that change dynamically.)74 W
7200 55123 MT
(For example if the contents of a menu or the layout of)
47 W( a dialog box changes based on program state, this)48 W
7200 56952 MT
(must be programmed by writing code.  To help with this part of the problem, some)
12 W( interface builders, like)11 W
7200 58781 MT
(UIMX [118], provide a C code interpreter.)SH
/Times-Bold SF
7200 61678 MT
(8.2.4.4 Data Visualization Tools)SH
/Times-Roman SF
8200 63507 MT
(An important commercial)
15 W( category of tools are dynamic data visualization systems.  These tools, which)16 W
7200 65336 MT
(tend to be)
89 W( quite expensive, emphasize the display of dynamically changing data on a computer, and are)88 W
7200 67165 MT
(used as front ends for simulations, process control, system monitoring, network management,)
129 W( and data)130 W
7200 68994 MT
(analysis. The)
493 W( interface to the designer is usually quite similar to an interface builder,)
109 W( with a palette of)108 W
7200 70823 MT
(gauges, graphers, knobs)
100 W( and switches that can be placed interactively.  However, these controls usually)101 W
ES
%%Page: 31 32
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 31 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(are not)
118 W( from a toolkit and are supplied by the tool.  Example tools in this category include DataViews)117 W
7475 9784 MT
([113], SL-GMS [96], and VAPS [115].)SH
/Times-Bold SF
7200 12681 MT
(8.2.4.5 Editors for Application-Specific Graphics)SH
/Times-Roman SF
8200 14510 MT
(When an application has)
145 W( custom graphics, it would be useful if the designer could draw pictures of)146 W
7200 16339 MT
(what the graphics should look like rather)
155 W( than having to write code for this.  The problem is that the)154 W
7200 18168 MT
(graphic objects usually need)
199 W( to change at run time, based on the actual data and end user's actions.)200 W
7200 19997 MT
(Therefore, the designer can only draw an)203 W
/Times-Italic SF
26943 XM
(example)SH
/Times-Roman SF
31085 XM
(of the desired display, which will be)
203 W( modified at)202 W
7200 21826 MT
(run-time, and)
134 W( so these tools are called ``demonstrational programming'')
135 W( [60].)
SH( This)
545 W( distinguishes these)135 W
7200 23655 MT
(programs from the graphical tools of the previous three sections, where the full picture can)
15 W( be specified at)14 W
7200 25484 MT
(design time.  As a result of the)63 W
/Times-Italic SF
21421 XM
(generalization)SH
/Times-Roman SF
28115 XM
(task of converting the example objects into)
63 W( parameterized)64 W
7200 27313 MT
(prototypes that can change at run-time, most of these systems are still in the research phase.)SH
8200 30244 MT
(Peridot [48])
SH( allows new, custom widgets to be created.  The)
110 W( primitives that the designer manipulates)109 W
7200 32073 MT
(with the mouse are rectangles, circles, text, and lines.)
19 W( The)
315 W( system generalizes from the designer's actions)20 W
7200 33902 MT
(to create parameterized, object-oriented procedures like those that might be found in toolkits.)484 W
7200 35731 MT
(Experiments showed that Peridot can)
100 W( be used by non-programmers.  Lapidary)
101 W( [50])
SH( extends the ideas of)101 W
7200 37560 MT
(Peridot to allow general application-specific objects to be drawn.)
20 W( For)
313 W( example, the designer can draw the)19 W
7200 39389 MT
(nodes and arcs for a graph program.  The)
61 W( DEMO system)
62 W( [18])
SH( allows some dynamic, run-time properties)62 W
7200 41218 MT
(of the objects to be demonstrated, such as how objects are created.  The Marquise tool)
119 W( [63])
SH( allows)
119 W( the)118 W
7200 43047 MT
(designer to demonstrate)94 W
/Times-Italic SF
18265 XM
(when)SH
/Times-Roman SF
20956 XM
(various behaviors should happen, and supports palettes which control the)94 W
7200 44876 MT
(behaviors. Research)
275 W( continues on making these ideas practical.)SH
13 /Times-Bold AF
7200 48627 MT
(8.3 Specialized Tools)SH
11 /Times-Roman AF
8200 50456 MT
(For some application domains, there are customized tools that provide significant high-level support.)115 W
7200 52285 MT
(These tend to be quite expensive, however \050i.e., US$20,000 to US$50,000\051.)
295 W( For)
866 W( example, in the)296 W
7200 54114 MT
(aeronautics and real-time control areas, there are a)
243 W( number of high-level tools, including AutoCode)242 W
7475 55943 MT
([4] and InterMAPhics [86].)SH
14 /Times-Bold AF
7200 60481 MT
(9. Technology Transfer)SH
11 /Times-Roman AF
8200 62310 MT
(User interface)
51 W( tools are an area where research has had a tremendous impact on the current practice of)52 W
7200 64139 MT
(software development.  Of course, window managers and the resulting ``GUI style'' comes)
184 W( from the)183 W
7200 65968 MT
(seminal research at)
136 W( the Stanford Research Institute, Xerox Palo Alto Research Center, and MIT in the)137 W
7200 67797 MT
(1970s. Interface)
429 W( builders)
77 W( and ``card'' programs like HyperCard were invented in research labs at BBN,)76 W
7200 69626 MT
(the University of Toronto, Xerox)
198 W( PARC, and others.  Now, interface builders are at least a US$100)199 W
7200 71455 MT
(million per year business and are widely used for commercial)
11 W( software development.  Event languages, as)10 W
ES
%%Page: 32 33
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 32 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(widely used in HyperTalk and elsewhere, were first investigated in research labs.  The next generation of)35 W
7200 9784 MT
(environments, like OLE)
10 W( and OpenDoc, will be based on the component architecture which was developed)9 W
7200 11613 MT
(in the Andrew)
187 W( environment from CMU.  Thus, whereas some early UIMS approaches like transition)188 W
7200 13442 MT
(networks and grammars may not have been successful, overall,)
250 W( the user interface tool research has)249 W
7200 15271 MT
(changed the way that software is developed.)SH
14 /Times-Bold AF
7200 19809 MT
(10. Evaluating User Interface Tools)SH
11 /Times-Roman AF
8200 21638 MT
(There are clearly a large number of approaches to how)
299 W( tools work, and there are research and)300 W
7200 23467 MT
(commercial tools that use each of the techniques.)
104 W( When)
482 W( faced with a particular programming task, the)103 W
7200 25296 MT
(designer might ask which tool is the most appropriate.  Different)
41 W( approaches are appropriate for different)42 W
7200 27125 MT
(kinds of tasks, and orthogonally, there are some)
94 W( dimensions that are useful for evaluating all tools.  An)93 W
7200 28954 MT
(important point is that in today's)
32 W( market, there is probably a commercial higher-level tool appropriate for)33 W
7200 30783 MT
(most tasks, so)
18 W( if you are programming directly at the window manager or even toolkit layer, there may be)17 W
7200 32612 MT
(a tool that will save you much work.)SH
13 /Times-Bold AF
7200 36363 MT
(10.1 Approaches)SH
11 /Times-Roman AF
8200 38192 MT
(Using the commercial tools, if you are designing a)
282 W( command-line style interface, then a parser-)283 W
7200 40021 MT
(generator like YACC and Lex is appropriate.)
28 W( If)
329 W( you are creating a graphical application, then you should)27 W
7200 41850 MT
(definitely be using)
49 W( a toolkit appropriate to your platform.  If there is an application framework available,)50 W
7200 43679 MT
(it will probably be very helpful.  For creating the dialog)
116 W( boxes and menus, an interface builder is very)115 W
7200 45508 MT
(useful, and generally easier)
41 W( to use than declarative languages like UIL.  If your application is entirely \050or)42 W
7200 47337 MT
(mostly\051 pages of information with some fields for the user to fill)
253 W( in, then the card tools might be)252 W
7200 49166 MT
(appropriate.)SH
8200 52097 MT
(Among the approaches that are still in the research phase, constraints seem)
254 W( quite appropriate for)255 W
7200 53926 MT
(specifying graphical relationships,)
88 W( automatic generation may be useful for dialog boxes and menus, and)87 W
7200 55755 MT
(graphical editors will allow the graphical elements of the user interface to be drawn.)SH
8200 58686 MT
(There is a big debate)
151 W( going on about the model-based and direct graphical specification approaches)152 W
7475 60515 MT
([122, 105].)
SH( The)
777 W( model-based tools provide a top-down \050or ``application-out''\051 approach where the)250 W
7200 62344 MT
(functions are specified first, whereas the)
171 W( graphical tools provide a bottom-up \050or ``user-interface-in''\051)172 W
7200 64173 MT
(approach where the user interface is designed before the functions.  Furthermore,)
86 W( the automatic, model-)85 W
7200 66002 MT
(based approaches seem to provide too little flexibility to the)
16 W( designer, whereas the graphical tools provide)17 W
7200 67831 MT
(too much flexibility and not enough guidance.  Some researchers are trying to create systems)
265 W( that)264 W
7200 69660 MT
(combine both approaches to try to achieve the advantages of both [20].)SH
ES
%%Page: 33 34
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 33 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
13 /Times-Bold AF
7200 8071 MT
(10.2 Dimensions)SH
11 /Times-Roman AF
8200 9900 MT
(There are)
6 W( many dimensions along which you might evaluate user interface tools.  The importance given)7 W
7200 11729 MT
(to these different factors will depend on the type of application to be created, and the needs of)
216 W( the)215 W
7200 13558 MT
(designers.)SH
/Symbol SF
9169 15136 MT
(\267)SH
/Times-Bold SF
9950 XM
(Depth)SH
/Times-Roman SF
(. How)
283 W( much of the user interface does the tool cover?)
4 W( For)
284 W( example, Interface Builders)5 W
9950 16332 MT
(help with dialog boxes, but do not help with creating interactive graphics.  Does the)
19 W( tool help)18 W
9950 17528 MT
(with the evaluation of the interfaces?)SH
/Symbol SF
9169 19422 MT
(\267)SH
/Times-Bold SF
9950 XM
(Breadth)SH
/Times-Roman SF
(. How)
581 W( many different user interface styles are supported, or is the resulting user)153 W
9950 20618 MT
(interface limited to just one style, such as a)
55 W( sequence of cards?  If this is a higher-level tool,)54 W
9950 21814 MT
(does it cover all the widgets in the underlying toolkit?)
87 W( Can)
451 W( new interaction techniques and)88 W
9950 23010 MT
(widgets be added if necessary?)SH
/Symbol SF
9169 24904 MT
(\267)SH
/Times-Bold SF
9950 XM
(Portability)SH
/Times-Roman SF
(. Will)
1018 W( the resulting user interface run on multiple platforms, such as X,)371 W
9950 26100 MT
(Macintosh and Windows?)SH
/Symbol SF
9169 27994 MT
(\267)SH
/Times-Bold SF
9950 XM
(Ease of use of)
116 W( tools)117 W
/Times-Roman SF
(. How)
509 W( difficult are the tools to use?  For toolkits and most language-)117 W
9950 29190 MT
(based higher-level tools, highly-trained professional)
227 W( programmers are needed.  For some)226 W
9950 30386 MT
(graphical tools, even inexperienced end-users can)
120 W( generate user interfaces.  Also, since the)121 W
9950 31582 MT
(designers are)
60 W( themselves users of the tools, the conventional user-interface principles can be)59 W
9950 32778 MT
(used to evaluate the quality of the tools' own user interface.)SH
/Symbol SF
9169 34672 MT
(\267)SH
/Times-Bold SF
9950 XM
(Efficiency for designers)53 W
/Times-Roman SF
(. How)
381 W( fast can designers create user interfaces)
53 W( with the tool?  This)54 W
9950 35868 MT
(is often related to the quality of the user interface of the tool.)SH
/Symbol SF
9169 37762 MT
(\267)SH
/Times-Bold SF
9950 XM
(Quality of resulting interfaces)76 W
/Times-Roman SF
(. Does)
427 W( the tool generate high-quality user interfaces?  Does)75 W
9950 38958 MT
(the tool help the designer evaluate and improve the quality?  Many)
75 W( tools allow the designer)76 W
9950 40154 MT
(to produce any interface desired, so they provide no specific help)
33 W( in improving the quality of)32 W
9950 41350 MT
(the user interfaces.)SH
/Symbol SF
9169 43244 MT
(\267)SH
/Times-Bold SF
9950 XM
(Performance of resulting interface)171 W
/Times-Roman SF
(. How)
617 W( fast does)
171 W( the resulting user interface operate?)172 W
9950 44440 MT
(Some tools interpret)
8 W( the specifications at run-time, or provide many layers of software, which)7 W
9950 45636 MT
(may make)
394 W( the resulting user interface too slow on some target machines.  Another)395 W
9950 46832 MT
(consideration is the space overhead since some tools require large libraries)
66 W( to be in memory)65 W
9950 48028 MT
(at run-time.)SH
/Symbol SF
9169 49922 MT
(\267)SH
/Times-Bold SF
9950 XM
(Price)SH
/Times-Roman SF
(. Some)
507 W( tools are provided free by research organizations, such)
116 W( as the xt toolkit from)117 W
9950 51118 MT
(MIT and Garnet from)
64 W( CMU.  Most personal computers and workstations today come with a)63 W
9950 52314 MT
(free toolkit.  Commercial higher level tools can range from $200 to $50,000, depending)
98 W( on)99 W
9950 53510 MT
(their capabilities.)SH
/Symbol SF
9169 55404 MT
(\267)SH
/Times-Bold SF
9950 XM
(Robustness and Support)77 W
/Times-Roman SF
(. In one study, users of many of the commercial)
77 W( tools complained)76 W
9950 56600 MT
(about bugs even in the)
361 W( officially released version)
362 W( [57],)
SH( so checking for robustness is)362 W
9950 57796 MT
(important. Since)
509 W( many of the tools are quite hard to use,)
117 W( the level of training and support)116 W
9950 58992 MT
(provided by the vendor might be important.)SH
8200 61923 MT
(Naturally, there are tradeoffs among these criteria.  Generally, tools that have the most power)
109 W( \050depth)110 W
7200 63752 MT
(and breadth\051 are more difficult to use.  The tools that are easiest to)
109 W( use might be most efficient for the)108 W
7200 65581 MT
(designer, but not if they cannot create the desired interfaces.)SH
8200 68512 MT
(As tools become more widespread, reviews and evaluations of them)
293 W( are beginning to appear in)294 W
7200 70341 MT
(magazines such as)91 W
/Times-Italic SF
15872 XM
(Open Systems Today)90 W
/Times-Roman SF
25581 XM
(for Unix and)90 W
/Times-Italic SF
31746 XM
(PC Magazine)90 W
/Times-Roman SF
(. Market)
455 W( research firms are writing)90 W
ES
%%Page: 34 35
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 34 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
7200 7955 MT
(reports evaluating various tools [126, 24, 16].  Also, there are a few formal studies of tools [32].)SH
14 /Times-Bold AF
7200 12493 MT
(11. Research Issues)SH
11 /Times-Roman AF
8200 14322 MT
(Although there are many user interface tools, there are plenty of areas in which)
173 W( further research is)174 W
7200 16151 MT
(needed. A)
537 W( report prepared for an NSF study discusses future research ideas for user interface tools at)130 W
7200 17980 MT
(length [76].  Here, a few of the important ones are summarized.)SH
13 /Times-Bold AF
7200 21731 MT
(11.1 New Programming Languages)SH
11 /Times-Roman AF
8200 23560 MT
(The built-in input/output primitives in today's programming languages support a)
61 W( textual question-and-)62 W
7200 25389 MT
(answer style of user interface which is modal and well-known to be poor.  Most of today's tools)
158 W( use)157 W
7200 27218 MT
(libraries and interactive programs)
87 W( which are separate from programming languages.  However, many of)88 W
7200 29047 MT
(the techniques, such as object-oriented programming, multiple-processing, and constraints,)
312 W( are best)311 W
7200 30876 MT
(provided as)230 W
/Times-Italic SF
13036 XM
(part)SH
/Times-Roman SF
15375 XM
(of the programming)
230 W( language.  Furthermore, an integrated environment, where the)231 W
7200 32705 MT
(graphical parts of an application can be specified graphically and the rest textually, would make the)200 W
7200 34534 MT
(generation of applications much easier.  A new book discusses)
216 W( how programming languages can be)217 W
7200 36363 MT
(improved to better support user interface software [58].)SH
13 /Times-Bold AF
7200 40114 MT
(11.2 Increased Depth)SH
11 /Times-Roman AF
8200 41943 MT
(Many researchers are trying)
319 W( to create tools that will cover more of the user interface, such as)318 W
7200 43772 MT
(application-specific graphics and behaviors.)
211 W( The)
698 W( challenge here is to allow flexibility to application)212 W
7200 45601 MT
(developers while still providing a high level of support.  Tools should also be able to support Help,)
15 W( Undo,)14 W
7200 47430 MT
(and Aborting of operations.)SH
8200 50361 MT
(Today's user interface tools mostly help with the)92 W
/Times-Italic SF
30748 XM
(generation)SH
/Times-Roman SF
35881 XM
(of the code of the interface, and assume)93 W
7200 52190 MT
(that the fundamental user interface)91 W
/Times-Italic SF
23200 XM
(design)SH
/Times-Roman SF
26437 XM
(is complete.  What are also needed are tools to help with the)90 W
7200 54019 MT
(generation, specification,)
32 W( and analysis of the design of the interface)
33 W( [41].)
SH( For)
341 W( example, an important first)33 W
7200 55848 MT
(step in user interface design is task analysis,)
26 W( where the designer identifies the particular tasks that the end)25 W
7200 57677 MT
(user will need to perform.  Research should be directed at creating)
122 W( tools to support these methods and)123 W
7200 59506 MT
(techniques. These)
393 W( might eventually be integrated with the code generation tools, so that the information)59 W
7200 61335 MT
(generated during)
28 W( early design can be fed into automatic generation tools, possibly to produce an interface)29 W
7200 63164 MT
(directly from the early)
361 W( analyses.  The information might also be used to automatically generate)360 W
7200 64993 MT
(documentation and run-time help.)SH
8200 67924 MT
(Another approach is to allow the designer to specify the design in)
134 W( an appropriate notation, and then)135 W
7200 69753 MT
(provide tools to convert that notation into interfaces.  For example, the UAN)
235 W( [26])
SH( is)
235 W( a notation for)234 W
7200 71582 MT
(expressing the end user's actions and the system's responses.)SH
ES
%%Page: 35 36
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 35 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
8200 7955 MT
(Finally, much work is needed in ways for tools to help)
9 W( evaluate interface designs.  Initial attempts, such)10 W
7200 9784 MT
(as in MIKE)
92 W( [73],)
SH( have highlighted the need for better models and metrics against which to)
92 W( evaluate the)91 W
7200 11613 MT
(user interfaces.  Research in this area is)
122 W( continuing by cognitive psychologists and other user interface)123 W
7200 13442 MT
(researchers \050e.g., [12]\051.)SH
13 /Times-Bold AF
7200 17193 MT
(11.3 Increased Breadth)SH
11 /Times-Roman AF
8200 19022 MT
(We can expect the user interfaces of tomorrow to be different from the)
187 W( conventional window-and-)186 W
7200 20851 MT
(mouse interfaces of today, and tools will have to change to support the new styles.  For example,)
100 W( most)101 W
7200 22680 MT
(tools today only deal with two-dimensional objects, but there is already a demand)
273 W( to provide 3-D)272 W
7200 24509 MT
(visualizations and animations.  New input devices and)
56 W( techniques will probably replace the conventional)57 W
7200 26338 MT
(mouse and menu)
36 W( styles.  For example, gesture and handwriting recognition are appearing in mass-market)35 W
7200 28167 MT
(commercial products, such as notepad computers and ``personal digital assistants'' like Apple's)
74 W( Newton)75 W
7200 29996 MT
(\050gesture recognition has actually been used since the 1970s in commercial)
21 W( CAD tools\051.  ``Virtual reality'')20 W
7200 31825 MT
(systems, where the computer creates an artificial world and allows the user to)
214 W( explore it, cannot be)215 W
7200 33654 MT
(handled by any of today's tools.  In these ``non-WIMP'' applications)
29 W( \050WIMP stands for Windows, Icons,)28 W
7200 35483 MT
(Menus and Pointing)
87 W( devices\051, designers will also need better control over the timing of the interface, to)88 W
7200 37312 MT
(support animations and)
20 W( various new media like video)
19 W( [69].)
SH( Although)
313 W( a few tools are directed at multiple-)19 W
7200 39141 MT
(user applications, there are no)
132 W( direct graphical specification tools, and the current tools are limited the)133 W
7200 40970 MT
(styles of applications they support.)SH
8200 43901 MT
(A more immediate concern is)
132 W( supporting interfaces that can be moved from one natural language to)131 W
7200 45730 MT
(another \050like English to)
224 W( French\051.  Internationalizing an interface is much more difficult than simply)225 W
7200 47559 MT
(translating the text strings, and)
21 W( may include different number, date, and time formats, new input methods,)20 W
7200 49388 MT
(redesigned layouts, different color schemes, and new icons)
161 W( [88].)
SH( How)
597 W( can future tools help)
161 W( with this)162 W
7200 51217 MT
(process?)SH
13 /Times-Bold AF
7200 54968 MT
(11.4 End User Programming and Customization)SH
11 /Times-Roman AF
8200 56797 MT
(One of the most successful computer programs of all)
75 W( time is the spreadsheet.  The primary reason for)74 W
7200 58626 MT
(its success is that end users can program \050by writing formulas and macros\051.  However,)302 W
/Times-Italic SF
49941 XM
(end user)302 W
7200 60455 MT
(programming)SH
/Times-Roman SF
13706 XM
(is rare in other applications, and where it exists, usually requires learning conventional)181 W
7200 62284 MT
(programming. For)
349 W( example, AutoCAD)
37 W( provides Lisp for customization.  More effective mechanisms for)38 W
7200 64113 MT
(users to)
34 W( customize existing applications and create new ones are needed)
33 W( [61].)
SH( However,)
341 W( these should not)33 W
7200 65942 MT
(be built into individual)
38 W( applications as is done today, since this means that the user must learn a different)39 W
7200 67771 MT
(programming technique for each application.  Instead,)
184 W( the facilities should be provided at the system)183 W
7200 69600 MT
(level, and therefore should be part of the underlying toolkit.  Naturally, since this)
27 W( is aimed at end users, it)28 W
7200 71429 MT
(will not be like programming in C, but rather at some higher level.)SH
ES
%%Page: 36 37
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 36 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 SS 
8200 7955 MT
(The X Business Group predicts that there will be an)
120 W( increased use of tools by end users, rather than)119 W
7200 9784 MT
(professional software developers,)
277 W( which will present enormous opportunities and challenges to tool)278 W
7200 11613 MT
(creators [126].)SH
8200 14544 MT
(There are many levels at which users might want to modify these ``malleable interfaces:'' simple)217 W
7200 16373 MT
(changing of menus and properties, direct programming of new)
350 W( functions like in spreadsheets, or)351 W
7200 18202 MT
(connecting together pre-built components, as in the)
219 W( Andrew and OLE frameworks.  Future UI tools)218 W
7200 20031 MT
(should support changes at all of these levels.)SH
13 /Times-Bold AF
7200 23782 MT
(11.5 Application and UI Separation)SH
11 /Times-Roman AF
8200 25611 MT
(One of the fundamental goals of user interface tools)
6 W( is to allow the better modularization and separation)7 W
7200 27440 MT
(of user interface code from application code.)
150 W( However,)
573 W( a recent survey reported that modern toolkits)149 W
7200 29269 MT
(actually make this separation more difficult, due to the large number of)
151 W( call-back procedures required)152 W
7475 31098 MT
([57]. Therefore,)
453 W( further research is needed into ways to better modularize the code,)
89 W( and how tools can)88 W
7200 32927 MT
(support this.)SH
13 /Times-Bold AF
7200 36678 MT
(11.6 Tools for the Tools)SH
11 /Times-Roman AF
8200 38507 MT
(It is very difficult to create the tools described)
192 W( in this paper.  Each one takes an enormous effort.)193 W
7200 40336 MT
(Therefore, work is needed in ways to make)
13 W( the tools themselves easier to create.  For example, the Garnet)12 W
7200 42165 MT
(toolkit is exploring mechanisms specifically designed)
77 W( to make high-level graphical tools easier to create)78 W
7475 43994 MT
([62]. The)
527 W( Unidraw framework has)
126 W( also proven useful for creating interface builders)
125 W( [120].)
SH( However,)525 W
7200 45823 MT
(more work is needed.)SH
14 /Times-Bold AF
7200 50361 MT
(12. Conclusions)SH
11 /Times-Roman AF
8200 52190 MT
(The area of user interface tools is expanding rapidly.  Five years ago,)
184 W( you would have been hard-)185 W
7200 54019 MT
(pressed to find any successful commercial higher-level tools, but now there)
72 W( are over 100 different tools,)71 W
7200 55848 MT
(and tools are)
57 W( turning into a billion dollar a year business.  Chances are that today, whatever your project)58 W
7200 57677 MT
(is, there is a tool that will help.)
13 W( Tools)
300 W( that are coming out of research labs are covering increasingly more)12 W
7200 59506 MT
(of the user interface task, are more effective at helping the designer, and are creating better user)295 W
7200 61335 MT
(interfaces. As)
655 W( more companies and researchers are attracted to this area, we can expect)
190 W( the pace of)189 W
7200 63164 MT
(innovation to continue to accelerate.  There will be many exciting and useful new tools available in the)90 W
7200 64993 MT
(near future.)SH
ES
%%Page: 37 38
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 37 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
14 /Times-Bold AF
7200 8138 MT
(Acknowledgements)SH
11 /Times-Roman AF
8200 10981 MT
(This research was sponsored by)
371 W( the Avionics Lab, Wright Research and Development Center,)370 W
7200 12810 MT
(Aeronautical Systems Division \050AFSC\051, U. S.)
83 W( Air Force, Wright-Patterson AFB, OH 45433-6543 under)84 W
7200 14639 MT
(Contract F33615-90-C-1465, Arpa)
311 W( Order No. 7597.  The views and conclusions contained in this)310 W
7200 16468 MT
(document are those of the authors and should not be interpreted as representing the official policies,)
6 W( either)7 W
7200 18297 MT
(expressed or implied, of the U.S. Government.)SH
14 /Times-Bold AF
7200 22835 MT
(References)SH
11 SS 
7200 24786 MT
(1.)SH
/Times-Roman SF
8575 XM
(Adobe Systems, Inc.)SH
/Times-Italic SF
18229 XM
(Postscript Language Reference Manual.)SH
/Times-Roman SF
36559 XM
(Addison-Wesley, 1985.)SH
/Times-Bold SF
7200 26737 MT
(2.)SH
/Times-Roman SF
8575 XM
(Apple Computer, Inc.)SH
/Times-Italic SF
18717 XM
(Inside Macintosh.)SH
/Times-Roman SF
27149 XM
(Addison-Wesley, 1985.)SH
/Times-Bold SF
7200 28688 MT
(3.)SH
/Times-Roman SF
8575 XM
(Asymetrix Corporation.  ToolBook.  110 110th Ave. N.E., Suite 717, Bellevue, WA 98004.  \050206\051)SH
7200 29884 MT
(462-0501.)SH
/Times-Bold SF
7200 31835 MT
(4.)SH
/Times-Roman SF
8575 XM
(Integrated Systems.  AutoCode.  3260 Jay Street, Santa Clara, CA 94054.  \050408\051 980-1500.)SH
/Times-Bold SF
7200 33786 MT
(5.)SH
/Times-Roman SF
8575 XM
(Blue Sky Software Corporation.  WindowsMAKER. 2375 East Tropicana Ave., Suite 320, Las Vegas,)SH
7200 34982 MT
(NV 89119.  \050702\051 465-6365.)SH
/Times-Bold SF
7200 36933 MT
(6.)SH
/Times-Roman SF
8575 XM
(Sara A. Bly and Jarrett K. Rosenberg.  A Comparison of Tiled and Overlapping Windows.  Human)SH
7200 38129 MT
(Factors in Computing Systems, Proceedings SIGCHI'86, Boston, Mass, April, 1986, pp. 101-106.)SH
/Times-Bold SF
7200 40080 MT
(7.)SH
/Times-Roman SF
8575 XM
(Booz Allen & Hamilton Inc.  NeXTStep vs. Other Development Environments; Comparative Study.)SH
7200 41276 MT
(Report available from NeXT Computer, Inc.)SH
/Times-Bold SF
7200 43227 MT
(8.)SH
/Times-Roman SF
8575 XM
(Alan Borning.  "The Programming Language Aspects of Thinglab; a Constraint-Oriented Simulation)SH
7200 44423 MT
(Laboratory".)SH
/Times-Italic SF
13360 XM
(ACM Transactions on Programming Languages and Systems 3)SH
/Times-Roman SF
(, 4 \050Oct. 1981\051, 353-387.)SH
/Times-Bold SF
7200 46374 MT
(9.)SH
/Times-Roman SF
8575 XM
(Alan Borning and Robert Duisberg.  "Constraint-Based Tools for Building User Interfaces".)SH
/Times-Italic SF
49644 XM
(ACM)SH
7200 47570 MT
(Transactions on Graphics 5)SH
/Times-Roman SF
(, 4 \050Oct. 1986\051, 345-374.)SH
/Times-Bold SF
7200 49521 MT
(10.)SH
/Times-Roman SF
9125 XM
(Alan Borning.  Defining Constraints Graphically.  Human Factors in Computing Systems,)SH
7200 50717 MT
(Proceedings SIGCHI'86, Boston, MA, April, 1986, pp. 137-143.)SH
/Times-Bold SF
7200 52668 MT
(11.)SH
/Times-Roman SF
9125 XM
(W. Buxton, M.R. Lamb, D. Sherman, and K.C. Smith.  Towards a Comprehensive User Interface)SH
7200 53864 MT
(Management System.  Computer Graphics, 17\0503\051, Proceedings SIGGRAPH'83, Detroit, Mich, July, 1983,)SH
7200 55060 MT
(pp. 35-42.)SH
/Times-Bold SF
7200 57011 MT
(12.)SH
/Times-Roman SF
9125 XM
(Michael D. Byrne, Scott D. Wood, Piyawadee Sukaviriya, James D. Foley and David E. Kieras.)SH
7200 58207 MT
(Automating Interface Evaluation.  Human Factors in Computing Systems, Proceedings SIGCHI'94,)SH
7200 59403 MT
(Boston, MA, April, 1994, pp. 232-237.)SH
/Times-Bold SF
7200 61354 MT
(13.)SH
/Times-Roman SF
9125 XM
(Luca Cardelli and Rob Pike.  Squeak: A Language for Communicating with Mice.  Computer)SH
7200 62550 MT
(Graphics, Proceedings SIGGRAPH'85, San Francisco, CA, July, 1985, pp. 199-204.)SH
/Times-Bold SF
7200 64501 MT
(14.)SH
/Times-Roman SF
9125 XM
(Luca Cardelli.  Building User Interfaces by Direct Manipulation.  ACM SIGGRAPH Symposium on)SH
7200 65697 MT
(User Interface Software and Technology, Proceedings UIST'88, Banff, Alberta, Canada, Oct., 1988, pp.)SH
7200 66893 MT
(152-166.)SH
/Times-Bold SF
7200 68844 MT
(15.)SH
/Times-Roman SF
9125 XM
(Richard Chimera.  Evaluation of Platform Independent User Interface Builders.  Tech. Rept. Working)SH
7200 70040 MT
(paper 93-09, Human-Computer Interaction Laboratory, University of Maryland, March, 1993.)SH
ES
%%Page: 38 39
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 38 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(16.)SH
/Times-Roman SF
9125 XM
(Donald A. DePalma and Stuart D. Woodring.  "Client/Server Power Tools Futures".)SH
/Times-Italic SF
46714 XM
(The Software)SH
7200 9151 MT
(Strategy Report 4)SH
/Times-Roman SF
(, 1 \050April 1993\051, 2-13. Forrester Research, One Brattle Square, Camb, MA 02138..)SH
/Times-Bold SF
7200 11102 MT
(17.)SH
/Times-Roman SF
9125 XM
(Easel. Workbench.)
275 W( 25 Corporate Drive, Burlington, MA 01803.  \050617\051 221-2100.)SH
/Times-Bold SF
7200 13053 MT
(18.)SH
/Times-Roman SF
9125 XM
(Gene L. Fisher, Dale E. Busse, and David A. Wolber.  Adding Rule-Based Reasoning to a)SH
7200 14249 MT
(Demonstrational Interface Builder.  ACM SIGGRAPH Symposium on User Interface Software and)SH
7200 15445 MT
(Technology, Proceedings UIST'92, Monterey, CA, Nov., 1992, pp. 89-97.)SH
/Times-Bold SF
7200 17396 MT
(19.)SH
/Times-Roman SF
9125 XM
(Mark A. Flecchia and R. Daniel Bergeron.  Specifying Complex Dialogs in ALGAE.  Human Factors)SH
7200 18592 MT
(in Computing Systems, CHI+GI'87, Toronto, Ont., Canada, April, 1987, pp. 229-234.)SH
/Times-Bold SF
7200 20543 MT
(20.)SH
/Times-Roman SF
9125 XM
(Martin R. Frank and James D. Foley.  Model-Based User Interface Design by Example and by)SH
7200 21739 MT
(Interview. ACM)
275 W( SIGGRAPH Symposium on User Interface Software and Technology, Proceedings)SH
7200 22935 MT
(UIST'93, Atlanta, GA, Nov., 1993, pp. 129-137.)SH
/Times-Bold SF
7200 24886 MT
(21.)SH
/Times-Roman SF
9125 XM
(Michael Gleicher.  A Graphics Toolkit Based on Differential Constraints.  ACM SIGGRAPH)SH
7200 26082 MT
(Symposium on User Interface Software and Technology, Proceedings UIST'93, Atlanta, GA, Nov., 1993,)SH
7200 27278 MT
(pp. 109-120.)SH
/Times-Bold SF
7200 29229 MT
(22.)SH
/Times-Roman SF
9125 XM
(Mark Green.  "A Survey of Three Dialog Models".)SH
/Times-Italic SF
32075 XM
(ACM Transactions on Graphics 5)SH
/Times-Roman SF
(, 3 \050July 1986\051,)SH
7200 30425 MT
(244-275.)SH
/Times-Bold SF
7200 32376 MT
(23.)SH
/Times-Roman SF
9125 XM
(Nuno M. Guimaraes, Nuno M. Correia, and Telmo A. Carmo.  Programming Time in Multimedia)SH
7200 33572 MT
(User Interfaces.  ACM SIGGRAPH Symposium on User Interface Software and Technology, Proceedings)SH
7200 34768 MT
(UIST'92, Monterey, CA, Nov., 1992, pp. 125-134.)SH
/Times-Bold SF
7200 36719 MT
(24.)SH
/Times-Roman SF
9125 XM
(Mark Hanner.  Senior Research Analyst.  Meta Group.  500 Airport Blvd. Burlingame, CA 94010.)SH
7200 37915 MT
(Private Communication.)SH
/Times-Bold SF
7200 39866 MT
(25.)SH
/Times-Roman SF
9125 XM
(H. Rex Hartson and Deborah Hix.  "Human-Computer Interface Development: Concepts and Systems)SH
7200 41062 MT
(for Its Management".)SH
/Times-Italic SF
17148 XM
(Computing Surveys 21)SH
/Times-Roman SF
(, 1 \050March 1989\051, 5-92.)SH
/Times-Bold SF
7200 43013 MT
(26.)SH
/Times-Roman SF
9125 XM
(H. Rex Hartson, Antonio C. Siochi, and Deborah Hix.  "The UAN: A User-Oriented Representation)SH
7200 44209 MT
(for Direct Manipulation Interface Designs".)SH
/Times-Italic SF
26982 XM
(ACM Transactions on Information Systems 8)SH
/Times-Roman SF
(, 3 \050July 1990\051,)SH
7200 45405 MT
(181-203.)SH
/Times-Bold SF
7200 47356 MT
(27.)SH
/Times-Roman SF
9125 XM
(Philip J. Hayes, Pedro A. Szekely, and Richard A. Lerner.  Design Alternatives for User Interface)SH
7200 48552 MT
(Management Systems Based on Experience with COUSIN.  Human Factors in Computing Systems,)SH
7200 49748 MT
(Proceedings SIGCHI'85, San Francisco, CA, April, 1985, pp. 169-175.)SH
/Times-Bold SF
7200 51699 MT
(28.)SH
/Times-Roman SF
9125 XM
(D. Austin Henderson, Jr.  The Trillium User Interface Design Environment.  Human Factors in)SH
7200 52895 MT
(Computing Systems, Proceedings SIGCHI'86, Boston, MA, April, 1986, pp. 221-227.)SH
/Times-Bold SF
7200 54846 MT
(29.)SH
/Times-Roman SF
9125 XM
(Ralph D. Hill.  "Supporting Concurrency, Communication and Synchronization in Human-Computer)SH
7200 56042 MT
(Interaction \320 The Sassafras UIMS".)SH
/Times-Italic SF
23990 XM
(ACM Transactions on Graphics 5)SH
/Times-Roman SF
(, 3 \050July 1986\051, 179-210.)SH
/Times-Bold SF
7200 57993 MT
(30.)SH
/Times-Roman SF
9125 XM
(Ralph D. Hill, Tom Brinck, John F. Patterson, Steven L. Rohall, and Wayne T. Wilner.  "The)SH
7200 59189 MT
(Rendezvous Language and Architecture".)SH
/Times-Italic SF
26095 XM
(Comm. ACM 36)SH
/Times-Roman SF
(, 1 \050Jan. 1993\051, 62-67.)SH
/Times-Bold SF
7200 61140 MT
(31.)SH
/Times-Roman SF
9125 XM
(Ralph D. Hill.  The Rendezvous Constraint Maintenance System.  ACM SIGGRAPH Symposium on)SH
7200 62336 MT
(User Interface Software and Technology, Proceedings UIST'93, Atlanta, GA, Nov., 1993, pp. 225-234.)SH
/Times-Bold SF
7200 64287 MT
(32.)SH
/Times-Roman SF
9125 XM
(Deborah Hix.  A Procedure for Evaluating Human-Computer Interface Development Tools.  ACM)SH
7200 65483 MT
(SIGGRAPH Symposium on User Interface Software and Technology, Proceedings UIST'89,)SH
7200 66679 MT
(Williamsburg, VA, Nov., 1989, pp. 53-61.)SH
/Times-Bold SF
7200 68630 MT
(33.)SH
/Times-Roman SF
9125 XM
(Scott E. Hudson and John T. Stasko.  Animation Support in a User Interface Toolkit:  Flexible,)SH
7200 69826 MT
(Robust, and Reusable Abstractions.  ACM SIGGRAPH Symposium on User Interface Software and)SH
7200 71022 MT
(Technology, Proceedings UIST'93, Atlanta, GA, Nov., 1993, pp. 57-67.)SH
ES
%%Page: 39 40
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 39 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(34.)SH
/Times-Roman SF
9125 XM
(Scott E. Hudson.  User Interface Specification Using an Enhanced Spreadsheet Model.  Tech. Rept.)SH
7200 9151 MT
(GIT-GVU-93-20, Georgia Tech Graphics, Visualization and Usability Center, May, 1993.)SH
/Times-Bold SF
7200 11102 MT
(35.)SH
/Times-Roman SF
9125 XM
(Daniel H.H. Ingalls.  "The Smalltalk Graphics Kernel".)SH
/Times-Italic SF
34002 XM
(Byte Magazine 6)SH
/Times-Roman SF
(, 8 \050Aug. 1981\051, 168-194.)SH
/Times-Bold SF
7200 13053 MT
(36.)SH
/Times-Roman SF
9125 XM
(Robert J.K. Jacob.  "A Specification Language for Direct Manipulation Interfaces".)SH
/Times-Italic SF
46369 XM
(ACM)SH
7200 14249 MT
(Transactions on Graphics 5)SH
/Times-Roman SF
(, 4 \050Oct. 1986\051, 283-317.)SH
/Times-Bold SF
7200 16200 MT
(37.)SH
/Times-Roman SF
9125 XM
(Jeff A. Johnson, Bonnie A. Nardi, Craig L. Zarmer, and James R. Miller.  "ACE: Building Interactive)SH
7200 17396 MT
(Graphical Applications".)SH
/Times-Italic SF
18707 XM
(Comm. ACM 36)SH
/Times-Roman SF
(, 4 \050April 1993\051, 41-55.)SH
/Times-Bold SF
7200 19347 MT
(38.)SH
/Times-Roman SF
9125 XM
(Anthony Karrer and Walt Scacchi.  Requirements for an Extensible Object-Oriented Tree/Graph)SH
7200 20543 MT
(Editor. ACM)
275 W( SIGGRAPH Symposium on User Interface Software and Technology, Proceedings)SH
7200 21739 MT
(UIST'90, Snowbird, Utah, Oct., 1990, pp. 84-91.)SH
/Times-Bold SF
7200 23690 MT
(39.)SH
/Times-Roman SF
9125 XM
(Won Chul Kim and James D. Foley.  Providing High-level Control and Expert Assistance in the User)SH
7200 24886 MT
(Interface Presentation Design.  Human Factors in Computing Systems, Proceedings INTERCHI'93,)SH
7200 26082 MT
(Amsterdam, The Netherlands, April, 1993, pp. 430-437.)SH
/Times-Bold SF
7200 28033 MT
(40.)SH
/Times-Roman SF
9125 XM
(National Instruments.  LabVIEW. 12109 Technology Blvd. Austin, Texas, 78727.)SH
/Times-Bold SF
7200 29984 MT
(41.)SH
/Times-Roman SF
9125 XM
(James A. Landay and Brad A. Myers.  Interactive Sketching for the Early Stages of User Interface)SH
7200 31180 MT
(Design. Tech.)
275 W( Rept. CMU-CS-94-176, Carnegie Mellon University Computer Science Department, July,)SH
7200 32376 MT
(1994. Also appears as CMU-HCII-94-104.)SH
/Times-Bold SF
7200 34327 MT
(42.)SH
/Times-Roman SF
9125 XM
(Mark A. Linton, John M. Vlissides and Paul R. Calder.  "Composing user interfaces with)SH
7200 35523 MT
(InterViews".)SH
/Times-Italic SF
13360 XM
(IEEE Computer 22)SH
/Times-Roman SF
(, 2 \050Feb. 1989\051, 8-22.)SH
/Times-Bold SF
7200 37474 MT
(43.)SH
/Times-Roman SF
9125 XM
(MacroMedia. Director.)
275 W( 410 Townsend Suite 408, San Francisco, CA 94107. Phone \050415\051 442-0200.)SH
/Times-Bold SF
7200 39425 MT
(44.)SH
/Times-Roman SF
9125 XM
(Joel McCormack and Paul Asente.  An Overview of the X Toolkit.  ACM SIGGRAPH Symposium)SH
7200 40621 MT
(on User Interface Software and Technology, Proceedings UIST'88, Banff, Alberta, Canada, Oct., 1988,)SH
7200 41817 MT
(pp. 46-55.)SH
/Times-Bold SF
7200 43768 MT
(45.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "The User Interface for Sapphire".)SH
/Times-Italic SF
32224 XM
(IEEE Computer Graphics and Applications 4)SH
/Times-Roman SF
(, 12)SH
7200 44964 MT
(\050Dec. 1984\051, 13-23.)SH
/Times-Bold SF
7200 46915 MT
(46.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "A Complete and Efficient Implementation of Covered Windows".)SH
/Times-Italic SF
46497 XM
(IEEE Computer)SH
7200 48111 MT
(19)SH
/Times-Roman SF
(, 9 \050Sept. 1986\051, 57-67.)SH
/Times-Bold SF
7200 50062 MT
(47.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "A Taxonomy of User Interfaces for Window Managers".)SH
/Times-Italic SF
42457 XM
(IEEE Computer Graphics)SH
7200 51258 MT
(and Applications 8)SH
/Times-Roman SF
(, 5 \050Sept 1988\051, 65-84.)SH
/Times-Bold SF
7200 53209 MT
(48.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.)SH
/Times-Italic SF
16517 XM
(Creating User Interfaces by Demonstration.)SH
/Times-Roman SF
36528 XM
(Academic Press, Boston, 1988.)SH
/Times-Bold SF
7200 55160 MT
(49.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "User Interface Tools: Introduction and Survey".)SH
/Times-Italic SF
38551 XM
(IEEE Software 6)SH
/Times-Roman SF
(, 1 \050Jan. 1989\051,)SH
7200 56356 MT
(15-23.)SH
/Times-Bold SF
7200 58307 MT
(50.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers, Brad Vander Zanden, and Roger B. Dannenberg.  Creating Graphical Interactive)SH
7200 59503 MT
(Application Objects by Demonstration.  ACM SIGGRAPH Symposium on User Interface Software and)SH
7200 60699 MT
(Technology, Proceedings UIST'89, Williamsburg, VA, Nov., 1989, pp. 95-104.)SH
/Times-Bold SF
7200 62650 MT
(51.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "A New Model for Handling Input".)SH
/Times-Italic SF
33055 XM
(ACM Transactions on Information Systems 8)SH
/Times-Roman SF
(, 3)SH
7200 63846 MT
(\050July 1990\051, 289-320.)SH
/Times-Bold SF
7200 65797 MT
(52.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "All the Widgets".)SH
/Times-Italic SF
25206 XM
(SIGGRAPH Video Review 57)SH
/Times-Roman SF
38462 XM
(\0501990\051.)SH
/Times-Bold SF
7200 67748 MT
(53.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers, Dario A. Giuse, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie,)SH
7200 68944 MT
(Edward Pervin, Andrew Mickish, and Philippe Marchal.  "Garnet: Comprehensive Support for Graphical,)SH
7200 70140 MT
(Highly-Interactive User Interfaces".)SH
/Times-Italic SF
23558 XM
(IEEE Computer 23)SH
/Times-Roman SF
(, 11 \050Nov. 1990\051, 71-85.)SH
ES
%%Page: 40 41
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 40 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(54.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "Taxonomies of Visual Programming and Program Visualization".)SH
/Times-Italic SF
46408 XM
(Journal of)SH
7200 9151 MT
(Visual Languages and Computing 1)SH
/Times-Roman SF
(, 1 \050March 1990\051, 97-123.)SH
/Times-Bold SF
7200 11102 MT
(55.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  Separating Application Code from Toolkits:  Eliminating the Spaghetti of Call-)SH
7200 12298 MT
(Backs. ACM)
275 W( SIGGRAPH Symposium on User Interface Software and Technology, Proceedings)SH
7200 13494 MT
(UIST'91, Hilton Head, SC, Nov., 1991, pp. 211-220.)SH
/Times-Bold SF
7200 15445 MT
(56.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  Graphical Techniques in a Spreadsheet for Specifying User Interfaces.  Human)SH
7200 16641 MT
(Factors in Computing Systems, Proceedings SIGCHI'91, New Orleans, LA, April, 1991, pp. 243-249.)SH
/Times-Bold SF
7200 18592 MT
(57.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers and Mary Beth Rosson.  Survey on User Interface Programming.  Human Factors in)SH
7200 19788 MT
(Computing Systems, Proceedings SIGCHI'92, Monterey, CA, May, 1992, pp. 195-202.)SH
/Times-Bold SF
7200 21739 MT
(58.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers \050Ed.\051)SH
/Times-Italic SF
18746 XM
(Languages for Developing User Interfaces.)SH
/Times-Roman SF
38389 XM
(Jones and Bartlett, Boston, MA,)SH
7200 22935 MT
(1992.)SH
/Times-Bold SF
7200 24886 MT
(59.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers, Dario Giuse, and Brad Vander Zanden.  "Declarative Programming in a Prototype-)SH
7200 26082 MT
(Instance System:  Object-Oriented Programming Without Writing Methods".)SH
/Times-Italic SF
41683 XM
(Sigplan Notices 27)SH
/Times-Roman SF
(, 10)SH
7200 27278 MT
(\050Oct. 1992\051, 184-200. ACM Conference on Object-Oriented Programming; Systems Languages and)SH
7200 28474 MT
(Applications; OOPSLA'92.)SH
/Times-Bold SF
7200 30425 MT
(60.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "Demonstrational Interfaces: A Step Beyond Direct Manipulation".)SH
/Times-Italic SF
46710 XM
(IEEE Computer)SH
7200 31621 MT
(25)SH
/Times-Roman SF
(, 8 \050August 1992\051, 61-73.)SH
/Times-Bold SF
7200 33572 MT
(61.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers, David Canfield Smith, and Bruce Horn.  Report of the `End-User Programming')SH
7200 34768 MT
(Working Group.  In Brad A. Myers, Ed.,)SH
/Times-Italic SF
25375 XM
(Languages for Developing User Interfaces)SH
/Times-Roman SF
(, Jones and Bartlett,)SH
7200 35964 MT
(Boston, MA, 1992, pp. 343-366.)SH
/Times-Bold SF
7200 37915 MT
(62.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers and Brad Vander Zanden.  "Environment for Rapid Creation of Interactive Design)SH
7200 39111 MT
(Tools".)SH
/Times-Italic SF
10980 XM
(The Visual Computer; International Journal of Computer Graphics 8)SH
/Times-Roman SF
(, 2 \050Feb. 1992\051, 94-116.)SH
/Times-Bold SF
7200 41062 MT
(63.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers, Richard G. McDaniel, and David S. Kosbie.  Marquise: Creating Complete User)SH
7200 42258 MT
(Interfaces by Demonstration.  Human Factors in Computing Systems, Proceedings INTERCHI'93,)SH
7200 43454 MT
(Amsterdam, The Netherlands, April, 1993, pp. 293-300.)SH
/Times-Bold SF
7200 45405 MT
(64.)SH
/Times-Roman SF
9125 XM
(Brad A. Myers.  "Challenges of HCI Design and Implementation".)SH
/Times-Italic SF
38983 XM
(ACM Interactions 1)SH
/Times-Roman SF
(, 1 \0501994\051, to)SH
7200 46601 MT
(appear.)SH
/Times-Bold SF
7200 48552 MT
(65.)SH
/Times-Roman SF
9125 XM
(Robert Neches, Jim Foley, Pedro Szekely, Piyawadee Sukaviriya, Ping Luo, Srdjan Kovacevic, and)SH
7200 49748 MT
(Scott Hudson.  Knowledgable Development Environments Using Shared Design Models.  Proceedings of)SH
7200 50944 MT
(the 1993 International Workshop on Intelligent User Interfaces, ACM SIGCHI, Orlando, FL, Jan., 1993,)SH
7200 52140 MT
(pp. 63-70.)SH
/Times-Bold SF
7200 54091 MT
(66.)SH
/Times-Roman SF
9125 XM
(Frances J. Newbery.  An interface description language for graph editors.  1988 IEEE Workshop on)SH
7200 55287 MT
(Visual Languages, Pittsburgh, PA, Oct., 1988, pp. 144-149. IEEE Computer Society Order Number 876.)SH
/Times-Bold SF
7200 57238 MT
(67.)SH
/Times-Roman SF
9125 XM
(William M. Newman.  A System for Interactive Graphical Programming.  AFIPS Spring Joint)SH
7200 58434 MT
(Computer Conference, 1968, pp. 47-54.)SH
/Times-Bold SF
7200 60385 MT
(68.)SH
/Times-Roman SF
9125 XM
(NeXT, Inc.  NeXTStep and the NeXT Interface Builder.  900 Chesapeake Drive, Redwood City, CA)SH
7200 61581 MT
(94063.)SH
/Times-Bold SF
7200 63532 MT
(69.)SH
/Times-Roman SF
9125 XM
(Jakob Nielsen.  "Noncommand User Interfaces".)SH
/Times-Italic SF
31066 XM
(Comm. ACM 36)SH
/Times-Roman SF
(, 4 \050April 1993\051, 83-99.)SH
/Times-Bold SF
7200 65483 MT
(70.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr. and Elizabeth P. Dempsey.  Syngraph: A Graphical User Interface Generator.)SH
7200 66679 MT
(Computer Graphics, Proceedings SIGGRAPH'83, Detroit, MI, July, 1983, pp. 43-50.)SH
/Times-Bold SF
7200 68630 MT
(71.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr.  "Mike: The Menu Interaction Kontrol Environment".)SH
/Times-Italic SF
41183 XM
(ACM Transactions on)SH
7200 69826 MT
(Graphics 5)SH
/Times-Roman SF
(, 4 \050Oct. 1986\051, 318-344.)SH
ES
%%Page: 41 42
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 41 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(72.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr.  "Larger Issues in User Interface Management".)SH
/Times-Italic SF
38547 XM
(Computer Graphics 21)SH
/Times-Roman SF
(, 2 \050April)SH
7200 9151 MT
(1987\051, 134-137.)SH
/Times-Bold SF
7200 11102 MT
(73.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr. and Bradley W. Halversen.  Interface Usage Measurements in a User Interface)SH
7200 12298 MT
(Management System.  ACM SIGGRAPH Symposium on User Interface Software and Technology,)SH
7200 13494 MT
(Proceedings UIST'88, Banff, Alberta, Canada, Oct., 1988, pp. 102-108.)SH
/Times-Bold SF
7200 15445 MT
(74.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr.  A Programming Language Basis for User Interface Management.  Human Factors)SH
7200 16641 MT
(in Computing Systems, Proceedings SIGCHI'89, Austin, TX, April, 1989, pp. 171-176.)SH
/Times-Bold SF
7200 18592 MT
(75.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen, Jr.)SH
/Times-Italic SF
17251 XM
(User Interface Management Systems: Models and Algorithms.)SH
/Times-Roman SF
45202 XM
(Morgan Kaufmann,)SH
7200 19788 MT
(San Mateo, CA, 1992.)SH
/Times-Bold SF
7200 21739 MT
(76.)SH
/Times-Roman SF
9125 XM
(Dan R. Olsen Jr., James D. Foley, Scott E. Hudson, James Miller, and Brad Myers.  "Research)SH
7200 22935 MT
(Directions for User Interface Software Tools".)SH
/Times-Italic SF
28171 XM
(Behaviour and Information Technology 12)SH
/Times-Roman SF
(, 2 \050March-)SH
7200 24131 MT
(April 1993\051, 80-97.)SH
/Times-Bold SF
7200 26082 MT
(77.)SH
/Times-Roman SF
9125 XM
(NeuronData. Open)
275 W( Interface.  156 University Ave.  Palo Alto, CA 94301.  \050415\051 321-4488.)SH
/Times-Bold SF
7200 28033 MT
(78.)SH
/Times-Roman SF
9125 XM
(Silicon Graphics, Inc.  Open-GL. 2011 N. Shoreline Blvd.  Mountain View, CA 94039-7311. \050415\051)SH
7200 29229 MT
(960-1980.)SH
/Times-Bold SF
7200 31180 MT
(79.)SH
/Times-Roman SF
9125 XM
(Oracle Tools.  Oracle Corporation, 500 Oracle Parkway, Belmont, CA, 94065, \050800\051 633-0521.)SH
/Times-Bold SF
7200 33131 MT
(80.)SH
/Times-Roman SF
9125 XM
(John K. Ousterhout.  An X11 Toolkit Based on the Tcl Language.  Winter, USENIX, 1991, pp.)SH
7200 34327 MT
(105-115.)SH
/Times-Bold SF
7200 36278 MT
(81.)SH
/Times-Roman SF
9125 XM
(Owl International, Inc.  Guide.  2800 156th Avenue SE, Second Floor, Bellevue, WA 98007.  \050206\051)SH
7200 37474 MT
(747-3203.)SH
/Times-Bold SF
7200 39425 MT
(82.)SH
/Times-Roman SF
9125 XM
(Andrew J. Palay,)SH
/Times-Italic SF
16914 XM
(et. al)SH
/Times-Roman SF
(. The)
275 W( Andrew Toolkit - An Overview.  Proceedings Winter Usenix Technical)SH
7200 40621 MT
(Conference, Dallas, Tex, Feb., 1988, pp. 9-21.)SH
/Times-Bold SF
7200 42572 MT
(83.)SH
/Times-Roman SF
9125 XM
(Randy Pausch, Matthew Conway, and Robert DeLine.  "Lesson Learned from SUIT, the Simple User)SH
7200 43768 MT
(Interface Toolkit".)SH
/Times-Italic SF
15895 XM
(ACM Transactions on Information Systems 10)SH
/Times-Roman SF
(, 4 \050Oct. 1992\051, 320-344.)SH
/Times-Bold SF
7200 45719 MT
(84.)SH
/Times-Roman SF
9125 XM
(Tom Gaskins.)SH
/Times-Italic SF
15847 XM
(PEXlib Programming Manual.)SH
/Times-Roman SF
29994 XM
(O'Reilly and Associates, Inc., 103 Morris Street,)SH
7200 46915 MT
(Suite A, Sebastopol CA, 1992.)SH
/Times-Bold SF
7200 48866 MT
(85.)SH
/Times-Roman SF
9125 XM
(Rob Pike.  "Graphics in Overlapping Bitmap Layers".)SH
/Times-Italic SF
33394 XM
(ACM Transactions on Graphics 2)SH
/Times-Roman SF
(, 2 \050April)SH
7200 50062 MT
(1983\051, 135-160. Also appears in)SH
/Times-Italic SF
21649 XM
(Computer Graphics: SIGGRAPH'83 Conference Proceedings)SH
/Times-Roman SF
(, Detroit,)SH
7200 51258 MT
(Mich. Vol. 17, no. 3, July 25-29, 1983. pp. 331-355..)SH
/Times-Bold SF
7200 53209 MT
(86.)SH
/Times-Roman SF
9125 XM
(Prior Data Sciences.  InterMAPhics. 240 Michael Cowpland Drive, Kanata, Ontario Canada, K2M)SH
7200 54405 MT
(1P6. \050613\051 591-7235.)SH
/Times-Bold SF
7200 56356 MT
(87.)SH
/Times-Roman SF
9125 XM
(TGSSystems. Prograph.)
275 W( 1127 Barrington St., Suite 19, Halifax, NS, Canada B3H 2P8. \050902\051)SH
7200 57552 MT
(429-5642.)SH
/Times-Bold SF
7200 59503 MT
(88.)SH
/Times-Roman SF
9125 XM
(Patricia Russo and Stephen Boor.  How Fluent is Your Interface?  Designing for International Users.)SH
7200 60699 MT
(Human Factors in Computing Systems, Proceedings INTERCHI'93, Amsterdam, The Netherlands, April,)SH
7200 61895 MT
(1993, pp. 342-347.)SH
/Times-Bold SF
7200 63846 MT
(89.)SH
/Times-Roman SF
9125 XM
(Sage Software Inc.  Dan Bricklin's Demo II, Version 3.0. 1700 NW 167th Place, Beaverton, OR)SH
7200 65042 MT
(97006. Phone)
275 W( \050503\051 645-1150.  A division of InterSolv.)SH
/Times-Bold SF
7200 66993 MT
(90.)SH
/Times-Roman SF
9125 XM
(Pamela Samuelson.  "Legally Speaking: The Ups and Downs of Look and Feel".)SH
/Times-Italic SF
45155 XM
(Comm. ACM 36)SH
/Times-Roman SF
(, 4)SH
7200 68189 MT
(\050April 1993\051, 29-35.)SH
ES
%%Page: 42 43
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 42 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(91.)SH
/Times-Roman SF
9125 XM
(Robert W. Scheifler and Jim Gettys.  "The X Window System".)SH
/Times-Italic SF
37732 XM
(ACM Transactions on Graphics 5)SH
/Times-Roman SF
(, 2)SH
7200 9151 MT
(\050April 1986\051, 79-109.)SH
/Times-Bold SF
7200 11102 MT
(92.)SH
/Times-Roman SF
9125 XM
(Kurt J. Schmucker.  "MacApp: An Application Framework".)SH
/Times-Italic SF
36477 XM
(Byte 11)SH
/Times-Roman SF
(, 8 \050Aug. 1986\051, 189-193.)SH
/Times-Bold SF
7200 13053 MT
(93.)SH
/Times-Roman SF
9125 XM
(Andrew J. Schulert, George T. Rogers, and James A. Hamilton.  ADM-A Dialogue Manager.  Human)SH
7200 14249 MT
(Factors in Computing Systems, Proceedings SIGCHI'85, San Francisco, CA, April, 1985, pp. 177-183.)SH
/Times-Bold SF
7200 16200 MT
(94.)SH
/Times-Roman SF
9125 XM
(Gurminder Singh and Mark Green.  Designing the Interface Designer's Interface.  ACM SIGGRAPH)SH
7200 17396 MT
(Symposium on User Interface Software and Technology, Proceedings UIST'88, Banff, Alberta, Canada,)SH
7200 18592 MT
(Oct., 1988, pp. 109-116.)SH
/Times-Bold SF
7200 20543 MT
(95.)SH
/Times-Roman SF
9125 XM
(Gurminder Singh and Mark Green.  Chisel: A System for Creating Highly Interactive Screen)SH
7200 21739 MT
(Layouts. ACM)
275 W( SIGGRAPH Symposium on User Interface Software and Technology, Proceedings)SH
7200 22935 MT
(UIST'89, Williamsburg, VA, Nov., 1989, pp. 86-94.)SH
/Times-Bold SF
7200 24886 MT
(96.)SH
/Times-Roman SF
9125 XM
(SL Corp.  Suite 110 Hunt Plaza, 240 Tamal Vista Blvd., Corte Madera, CA, 94925, \050415\051 927-1724.)SH
/Times-Bold SF
7200 26837 MT
(97.)SH
/Times-Roman SF
9125 XM
(SmethersBarnes. Prototyper)
275 W( 3.0.  P.O. Box 639, Portland, Oregon 97207.  \050503\051 274-7179.)SH
/Times-Bold SF
7200 28788 MT
(98.)SH
/Times-Roman SF
9125 XM
(David Canfield Smith, Charles Irby, Ralph Kimball, Bill Verplank, and Erik Harslem.  "Designing)SH
7200 29984 MT
(the Star User Interface".)SH
/Times-Italic SF
18397 XM
(Byte 7)SH
/Times-Roman SF
(, 4 \050April 1982\051, 242-282.)SH
/Times-Bold SF
7200 31935 MT
(99.)SH
/Times-Roman SF
9125 XM
(Spinnaker Software.  Spinnaker PLUS. 201 Broadway, Cambridge, MA 02139-1901. \050617\051)SH
7200 33131 MT
(494-1200.)SH
/Times-Bold SF
7200 35082 MT
(100.)SH
/Times-Roman SF
9675 XM
(Richard M. Stallman.  Emacs: The Extensible, Customizable, Self-Documenting Display Editor.)SH
7200 36278 MT
(Tech. Rept. 519, MIT Artificial Intelligence Lab, Aug., 1979.)SH
/Times-Bold SF
7200 38229 MT
(101.)SH
/Times-Roman SF
9675 XM
(Albert Stevens, Bruce Roberts, and Larry Stead.  "The Use of a Sophisticated Graphics Interface in)SH
7200 39425 MT
(Computer-Assisted Instruction".)SH
/Times-Italic SF
22009 XM
(IEEE Computer Graphics and Applications 3)SH
/Times-Roman SF
(, 2 \050March/April 1983\051,)SH
7200 40621 MT
(25-31.)SH
/Times-Bold SF
7200 42572 MT
(102.)SH
/Times-Roman SF
9675 XM
(Paul S. Strauss and Rikk Carey.  An Object-Oriented 3D Graphics Toolkit.  Computer Graphics,)SH
7200 43768 MT
(Proceedings SIGGRAPH'92, July, 1992, pp. 341-349.)SH
/Times-Bold SF
7200 45719 MT
(103.)SH
/Times-Roman SF
9675 XM
(Piyawadee Sukaviriya and James D. Foley.  Coupling A UI Framework with Automatic Generation)SH
7200 46915 MT
(of Context-Sensitive Animated Help.  ACM SIGGRAPH Symposium on User Interface Software and)SH
7200 48111 MT
(Technology, Proceedings UIST'90, Snowbird, Utah, Oct., 1990, pp. 152-166.)SH
/Times-Bold SF
7200 50062 MT
(104.)SH
/Times-Roman SF
9675 XM
(Piyawadee Sukaviriya, James D. Foley and Todd Griffith.  A Second Generation User Interface)SH
7200 51258 MT
(Design Environment:  The Model and The Runtime Architecture.  Human Factors in Computing Systems,)SH
7200 52454 MT
(Proceedings INTERCHI'93, Amsterdam, The Netherlands, April, 1993, pp. 375-382.)SH
/Times-Bold SF
7200 54405 MT
(105.)SH
/Times-Roman SF
9675 XM
(Noi Sukaviriya, Srdjan Kovacevic, Jim Foley, Brad Myers, Dan Olsen, Matthias Schneider-)SH
7200 55601 MT
(Hufschmidt. Model-Based)
275 W( User Interfaces:  What Is It and Why Should I Care?  ACM SIGGRAPH)SH
7200 56797 MT
(Symposium on User Interface Software and Technology, Proceedings UIST'94, Marina del Rey, CA,)SH
7200 57993 MT
(Nov., 1994, pp. \050to appear\051.)SH
/Times-Bold SF
7200 59944 MT
(106.)SH
/Times-Roman SF
9675 XM
(Sun Microsystems.  SunWindows Programmers' Guide. 2550 Garcia Ave., Mtn. View, CA 94043.)SH
/Times-Bold SF
7200 61895 MT
(107.)SH
/Times-Roman SF
9675 XM
(Sun Microsystems.  DevGuide: OpenWindows Developer's Guide. 2550 Garcia Ave., Mtn. View,)SH
7200 63091 MT
(CA 94043.)SH
/Times-Bold SF
7200 65042 MT
(108.)SH
/Times-Roman SF
9675 XM
(Ivan E. Sutherland.  SketchPad: A Man-Machine Graphical Communication System.  AFIPS Spring)SH
7200 66238 MT
(Joint Computer Conference, 1963, pp. 329-346.)SH
/Times-Bold SF
7200 68189 MT
(109.)SH
/Times-Roman SF
9675 XM
(Daniel Swinehart, Polle Zellweger, Richard Beach, and Robert Hagmann.  "A Structural View of)SH
7200 69385 MT
(the Cedar Programming Environment".)SH
/Times-Italic SF
25063 XM
(ACM Transactions on Programming Languages and Systems 8)SH
/Times-Roman SF
(, 4)SH
7200 70581 MT
(\050Oct. 1986\051, 419-490.)SH
ES
%%Page: 43 44
BS
0 SI
10 /Times-Roman AF
7200 4286 MT
(User Interface Software Tools)SH
29517 XM
(- 43 -)SH
36667 XM
(** SUBMITTED FOR PUBLICATION **)SH
46800 50 7200 4486 UL
11 /Times-Bold AF
7200 7955 MT
(110.)SH
/Times-Roman SF
9675 XM
(Pedro Szekely, Ping Luo, and Robert Neches.  Beyond Interface Builders: Model-Based Interface)SH
7200 9151 MT
(Tools. Human)
275 W( Factors in Computing Systems, Proceedings INTERCHI'93, Amsterdam, The)SH
7200 10347 MT
(Netherlands, April, 1993, pp. 383-390.)SH
/Times-Bold SF
7200 12298 MT
(111.)SH
/Times-Roman SF
9675 XM
(Warren Teitelman.  "A Display Oriented Programmer's Assistant".)SH
/Times-Italic SF
39744 XM
(International Journal of Man-)SH
7200 13494 MT
(Machine Studies 11)SH
/Times-Roman SF
16151 XM
(\0501979\051, 157-187. Also Xerox PARC Technical Report CSL-77-3, Palo Alto, CA,)SH
7200 14690 MT
(March 8, 1977.)SH
/Times-Bold SF
7200 16641 MT
(112.)SH
/Times-Roman SF
9675 XM
(Larry Tesler.  "The Smalltalk Environment".)SH
/Times-Italic SF
29910 XM
(Byte Magazine 6)SH
/Times-Roman SF
(, 8 \050Aug. 1981\051, 90-147.)SH
/Times-Bold SF
7200 18592 MT
(113.)SH
/Times-Roman SF
9675 XM
(V.I. Corp.  DataViews.  47 Pleasant St., Northampton, MA, 01006, \050413\051 586-4144.)SH
/Times-Bold SF
7200 20543 MT
(114.)SH
/Times-Roman SF
9675 XM
(Brad Vander Zanden and Brad A. Myers.  Automatic, Look-and-Feel Independent Dialog Creation)SH
7200 21739 MT
(for Graphical User Interfaces.  Human Factors in Computing Systems, Proceedings SIGCHI'90, Seattle,)SH
7200 22935 MT
(WA, April, 1990, pp. 27-34.)SH
/Times-Bold SF
7200 24886 MT
(115.)SH
/Times-Roman SF
9675 XM
(Virtual Prototypes Inc.  VAPS. 5252 de Maisonneuve West, Suite 318, Montreal, Quebec, Canada)SH
7200 26082 MT
(H4A 3S5.  \050514\051 483-4712.)SH
/Times-Bold SF
7200 28033 MT
(116.)SH
/Times-Roman SF
9675 XM
(Visix Software Inc.  Galaxy Application Environment.  11440 Commerce Park Drive, Reston VA)SH
7200 29229 MT
(22091. \050800\051)
275 W( 832-8668.)SH
/Times-Bold SF
7200 31180 MT
(117.)SH
/Times-Roman SF
9675 XM
(Microsoft, Inc.  Visual Basic. 10700 Northup Way, Bellevue, Washington 98004.  800-426-9400.)SH
/Times-Bold SF
7200 33131 MT
(118.)SH
/Times-Roman SF
9675 XM
(Visual Edge Software Ltd.  UIMX.  3950 Cote Vertu, Montreal, Quebec H4R 1V4.  Phone \050514\051)SH
7200 34327 MT
(332-6430.)SH
/Times-Bold SF
7200 36278 MT
(119.)SH
/Times-Roman SF
9675 XM
(John M. Vlissides and Mark A. Linton.  "Unidraw: A Framework for Building Domain-Specific)SH
7200 37474 MT
(Graphical Editors".)SH
/Times-Italic SF
16263 XM
(ACM Transactions on Information Systems 8)SH
/Times-Roman SF
(, 3 \050July 1990\051, 204-236.)SH
/Times-Bold SF
7200 39425 MT
(120.)SH
/Times-Roman SF
9675 XM
(John M. Vlissides and Steven Tang.  A Unidraw-Based User Interface Builder.  ACM SIGGRAPH)SH
7200 40621 MT
(Symposium on User Interface Software and Technology, Proceedings UIST'91, Hilton Head, SC, Nov.,)SH
7200 41817 MT
(1991, pp. 201-210.)SH
/Times-Bold SF
7200 43768 MT
(121.)SH
/Times-Roman SF
9675 XM
(Josie Wernecke.)SH
/Times-Italic SF
17431 XM
(The Inventor Mentor.)SH
/Times-Roman SF
27420 XM
(Addison-Wesley Publishing Company, Reading, MA, 1994.)SH
/Times-Bold SF
7200 45719 MT
(122.)SH
/Times-Roman SF
9675 XM
(Charles Wiecha, Stephen Boies, Mark Green, Scott Hudson, and Brad Myers.  Direct Manipulation)SH
7200 46915 MT
(or Programming: How Should We Design Interfaces?  ACM SIGGRAPH Symposium on User Interface)SH
7200 48111 MT
(Software and Technology, Proceedings UIST'89, Williamsburg, VA, Nov., 1989, pp. 124-126.)SH
/Times-Bold SF
7200 50062 MT
(123.)SH
/Times-Roman SF
9675 XM
(Charles Wiecha, William Bennett, Stephen Boies, John Gould, and Sharon Greene.  "ITS: A Tool)SH
7200 51258 MT
(for Rapidly Developing Interactive Applications".)SH
/Times-Italic SF
29796 XM
(ACM Transactions on Information Systems 8)SH
/Times-Roman SF
(, 3 \050July)SH
7200 52454 MT
(1990\051, 204-236.)SH
/Times-Bold SF
7200 54405 MT
(124.)SH
/Times-Roman SF
9675 XM
(Nicholas Wilde and Clayton Lewis.  Spreadsheet-based Interactive Graphics: from Prototype to)SH
7200 55601 MT
(Tool. Human)
275 W( Factors in Computing Systems, Proceedings SIGCHI'90, Seattle, WA, April, 1990, pp.)SH
7200 56797 MT
(153-159.)SH
/Times-Bold SF
7200 58748 MT
(125.)SH
/Times-Roman SF
9675 XM
(David Wilson.)SH
/Times-Italic SF
16641 XM
(Programming with MacApp.)SH
/Times-Roman SF
29810 XM
(Addison-Wesley Publishing Company, Reading, MA,)SH
7200 59944 MT
(1990.)SH
/Times-Bold SF
7200 61895 MT
(126.)SH
/Times-Roman SF
9675 XM
(X Business Group, Inc.)SH
/Times-Italic SF
20520 XM
(Interface Development Technology.)SH
/Times-Roman SF
36799 XM
(3155 Kearney Street, Suite 160,)SH
7200 63091 MT
(Fremont, CA 94538. \050510\051 226-1075, , 1994.)SH
/Times-Bold SF
7200 65042 MT
(127.)SH
/Times-Roman SF
9675 XM
(XVT Software, Inc.  XVT. Box 18750 Boulder, CO 80308. \050303\051 443-4223.)SH
/Times-Bold SF
7200 66993 MT
(128.)SH
/Times-Roman SF
9675 XM
(Robert C. Zeleznik, et.al.  An Object-Oriented Framework for the Integration of Interactive)SH
7200 68189 MT
(Animation Techniques.  Computer Graphics, Proceedings SIGGRAPH'91, July, 1991, pp. 105-112.)SH
ES
%%Trailer
%%Pages: 44
%%DocumentFonts: Times-Roman Times-Bold Times-BoldItalic Times-Italic Courier Symbol
