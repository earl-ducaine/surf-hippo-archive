;;; -*- Mode: Lisp; Syntax: Common-lisp; Package: #-PARALLEL SURF #+PARALLEL *surf; Base: 10; -*-



;;; Cholinergic rabbit retina starburst AMACRINE cell.


(defun star-amacrine-1 ()
  (star-amacrine "star-1" :cell-origin '(0 0 0) :include-distal-a-current t
		 :synapse *include-synapses
		 :extras-list '((synapse EXCITATORY-FACILITATION)(synapse INHIBITORY-1))))



(defun 32211-amacrine-1 ()
  (32211-amacrine "AC-cable" :cell-origin '(0 0 0) :include-distal-a-current nil
		 :synapse *include-synapses))

(defun 32211-amacrine-2 ()
  (32211-amacrine-b "AC-cable" :cell-origin '(0 0 0) :include-distal-a-current nil
		 :synapse *include-synapses))

(defun star-amacrine-2 ()
  (star-amacrine "star-2" :cell-origin '(0 0 0)  :synapse nil))

(defun star-amacrine (cell-name &key (cell-origin '(0 0 0)) (synapse nil)(segment-diameter 0.20)(include-distal-a-current)
		      (extras-list '()))
  (setq *soma-radius 8.0)
  (create-cell-type "star-amacrine" :soma-resistivity *r-mem-soma)
  (create-cell cell-name :cell-type-name "star-amacrine" :cell-origin cell-origin)
  (let ((soma (create-soma (format nil "~a-soma" cell-name) cell-name (* 2.0 *soma-radius))))
;    (create-channels '(na1 na2 na3 dr a) 3 soma :save-particle nil)
    (if *include-sources (create-source *clamp-type soma))
    (setf (cell-type-notes (gethash "star-amacrine" cell-type-hash-table))
	  "Rabbit cholinergic starburst cell (cell 7) (about 1.25 mm from streak) of Tauchi and Masland (1984).~%")
    (create-tree soma

;; This file contains the coordinates of the nodes for Cell 7 (about 1.25 mm from streak) of Tauchi and Masland
;; (1984).  The metric unit for the table's coordinate entries corresponds to about 6.06 microns.  To a good
;; approximation, the cell body is an ellipsoid with vertical major axis (of about 18 micrometers) and
;; horizontal minor axis (of about 12 micrometers).  The two first strings in each entry are the names of the
;; proximal and distal nodes of each segment.  On the other hand, the last two strings are the coordinates of
;; the distal node.

;; Famiglietti (1983) notes - Little overlap in dendritic fields.  Tapering of primary branches until approx 2nd
;; order branch on average 50 uM from soma.  Proximal region gradually tapering dendrites of no more than 1.5 uM
;; at origin.   At the 3rd or 4th order of branching dendrites become thin rather abruptly (transition between
;; proximal and  intermediate zones).   3 annular zones (proximal,intermediate and distal). Intemediate and
;; distal zones are approx .2 to .4 uM  diameter.   Distal zone marked by varicosities and boutons.

;; Miller and Bloomfield (1983) notes - They claim that distal regions (with varicosities) are thicker than the
;; intermediate zone, and imply that this difference is due to different staining technique than Famiglietti
;; (who uses Golgi) (Miller and Bloomfield use HRP) (Masland uses DAPI and LY). Soma on the order of 11uM
;; diameter. Thin dendrites (intermediate zone ??) are estimated at much less than 0.5 uM, perhaps 0.1 uM.
;; !!!!!! They claim that 1st order branches are typically about 0.1 uM in diameter. !!!!!! If true, this of
;; course changes the communication between major branches drastically.
;;

;;;; The morphological coordinates are from  Tauchi and Masland (1984). The dendrite diameters are inferred from
;; Famiglietti  (1983). Note that diameter entries are in microns - the xy entries are in units as noted above.

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; The segment-list format is as follows: (mother-segment-name segment-name x y0 z1 diameter extras-list)

0		 `(
		   (soma		1a		7		-1  -5          1.2    ,extras-list)
		   (1a		1b		12		-3  -7          0.6    ,extras-list)
		   (1b		11		18		-5  -10     nil      ,extras-list)
		   (11		111		20		-3  -10 nil ,extras-list)
		   (111		1111		30		-3  -10 nil ,extras-list)
		   (111		1112a		30		-5  -10 nil ,extras-list)
		   (1112a		1112b		33		-5  -10 nil ,extras-list)
		   (11		112		30		-6  -10 nil ,extras-list)
		   (11		113a		17		-7  -10 nil ,extras-list)
		   (113a		113b		24		-9  -10 nil ,extras-list)
		   (113b		1131		28		-9  -10 nil ,extras-list)
		   (113b		1132		24		-11  -10 nil ,extras-list)
		   (1b		12a		11		-6  -10          nil ,extras-list)
		   (12a		12b		24		-14  -10         nil ,extras-list)
		   (12b		121		28		-14  -10 nil ,extras-list)
		   (12b		122		34		-17  -10 nil ,extras-list)
		   (soma		2		-2		0  -5          1.2  ,extras-list)
		   (2		21		-3		-2  -7         1.0  ,extras-list)
		   (21		211		5		-6  -10       0.6  ,extras-list)
		   (211		2111		16		-14  -10 nil ,extras-list)
		   (2111		21111a		17		-13  -10 nil ,extras-list)
		   (21111a		21111b		21		-15  -10 nil ,extras-list)
		   (21111b		211111a		23		-16  -10 nil ,extras-list)
		   (211111a		211111b		27		-16  -10 nil ,extras-list)
		   (21111b		211112a		22		-17  -10 nil ,extras-list)
		   (211112a		211112b		25		-20  -10 nil ,extras-list)
		   (2111		21112		19		-18  -10 nil ,extras-list)
		   (2111		21113		21		-23  -10 nil ,extras-list)
		   (211		2112		9		-13  -10 nil ,extras-list)
		   (2112		21121a		13		-14  -10 nil ,extras-list)
		   (21121a		21121b		13		-17  -10 nil ,extras-list)
		   (21121b		211211		18		-22  -10 nil ,extras-list)
		   (21121b		211212		17		-24  -10 nil ,extras-list)
		   (2112		21122		11		-16  -10 nil ,extras-list)
		   (2112		21123a		8		-16  -10 nil ,extras-list)
		   (21123a		21123b		12		-23  -10 nil ,extras-list)
		   (21123b		211231		14		-24  -10 nil ,extras-list)
		   (21123b		211232		12		-26  -10 nil ,extras-list)
		   (21		212a		-5		-3  -10     0.8  ,extras-list)
		   (212a		212b		-5		-5  -10     0.6  ,extras-list)
		   (212b		2121		-4		-7  -10 nil ,extras-list)
		   (2121		21211		3		-11  -10 nil ,extras-list)
		   (21211		212111		10		-22  -10 nil ,extras-list)
		   (21211		212112		3		-18  -10 nil ,extras-list)
		   (212112		2121121		9		-25  -10 nil ,extras-list)
		   (212112		2121122a		1		-19  -10 nil ,extras-list)
		   (2121122a		2121122b		5		-23  -10 nil ,extras-list)
		   (21211		212113a		-1		-11  -10 nil ,extras-list)
		   (212113a		212113b		0		-16  -10 nil ,extras-list)
		   (2121		21212a		-7		-10  -10 nil ,extras-list)
		   (21212a		21212b		-7		-13  -10 nil ,extras-list)
		   (21212b		212121a		5		-24  -10 nil ,extras-list)
		   (212121a		212121b		3		-25  -10 nil ,extras-list)
		   (21212b		212122		-7		-17  -10 nil ,extras-list)
		   (212122		2121221a		-2		-19  -10 nil ,extras-list)
		   (2121221a		2121221b		0		-27  -10 nil ,extras-list)
		   (212122		2121222		-7		-20  -10 nil ,extras-list)
		   (2121222		21212221		-5		-26  -10 nil ,extras-list)
		   (2121222		21212222		-5		-29  -10 nil ,extras-list)
		   (212b		2122a		-8		-6  -10 nil ,extras-list)
		   (2122a		2122b		-12		-13  -10 nil ,extras-list)
		   (2122b		21221a		-10		-14  -10 nil ,extras-list)
		   (21221a		21221b		-14		-26  -10 nil ,extras-list)
		   (2122b		21222		-13		-15  -10 nil ,extras-list)
		   (21222		212221		-14		-20  -10 nil ,extras-list)
		   (212221		2122211a		-14		-23  -10 nil ,extras-list)
		   (2122211a		2122211b		-16		-23  -10 nil ,extras-list)
		   (212221		2122212		-17		-23  -10 nil ,extras-list)
		   (2122212		21222121		-19		-26  -10 nil ,extras-list)
		   (2122212		21222122		-19		-20  -10 nil ,extras-list)
		   (21222		212222		-16		-16  -10 nil ,extras-list)
		   (2		22		-4		0  -10        1.0 ,extras-list)
		   (22		221		-8		-2  -10       0.8 ,extras-list)
		   (221		2211		-10		-6  -10       0.6 ,extras-list)
		   (2211		22111a		-10		-8  -10 nil ,extras-list)
		   (22111a		22111b		-19		-16  -10 nil ,extras-list)
		   (22111b		221111a		-25		-23  -10 nil ,extras-list)
		   (221111a		221111b		-27		-22  -10 nil ,extras-list)
		   (22111b		221112a		-20		-15  -10 nil ,extras-list)
		   (221112a		221112b		-26		-18  -10 nil ,extras-list)
		   (2211		22112		-13		-8  -10 nil ,extras-list)
		   (22112		221121		-18		-13  -10 nil ,extras-list)
		   (221121		2211211		-20		-14  -10 nil ,extras-list)
		   (221121		2211212		-24		-14  -10 nil ,extras-list)
		   (2211212		22112121		-24		-16  -10 nil ,extras-list)
		   (2211212		22112122		-28		-16  -10 nil ,extras-list)
		   (22112		221122		-19 		-10  -10 nil ,extras-list)
		   (221122		2211221a		-21		-12  -10 nil ,extras-list)
		   (2211221a		2211221b		-22		-13  -10 nil ,extras-list)
		   (221122		2211222		-30		-16  -10 nil ,extras-list)
		   (221		2212		-14		-2  -10      0.6  ,extras-list)
		   (2212		22121		-29		-8  -10 nil ,extras-list)
		   (22121		221211a		-29		-12  -10 nil ,extras-list)
		   (221211a		221211b		-32		-12  -10 nil ,extras-list)
		   (22121		221212		-33		-9  -10 nil ,extras-list)
		   (2212		22122		-17		-1  -10 nil ,extras-list)
		   (22122		221221		-19		-2  -10 nil ,extras-list)
		   (221221		2212211		-21		-3  -10 nil ,extras-list)
		   (2212211		22122111		-21		-4  -10 nil ,extras-list)
		   (2212211		22122112		-23		-4  -10 nil ,extras-list)
		   (22122112		221221121		-29		-5  -10 nil ,extras-list)
		   (22122112		221221122		-27		-4  -10 nil ,extras-list)
		   (221221		2212212		-20		-2  -10 nil ,extras-list)
		   (22122		221222a		-19		0  -10 nil ,extras-list)
		   (221222a		221222b		-20		-1  -10 nil ,extras-list)
		   (221222b		2212221		-30		-3  -10 nil ,extras-list)
		   (221222b		2212222a		-28		-1  -10 nil ,extras-list)
		   (2212222a		2212222b		-33		-3  -10 nil ,extras-list)
		   (22		222		-15		4  -10    0.6 ,extras-list)
		   (222		2221		-18		4  -10 nil ,extras-list)
		   (2221		22211		-27		3  -10 nil ,extras-list)
		   (22211		222111a		-32		3  -10 nil ,extras-list)
		   (222111a		222111b		-39		0  -10 nil ,extras-list)
		   (22211		222112		-35		5  -10 nil ,extras-list)
		   (2221		22212		-28		8  -10 nil ,extras-list)
		   (22212		222121a		-30		6  -10 nil ,extras-list)
		   (222121a		222121b		-35		6  -10 nil ,extras-list)
		   (22212		222122		-34		11  -10 nil ,extras-list)
		   (222		2222		-25		10  -10 nil ,extras-list)
		   (22		223		-4		4  -10       0.8 ,extras-list)
		   (223		2231		-11		8  -10    0.6  ,extras-list)
		   (2231		22311		-15		9  -10 nil ,extras-list)
		   (22311		223111		-21		10  -10 nil ,extras-list)
		   (223111		2231111		-29		12  -10 nil ,extras-list)
		   (2231111		22311111		-30		11  -10 nil ,extras-list)
		   (2231111		22311112a		-32		13  -10 nil ,extras-list)
		   (22311112a		22311112b		-34		12  -10 nil ,extras-list)
		   (223111		2231112		-25		14  -10 nil ,extras-list)
		   (2231112		22311121a		-29		18  -10 nil ,extras-list)
		   (22311121a		22311121b		-31		17  -10 nil ,extras-list)
		   (2231112		22311122a		-25		16  -10 nil ,extras-list)
		   (22311122a		22311122b		-26		16  -10 nil ,extras-list)
		   (22311		223112		-18		12  -10 nil ,extras-list)
		   (223112		2231121		-22		14  -10 nil ,extras-list)
		   (223112		2231122		-28		20  -10 nil ,extras-list)
		   (2231		22312		-19		18  -10 nil ,extras-list)
		   (22312		223121		-22		21  -10 nil ,extras-list)
		   (223121		2231211a		-24		21  -10 nil ,extras-list)
		   (2231211a		2231211b		-25		23  -10 nil ,extras-list)
		   (223121		2231212a		-21		22  -10 nil ,extras-list)
		   (2231212a		2231212b		-26		26  -10 nil ,extras-list)
		   (22312		223122		-18		20  -10 nil ,extras-list)
		   (223		2232		-8		9  -10   0.6  ,extras-list)
		   (2232		22321		-18		21  -10 nil ,extras-list)
		   (22321		223211a		-20		21  -10 nil ,extras-list)
		   (223211a		223211b		-21		24  -10 nil ,extras-list)
		   (22321		223212a		-19		24  -10 nil ,extras-list)
		   (223212a		223212b		-23		25  -10 nil ,extras-list)
		   (2232		22322		-9		16  -10 nil ,extras-list)
		   (22322		223221		-11		18  -10 nil ,extras-list)
		   (223221		2232211		-17		21  -10 nil ,extras-list)
		   (223221		2232212		-18		29  -10 nil ,extras-list)
		   (22322		223222a		-8		17  -10 nil ,extras-list)
		   (223222a		223222b		-14		29  -10 nil ,extras-list)
		   (223		2233a		-1		7  -10      0.6 ,extras-list)
		   (2233a		2233b		-4		10  -10 nil ,extras-list)
		   (2233b		22331		-12		28  -10 nil ,extras-list)
		   (2233b		22332a		-3		18  -10 nil ,extras-list)
		   (22332a		22332b		-12		31  -10 nil ,extras-list)
		   (soma		3		0		2  -5       1.2  ,extras-list)
		   (3		31		4		9  -7       0.6  ,extras-list)
		   (31		311		2		11  -10 nil ,extras-list)
		   (311		3111a		-1		11  -10 nil ,extras-list)
		   (3111a		3111b		-2		18  -10 nil ,extras-list)
		   (311		3112		3		17  -10 nil ,extras-list)
		   (3112		31121		-4		30  -10 nil ,extras-list)
		   (3112		31122		5		25  -10 nil ,extras-list)
		   (31		312		8		12  -10 nil ,extras-list)
		   (312		3121		7		19  -10 nil ,extras-list)
		   (312		3122		10		13  -10 nil ,extras-list)
		   (3122		31221a		10		14  -10 nil ,extras-list)
		   (31221a		31221b		15		20  -10 nil ,extras-list)
		   (3122		31222a		12		14  -10 nil ,extras-list)
		   (31222a		31222b		22		20  -10 nil ,extras-list)
		   (31221b		312211		14		22  -10 nil ,extras-list)
		   (31221b		312212		18		22  -10 nil ,extras-list)
		   (31		313a		8		8  -10 nil ,extras-list)
		   (313a		313b		18		16  -10 nil ,extras-list)
		   (3		32		6		3  -10         0.9 ,extras-list)
		   (32		321		12		5  -10 0.6  ,extras-list)
		   (321		3211		18		9  -10     nil ,extras-list)
		   (3211		32111a		17		13  -10 nil ,extras-list)
		   (32111a		32111b		22		19  -10 nil ,extras-list)
		   (3211		32112		32		17  -10 nil ,extras-list)
		   (321		3212a		14		4  -10 nil ,extras-list)
		   (3212a		3212b		19		6  -10 nil ,extras-list)
		   (3212b		32121		33		13  -10 nil ,extras-list)
		   (3212b		32122		30		9  -10 nil ,extras-list)
		   (32		322		18		2  -10   0.6 ,extras-list)
		   (322		3221		23		3  -10 nil ,extras-list)
		   (3221		32211		35		5  -10 nil ,extras-list)
		   (3221		32212		33		0  -10 nil ,extras-list)
		   (322		3222		26		-1  -10 nil ,extras-list)
		   ) 

		 :default-diameter segment-diameter :synapse synapse :xy-factor 6.06)

    (if include-distal-a-current
	(dolist (segment-name *distal-nodes*)
	  (create-a-channel (gethash segment-name segment-hash-table) cell-name :gbar-density 500 :save-particle t))))
  )



; this gets most of the distal nodes.
(setq *distal-nodes* '("1112B" "1132" "211112B" "211212" "211232" "2121122B"  "2121221B" 
			 "21221B" "2122211B"    "21222122"  "221111B"    "221112B" "22112122" 
			 "2211222" "221211B" "221212" "221221122"  "2212222B" "222111B"    "222112"
			 "222121B" "222122"  "2222" "22311112B" "22311121B" "22311122B"  "2231122"
			 "2231211B" "2231212B"  "223211B" "223212B" "2232211"    "2232212" "223222B"
			 "22331" "22332B" "3111B" "31121" "31122" "3121"  "31222B" "312211" "312212"
			 "313B"    "32111B" "32112" "32121"    "32122" "32211" "32212" "3222"
			 "21222121" "122"  "112" "21212222" )    )

;; this gets a far left, far right, and top node.


;(defun auto-run ()
;  (setq  *automatic-run t)
;  (setq  *g-bar-inhibitory-1 0.0)
;  (surf 'star-amacrine-1 nil t)
;  (setq  *g-bar-inhibitory-1 4.0)
;  (surf 'star-amacrine-1 nil t)
;    (setq *use-old-synapse-waveforms nil
;	   *g-bar-inhibitory-1 1.0
;	   *scale .75  *bar-width 100 *draw-cells t  *update-light-stimulus t
;	   *current-graphics-pane "Main" *draw-synapse-stimulus t *label-plotted-nodes nil)
;  (surf 'star-amacrine-1 nil t))




;(list *gbar-a
;*r-mem-soma
;*g-bar-excitatory-1
;*g-bar-inhibitory-1)
;(0.03 20000 3.0e-4 1.0e-4)
;;
;			  ((eq type 'excitatory-facilitation)1 0(double-alpha 70 1 2 3.5))
;			  ((or (eq type 'inhibitory-1)(eq type 'inhibitory-1-offset)) (alpha-array 300 50 1))

;(setq *bar-a-start-time 10
; *bar-a-stop-time 50)
;(setq *bar-b-start-time 80
; *bar-b-stop-time 120)
;
;
;(setq *bar-b-start-time 10
; *bar-b-stop-time 50)
;
;(setq *bar-a-start-time 80
; *bar-a-stop-time 120)
;





(defun speed-mem-run ()
  (dolist (mem-params '((2.0e5 2.0e5)    (5.0e5 1.0e5)))
    (setq *r-mem (car mem-params)
	  *r-mem-soma (cadr mem-params))
    (dolist (light-speed '(0.5 1.0 2.0 4.0 8.0))	;Microns per millisecond
      (setq *light-speed light-speed) 
      (setq *light-start-position-x  (* 0.5 *light-speed user-stop-time))
      (surf 'star-amacrine-1))))

(defvar *do-analysis* t)

(defun anomolous-run ()
  (setq *old-plot-nodes* '("star-1-soma" "32211"))
  (setq *scale 1 *draw-cells t *print-analysis nil
	*automatic-run t *modify-cell-type nil *include-light-synapses t *include-synapses t *fast-rf-bar nil
	*overlay-simulations nil *hard-copy-screen nil *save-simulation nil user-stop-time 600
	*r-mem 2.0e5 *r-a 200 *r-mem-soma 2.0e5 *soma-shunt 1.0e30 *light-theta (/ pi 2.0)
	*bar-length 500 *bar-width 50  *light-stimulus 'moving-bar)
  (loop for subregion-center in '(0 175) do ;'(-175 0 175) do
    (loop for *light-direction in '(nil t) do
      (loop for *light-speed in '(0.5 2.0 8.0)	;Microns per millisecond
	    for plot-pane in (list 'ds-pane-0 'ds-pane-1 'ds-pane-2) do
	(setq *motion-start-time (- 300 (/ 75 *light-speed))
	      *motion-stop-time (+ 300 (/ 75 *light-speed))
	      *light-stimulus-start-time (- 300 (/ 75 *light-speed))
	      *light-stimulus-stop-time (+ 300 (/ 75 *light-speed))
	      *light-start-position-x  (+ subregion-center (* (if *light-direction 1 -1) 75))
	      *light-start-position-y 0
	      *use-old-synapse-waveforms nil
	      *g-excitatory-facilitation-dens  10
	      *g-inhibitory-1-dens 10)
	(surf 'star-amacrine-1) 
	(let ((amplitude 0)(nl-integral 0)(integral 0))
	  (do ((lt  *ordered-time-list* (cdr lt))
	       (lv (reverse (node-voltage-data (gethash "32211" node-hash-table))) (cdr lv)))
	      ((not (cdr lt)))
	    (setq nl-integral (+ nl-integral 
				 (* (saturating-non-linearity (car lv)) (- (cadr lt) (car lt))))
		  integral (+ integral (* (- (car lv) -70) (- (cadr lt) (car lt))))
		  amplitude (if (> (- (car lv) -70) amplitude) (- (car lv) -70) amplitude)))
	  (send (send *ds-frame* :get-pane plot-pane)
		:plot "Node Values " *pane2-data-list
		(list (format nil "~a:Avg=~,2e,NL-Avg=~,2e,Amp=~,2e"
			      (if *light-direction 'left 'right)
			      (/ integral user-stop-time) (/ nl-integral user-stop-time) amplitude))
		:y-label (format nil "Node 32211, Subregion center ~a, Speed ~a uM/ms" subregion-center *light-speed)
		:line-type-skip (if *overlay-simulations 10 0)
		:overlay *light-direction :leave-window *light-direction))))
    (send (send *ds-frame* :get-pane 'ds-interaction-pane) :clear-window)
    (print-circuit (send *ds-frame* :get-pane 'ds-interaction-pane))
    (let ((temp-window tv:selected-window))
      (send (send *ds-frame* :get-pane 'ds-interaction-pane) :select)
      (HCI::HARDCOPY-SCREEN) (send temp-window :select))))


(defun auto-run ()
  (setq *old-plot-nodes* '("star-1-soma" "32211"))
  (setq *scale 1 *draw-cells t)
  (setq  *automatic-run t *modify-cell-type nil *include-light-synapses t *include-synapses t
	 *overlay-simulations nil
 	 *hard-copy-screen nil *save-simulation nil
	 user-stop-time 500)
  (setq *r-mem 1.0e5 *r-a 200 *r-mem-soma 1.0e5 *soma-shunt 1.0e30)
;  (dolist (light-speed '(8.0));'(0.5 2.0 8.0))		;Microns per millisecond
;    (setq *light-speed light-speed) 
;    (setq *light-start-position-x  (* -0.5 *light-speed user-stop-time))
    (setq *use-old-synapse-waveforms nil)
;    (dolist (mem-params '((1.0e5 1.0e5)))
;      (setq *r-mem (car mem-params)
;	    *r-mem-soma (cadr mem-params))
;      (dolist (syn-gs '((100 10) (100 1) (10 1) (1 0)))
;	(setq *g-excitatory-facilitation-dens (car syn-gs)
;	      *g-inhibitory-1-dens (cadr syn-gs))
    (surf 'star-amacrine-1)
    (let ((results-and-angles (tip-tuning)))
      (setq *results-and-angles-dump (cons results-and-angles *results-and-angles-dump))))

;      (polar-plot-ds results-and-angles :radius-scale (* 50 *light-speed) :overlay t))))
;	(setq *use-old-synapse-waveforms t)))))

(defvar *results-and-angles-dump nil)


;(defun auto-run ()
;  (setq  *automatic-run t *modify-cell-type nil
;	 *overlay-simulations nil
; 	 *hard-copy-screen t *save-simulation nil
;	 user-stop-time 2000)
;;  (setq *bar-a-start-time 10
;;	*bar-a-stop-time 300)
;;
;;  (setq *bar-b-start-time 10
;;	*bar-b-stop-time 300)
;  (surf 'star-amacrine-1 nil t)
;;  (setq *overlay-simulations t)
;;  (let ((b-delay 50))
;;    (dotimes (i 6)
;;      (setq *bar-b-start-time (+ *bar-b-start-time  b-delay)
;;	    *bar-b-stop-time (+ *bar-b-stop-time  b-delay))
;;      (if (= i 5) (setq 	 *hard-copy-screen t))
;;
;;      (surf 'star-amacrine-1 nil t)))
;
;  (setq *overlay-simulations nil)
;  (setq 	 *hard-copy-screen t *save-simulation nil)
;  (setq *bar-b-start-time 10
;	*bar-b-stop-time 300)
;  (setq *bar-a-start-time 10
;	*bar-a-stop-time 300)
;  (surf 'star-amacrine-1 nil t)
;  (setq *overlay-simulations t)
;  (let ((a-delay 50))
;    (dotimes (i 6)
;      (setq *bar-a-start-time (+ *bar-a-start-time  a-delay)
;	    *bar-a-stop-time (+ *bar-a-stop-time  a-delay))
;      (if (= i 5) (setq 	 *hard-copy-screen t))
;      (surf 'star-amacrine-1 nil t)))
;  
;
;
;
;
;  (setq *overlay-simulations nil)
;  (setq 	 *hard-copy-screen t *save-simulation nil)
;  (setq user-stop-time 400)
;
;  (setq *bar-a-start-time 10
;	*bar-a-stop-time 100)
;
;  (setq *bar-b-start-time 10
;	*bar-b-stop-time 100)
;  (surf 'star-amacrine-1 nil t)
;  (setq *overlay-simulations t)
;  (let ((b-delay 15))
;    (dotimes (i 6)
;      (setq *bar-b-start-time (+ *bar-b-start-time  b-delay)
;	    *bar-b-stop-time (+ *bar-b-stop-time  b-delay))
;      (if (= i 5) (setq 	 *hard-copy-screen t))
;
;      (surf 'star-amacrine-1 nil t)))
;
;  (setq *overlay-simulations nil)
;  (setq 	 *hard-copy-screen t *save-simulation nil)
;  (setq *bar-b-start-time 10
;	*bar-b-stop-time 100)
;  (setq *bar-a-start-time 10
;	*bar-a-stop-time 100)
;  (surf 'star-amacrine-1 nil t)
;  (setq *overlay-simulations t)
;  (let ((a-delay 15))
;    (dotimes (i 6)
;      (setq *bar-a-start-time (+ *bar-a-start-time  a-delay)
;	    *bar-a-stop-time (+ *bar-a-stop-time  a-delay))
;      (if (= i 5) (setq 	 *hard-copy-screen t))
;      (surf 'star-amacrine-1 nil t)))
;  )

;
;(defun auto-run ()
;  (let ((temp-*channel-currents-to-output* '()))
;    (setq temp-*channel-currents-to-output* *channel-currents-to-output*)
;    (setq  *automatic-run t *modify-cell-type nil user-stop-time 200)
;    (setq 	 *hard-copy-screen t *save-simulation t)
;
;    (dolist (temp '(.1 1 10 100))
;      (setq *light-stimulus-strength temp)
;      (setq *channel-currents-to-output* temp-*channel-currents-to-output*)
;      (setq *distal-a-current t)
;
;      (apparent-motion-protocol)
;
;
;;now kill a current and repeat experiment
;      (setq temp-*channel-currents-to-output* *channel-currents-to-output*)
;      (setq *distal-a-current nil *channel-currents-to-output* '())
;
;      (apparent-motion-protocol)
;
;      )))

(defun apparent-motion-protocol ()
  (loop for *bar-a-start-time in '(10 0 10 0 80 80)
	for *bar-a-stop-time in '(120 0 120 0 120 120)
	for *bar-b-start-time in '(0 80 80 10 0 10)
	for *bar-b-stop-time in '(0 120 120 120 0 120)
	do
    (surf 'star-amacrine-1)))

;(defun auto-run ()
;
;    
;
;  (setq  *automatic-run t *modify-cell-type nil user-stop-time 1000)
;  (setq *bar-width 100 *bar-length 600 *bar-speed 1 *grating-temporal-period user-stop-time)	;
;
;  (setq *distal-a-current nil)
;;motion from right to left
;  (setq *light-stimulus-spot-center-x 300 *light-stimulus-spot-center-y 0 *bar-direction T
;	*bar-theta (* 90 2.0 pi (/ 1.0 360)))
;  (setq *bar-start-position (list *light-stimulus-spot-center-x *light-stimulus-spot-center-y))
;  (setq *overlay-simulations nil 	 *hard-copy-screen t)
;;do it
;  (surf 'star-amacrine-1 nil t)
;;motion from left to right
;  (setq *light-stimulus-spot-center-x -300 *light-stimulus-spot-center-y 0 *bar-direction nil
;	*bar-theta (* 90 2.0 pi (/ 1.0 360)))
;  (setq *bar-start-position (list *light-stimulus-spot-center-x *light-stimulus-spot-center-y))
;  (setq *overlay-simulations t 	 *hard-copy-screen t)
;;do it
;  (surf 'star-amacrine-1 nil t)
;
;
;;now kill a current and repeat experiment
;  (setq *distal-a-current nil *channel-currents-to-output* '())
;;motion from right to left
;  (setq *light-stimulus-spot-center-x 300 *light-stimulus-spot-center-y 0 *bar-direction T
;	*bar-theta (* 90 2.0 pi (/ 1.0 360)))
;  (setq *bar-start-position (list *light-stimulus-spot-center-x *light-stimulus-spot-center-y))
;  (setq *overlay-simulations nil 	 *hard-copy-screen t)
;;do it
;  (surf 'star-amacrine-1 nil t)
;;motion from left to right
;  (setq *light-stimulus-spot-center-x -300 *light-stimulus-spot-center-y 0 *bar-direction nil
;	*bar-theta (* 90 2.0 pi (/ 1.0 360)))
;  (setq *bar-start-position (list *light-stimulus-spot-center-x *light-stimulus-spot-center-y))
;  (setq *overlay-simulations t 	 *hard-copy-screen t)
;;do it
;  (surf 'star-amacrine-1 nil t)
;)

(defun 32211-amacrine (cell-name &key (cell-origin '(0 0 0)) (synapse nil)(segment-diameter 0.20)(include-distal-a-current)
		       )
  (setq *soma-radius 8.0)
  (create-cell-type "star-amacrine")
  (create-cell cell-name :cell-type-name "star-amacrine" :cell-origin cell-origin)
  (let ((soma (create-soma (format nil "~a-soma" cell-name) cell-name (* 2.0 *soma-radius))))
;    (create-channels '(na1 na2 na3 dr a) 3 soma :save-particle nil)
    (if *include-sources (create-source *clamp-type soma))
    (setf (cell-type-notes (gethash "star-amacrine" cell-type-hash-table))
	  "Rabbit cholinergic starburst cell (cell 7) (about 1.25 mm from streak) of Tauchi and Masland (1984).~%")
    (create-tree soma
1;; The segment-list format is as follows: (mother-segment-name segment-name x y0 z1 diameter extras-list)
0		 `(
		   (soma		3		0		2  -5       1.2)
		   (3		32		6		3  -10         0.9
				((synapse EX-1)))
		   (32		322a		12		2  -10   0.6
				((synapse EX-1)))
		   (322a	322b		18		2  -10   0.6
				((synapse EX-1)))
		   (322b	3221		        23		3  -10 nil
				((synapse EX-1)))
		   (3221		32211a		27		4  -10 nil
					((synapse EX-1)))
		   (32211a		32211b		31		5  -10 nil 
					((synapse EX-1); (synapse IN-1)
))
		   (32211b		32211c		35		5  -10 nil
					((synapse EX-1)(synapse IN-1)
))
		   (3221		32212		33		0  -10 nil
					((synapse EX-1)(synapse IN-1)
					 ))
		   (322b		3222		26		-1  -10 nil
					((synapse EX-1)(synapse IN-1)
					 ))


		   (soma		L3		0		2  -5       1.2)
		   (L3		L32		-6		3  -10         0.9
				((synapse EX-1)))
		   (L32		L322a		-12		2  -10   0.6
				((synapse EX-1)))
		   (L322a	L322b		-18		2  -10   0.6
				((synapse EX-1)))
		   (L322b	L3221		        -23		3  -10 nil
				((synapse EX-1)))
		   (L3221		L32211a		-27		4  -10 nil
					((synapse EX-1)))
		   (L32211a		L32211b		-31		5  -10 nil 
					((synapse EX-1);(synapse IN-1)
					 ))
		   (L32211b		L32211c		-35		5  -10 nil
					((synapse EX-1)(synapse IN-1)
					 ))
		   (L3221		L32212		-33		0  -10 nil
					((synapse EX-1)(synapse IN-1)
					 ))
		   (L322b		L3222		-26		-1  -10 nil
					((synapse EX-1)(synapse IN-1)
					 ))
		   )
		 :default-diameter segment-diameter :synapse synapse :xy-factor 6.06)
    (if include-distal-a-current
	(progn
;	  (create-a-channel soma-memb cell-name .01 :save-current nil )
	  (dolist (segment-name *distal-nodes*)
	    (create-a-channel
	      (gethash segment-name segment-hash-table) cell-name *gbar-a  :save-current t :override-global-include t)))))
  )






(defun 32211-amacrine-b (cell-name &key (cell-origin '(0 0 0)) (synapse nil)(segment-diameter 0.20)(include-distal-a-current)
		       )
  (setq *soma-radius 8.0)
  (create-cell-type "star-amacrine")
  (create-cell cell-name :cell-type-name "star-amacrine" :cell-origin cell-origin)
  (let ((soma (create-soma (format nil "~a-soma" cell-name) cell-name (* 2.0 *soma-radius))))
;    (create-channels '(na1 na2 na3 dr a) 3 soma :save-particle nil)
    (if *include-sources (create-source *clamp-type soma))
    (setf (cell-type-notes (gethash "star-amacrine" cell-type-hash-table))
	  "Rabbit cholinergic starburst cell (cell 7) (about 1.25 mm from streak) of Tauchi and Masland (1984).~%")
    (create-tree soma
1;; The segment-list format is as follows: (mother-segment-name segment-name x y0 z1 diameter extras-list)
0		 `(
		   (soma		3		0		2  -5       1.2)
		   (3		32		6		3  -10         0.9
				((synapse EX-3)))
		   (32		322a		12		2  -10   0.6
				((synapse EX-3)))
		   (322a	322b		18		2  -10   0.6
				((synapse EX-3)))
		   (322b	3221		        23		3  -10 nil
				((synapse EX-3) (synapse IN-3)))
		   (3221		32211a		27		4  -10 nil
					((synapse EX-3) (synapse IN-3)))
		   (32211a		32211b		31		5  -10 nil 
					((synapse EX-3) (synapse IN-3)
))
		   (32211b		32211c		35		5  -10 nil
					((synapse EX-3)(synapse IN-3)
))
		   (3221		32212		33		0  -10 nil
					((synapse EX-3)(synapse IN-3)
					 ))
		   (322b		3222		26		-1  -10 nil
					((synapse EX-3)(synapse IN-3)
					 ))


		   (soma		L3		0		2  -5       1.2)
		   (L3		L32		-6		3  -10         0.9
				((synapse EX-3)))
		   (L32		L322a		-12		2  -10   0.6
				((synapse EX-3)))
		   (L322a	L322b		-18		2  -10   0.6
				((synapse EX-3)))
		   (L322b	L3221		        -23		3  -10 nil
				((synapse EX-3) (synapse IN-3)))
		   (L3221		L32211a		-27		4  -10 nil
					((synapse EX-3) (synapse IN-3)))
		   (L32211a		L32211b		-31		5  -10 nil 
					((synapse EX-3) (synapse IN-3)
					 ))
		   (L32211b		L32211c		-35		5  -10 nil
					((synapse EX-3)(synapse IN-3)
					 ))
		   (L3221		L32212		-33		0  -10 nil
					((synapse EX-3)(synapse IN-3)
					 ))
		   (L322b		L3222		-26		-1  -10 nil
					((synapse EX-3)(synapse IN-3)
					 ))
		   )
		 :default-diameter segment-diameter :synapse synapse :xy-factor 6.06)
    (if include-distal-a-current
	(progn
;	  (create-a-channel soma-memb cell-name .01 :save-current nil )
	  (dolist (segment-name *distal-nodes*)
	    (create-a-channel
	      (gethash segment-name segment-hash-table) cell-name *gbar-a  :save-current t :override-global-include t)))))
  )








