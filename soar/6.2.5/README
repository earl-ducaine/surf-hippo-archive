## -*- Mode: Text -*- 
###############################################################################
## 
## File            : README
## Author          : Thomas McGinnis
## Created On      : Fri Jun 25 10:01:17 1993
## Last Modified By: Allan Rempel
## Last Modified On: Wed Nov 23 11:51:10 1994
## Update Count    : 7
## 
## PURPOSE
## 	To instruct people installing Soar6
## TABLE OF CONTENTS
## 	- How to unpack a .tar.Z file
##      - How to compile the Soar6 code
## 
###############################################################################
## Status          : Unknown, Use with caution!
## HISTORY
## 
###############################################################################


How to unpack a .tar.Z file:
  A file name that ends in .tar.Z indicates a compressed tar file.  To unpack
  this file, first put the file into a empty directory via the following:

     % mkdir <directory_name>
  where <directory_name> is where you want to compile the code.
  (NB: Throughout this text, any string surrounded by "<" and ">" is a
   variable, which you should replace appropriately and consistently as
   you work through these instructions.)

     % cp <filename>.tar.Z <directory_name>
  where <filename> is everything except for the .tar.Z part of the file.
  (i.e. 6.0.0g  if your .tar.Z file was named 6.0.0g.tar.Z)

     % cd <directory_name>
  You will now be in the directory where you are going to unpack the code.

  At your prompt type:

     % uncompress <filename>.tar.Z
  This will remove <filename>.tar.Z and produce a file named <filename>.tar

  Now at the prompt type:

     % tar -xvf <filename>.tar
  This will give you quite a bit of output as it unpacks each of the files
  in the archive.  When it is finished, you should have the following in
  the directory where you initially placed the .tar.Z file.
  a) The <filename>.tar file.
  b) A directory named 6.<X>.<Y> where <X> and <Y> are numbers.  This
     directory will have all the rest of the source code files below it.
  You can at this point remove the .tar file if you wish.

###############################################################################

How to compile the Soar6 code:
  cd into the directory created by unpacking the code in the previous step.
  In this directory, there will be a file named 'makefile'. I will refer to
  this file as the makefile from here on out.

  If you look at the contents of the makefile, you will see that it merely
  includes two other files: a header file (initially make.header.generic)
  and the file make.body . It (and the header and body files) also contain
  many lines that begin with "#" -- These are comments. They are ignored
  by 'make' but are there for you to read as a supplement to this text.

  a) Provided with the release are several files named make.header.<system>,
     e.g. make.header.hp, make.header.sun, et cetera. If one of these files
     is appropriate for your system, you should edit the makefile to include
     it instead of make.header.generic (the default).

  b) If neccesary, edit the make.header file you have chosen to invoke the
     C compiler for your system, i.e. change the line

       CC = gcc

     to be the appropriate compiler for your system.

     If the make.header you use defines a MACHINE_DEP_DIR, e.g. pmax_mach,
     make sure a directory by that name appears in each of the bin,
     lib and obj directories for the PSCM that you've specified.
     (i.e. bin/nnpscm/pmax_mach, lib/nnpscm/pmax_mach, obj/nnpscm/pmax_mach,
     if you specified the nnpscm). If these directories do not exist,
     you should create them, i.e.

      % mkdir bin/nnpscm/pmax_mach
      % mkdir lib/nnpscm/pmax_mach
      % mkdir obj/nnpscm/pmax_mach

  c) If you are adding any code (for IO or hooks) to the source code, place
     the .c source files into the user source subdirectory of the Soar release
     directory (i.e. in .../6.<X>.<Y>/user/src).  You will only need to add
     code if you are creating new functions, or changing the abilities of
     current functions in the soar code.  If that is not your intent, you are
     most likely not adding any code.

  d) Soar 6.2 introduces the New New Problem Space Computational Model,
     also known as NNPSCM.  It is a significant change to the architecture,
     which will require that Soar programs be changed to run under it.
     However, it is also a fairly universally accepted model, and will
     become the standard in the future, as the current PSCM becomes
     obsolete.

     The new SDE 0.6 provides a feature that will automatically convert
     your existing Soar programs to run under NNPSCM.

     In this release of Soar, the user is given the option of compiling
     with the old PSCM or the NNPSCM.  This is a compile-time option
     which is set in the make.body file.  Look for the line

	PSCM_DIR = non-nnpscm

     This line denotes that Soar will be compiled WITHOUT the NNPSCM option.
     If you wish to use the NNPSCM, simply comment out this line, and
     uncomment the line

	#PSCM_DIR = nnpscm

     Note that if you wish to have both NNPSCM and non-NNPSCM versions of
     Soar compiled, you can simply compile Soar once with the non-NNPSCM
     option, and then recompile Soar with the NNPSCM option.  The
     executables and object files will be stored in different directories
     for each option, and so will not conflict.

  e) Next, you need to decide if you want to run the regular single-agent
     Soar, the multi-agent Soar, or the multi-agent Soar with X windows
     support.  Note that there are 3 lines of the form "DFLAGS = ",
     one for each of the options just mentioned.  The default option
     is single-agent Soar, in which neither the MULTI_AGENT_ENABLED nor
     USE_X_DISPLAY flags are set to true.  If you wish to use one of
     the other modes, simple comment out the line

	DFLAGS =

     and uncomment the line that corresponds to your choice.  Note that
     the executables and object files for these 3 options DO reside in
     the same directories, so if you compile with one option and then
     switch to another option, you'll need to "make clean" before you
     compile with the new option.  The "make clean" command removes all
     the obj/*.o files and allows those files to be recreated under the
     new option.  Note also that the new executable will overwrite the
     old executable, so if you want to have both versions available to
     you, you'll need to rename or move the old executable before you
     compile with the new option.

  f) If you did not add any files to the user directory, go to step h.

  g) For each file you added to the user subdirectory in step c, add
     that file to the line the begins with "USER_SRC =", e.g. if your
     files are user/src/my-io.c and user/src/my-hooks.c , you would change
     the line to:

       USER_SRC = ${USER_DIR}/src/my-io.c ${USER_DIR}/src/my-hooks.c

     You will also have to add entries to the "USER_OBJ =" line which appears
     shortly after the "USER_SRC =" line. This will look just the same except
     that the file names should end with .o instead of .c , e.g.

       USER_OBJ = ${USER_DIR}/obj/my-io.o ${USER_DIR}/obj/my-hooks.o

     If your code will require any other libraries to be linked, e.g. the
     math library, add the link directives to the
     "LIBS = ${SOAR_LIBS} ${EXTRA_LIBS}" line, e.g.

       LIBS = ${SOAR_LIBS} ${EXTRA_LIBS} -lm

     Note that if you selected the USE_X_DISPLAY option above, you will
     need to verify that the -lX11 option is included on the LIBS line.
     If you're not adding any other libraries, then this can be simply
     done by commenting out the first LIBS line and uncommenting the second.

     Finally, you must add a compilation command for each of your files.
     The easiest way to do so is to go to the end of the make.body and
     add entries like this (to continue the example):

       ${USER_OBJ}/my-io.o: ${USER_SRC}/my-io.c
               ${COMPILE.c} ${USER_SRC}/my-io.c

       ${USER_OBJ}/my-hooks.o: ${USER_SRC}/my-hooks.c
               ${COMPILE.c} ${USER_SRC}/my-hooks.c

     (NB: The second line of each of these entries must be intented by a
      TAB character (control-I, ASCII \011), not SPACES -- This is due to
      the nature of 'make'. For more information on this or other parts of
      make's nature (such as the ${<whatever>} notation}, see the man page
      for make).

  h) Type 'make' at your prompt.  This will create the soar executable
     in the bin subdirectory (or in the bin/<PSCM_DIR>/<MACHINE_DEP_DIR>
     subdirectory, if your make.header specified a PSCM_DIR and a
     MACHINE_DEP_DIR.) If you are using gcc as your compiler, ignore any
     warnings that appear during this step.

  i) Finally, make sure the soar executable is in your PATH so you can run
     it. You can either add .../6.<X>.<Y>/bin/<PSCM_DIR>/<MACHINE_DEP_DIR>
     to your PATH, or you can copy the soar executable from there to a
     more likely place (e.g. /usr/local/bin).

How to get help if things don't work:
  If you follow these steps, and things do not work correctly for you, you
  should report the problems to soar-bugs@cs.cmu.edu.

How to use the Soar program:
  To run the Soar program, you should (assuming the steps above to
  install it worked) be able to just type the name of the program
  (along with any arguments) on the command line.

Soar6 default rules:
  There are 2 different sets of default rules, one for the old PSCM, and
  one for the NNPSCM.  The old one is in the subdirectory default/non-nnpscm
  and the new one is in default/nnpscm.

Testing:
  If you want to run the regression test code that we use for testing code
  changes to make sure everything installed correctly, change directory into
  the tests/non-nnpscm or tests/nnpscm subdirectory (depending on which
  PSCM you selected) and execute the run-all-tests shell script.

  If you are running the multi-agent version you can test that as well
  by compiling with MULTI_AGENT_ENABLED and without USE_X_DISPLAY,
  as mentioned above.  Once compiled, you can cd to
  tests/<PSCM_DIR>/multi/multi and execute the file "run-multi-test".
  If you want to simply see the test run rather than compare it to 
  the benchmark, then simply type "soar" in the same test directory.
