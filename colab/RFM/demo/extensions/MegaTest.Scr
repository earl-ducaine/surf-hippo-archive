Starts dribbling to MegaTest.Scr (1992/2/11, 6:24:58).


--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/attval )
--------------------------------------------------------

attval(Obj, Valfilter) :-& tup(F, Valfilter(F(Obj))).
numfilter(X) :- numberp(X) & X.
area(china) :-& 3380.
pop(china) :-& 825.

File /home/herfert/Project/hb-test/attval.rfp created.
Database /home/herfert/Project/hb-test/attval.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/attval )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/genints )
--------------------------------------------------------

genints() :-& 0.
genints() :-& genints(Sign[0]).
genints(Sign[N]) :- Sign is s & Sign[N].
genints(Sign[N]) :- Sign is p & Sign[N].
genints(Sign[N]) :-& genints(Sign[Sign[N]]).

File /home/herfert/Project/hb-test/genints.rfp created.
Database /home/herfert/Project/hb-test/genints.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/genints )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/inv )
--------------------------------------------------------

inv[F](V) :- V is F(| X) & X.
area(india) :-& 1139.
f(I, J | R) :-& J.

File /home/herfert/Project/hb-test/inv.rfp created.
Database /home/herfert/Project/hb-test/inv.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/inv )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/lisp )
--------------------------------------------------------

lisp() :- rf-pprint("==> "),
          E is readl(),
          E is readl(),
          naf(bye is E),
          rf-pprint(eval(E, tup())),
          lisp().
eval([], A) :- ! & tup().
eval(t, A) :- ! & t.
eval(E, A) :- numberp(E), ! & E.
eval(E, A) :- atom(E), !, [_, V] is assoc(E, A) & V.
eval([quote, Exp], A) :- ! & Exp.
eval([function, Fn], A) :- ! & [closure, Fn, A].
eval([cond], A) :- ! & tup().
eval([cond, [P, Q] | R], A) :- [] is eval(P, A), ! & eval([cond | R], A).
eval([cond, [P, Q] | R], A) :- ! & eval(Q, A).
eval([Fn | Exps], A) :- atom(Fn),
                        defmacro(Fn, Args, Body),
                        ! &
                        eval(apply([lambda, Args, Body], Exps, A), A).
eval([Fn | Exps], A) :-& apply(Fn, evlis(Exps, A), A).
apply(Fn, Vals, A) :- atom(Fn),
                      defun(Fn, Args, Body),
                      ! &
                      apply([lambda, Args, Body], Vals, A).
apply(car, [[Hd | Tl]], A) :- ! & Hd.
apply(cdr, [[Hd | Tl]], A) :- ! & Tl.
apply(cons, [Hd, Tl], A) :- ! & tup(Hd | Tl).
apply(atom, [Val], A) :- ! & lispatom(Val).
apply(eq, [Val1, Val2], A) :- ! & lispeq(Val1, Val2).
apply(add1, [Val], A) :- ! & 1+(Val).
apply(sub1, [Val], A) :- ! & 1-(Val).
apply(list, Vals, A) :- ! & Vals.
apply(eval, [Val], A) :- ! & eval(Val, A).
apply([lambda, [], Body], [], A) :- ! & eval(Body, A).
apply([lambda, [Arg | Rargs], Body], [Val | Rvals], A) :- ! &
                                                          apply(
                                                            [lambda,
                                                             Rargs,
                                                             Body],
                                                            Rvals,
                                                            tup(tup(Arg, Val)
                                                                | A)).
apply([closure, Fn, Env], Vals, A) :- ! & apply(Fn, Vals, Env).
apply(Fn, Vals, A) :-& apply(eval(Fn, A), Vals, A).
evlis([], A) :-& tup().
evlis([E | Re], A) :-& tup(eval(E, A) | evlis(Re, A)).
assoc(N, []) :- ! & tup().
assoc(N, [[N, V] | Ar]) :- ! & tup(N, V).
assoc(N, [_ | Ar]) :-& assoc(N, Ar).
lispatom([Hd | Tl]) :- ! & tup().
lispatom(X) :-& t.
lispeq(X, X) :- t is lispatom(X) & !.
lispeq(X, Y) :-& tup().
defun(ff, [x], [cond, [[atom, x], x], [t, [ff, [car, x]]]]).
tff() :-& eval([ff, x], tup(tup(x, tup(tup(1, 2), 3)))).
uff() :-& eval([ff, [list, [cdr, [quote, [a, [[b, c], d]]]], 2, 3]], tup()).
defun(alt,
      [u],
      [cond,
       [[eq, [], u], []],
       [[eq, [], [cdr, u]], u],
       [t, [cons, [car, u], [alt, [cdr, [cdr, u]]]]]]).
talt() :-& eval([alt, [quote, [1, 2, 3, 4, 5]]], tup()).
defun(null, [l], [eq, [], l]).
defun(memeq,
      [x, l],
      [cond, [[null, l], l], [[eq, [car, l], x], l], [t, [memeq, x, [cdr, l]]]]
).
defun(mapcar,
      [f, l],
      [cond, [[null, l], l], [t, [cons, [f, [car, l]], [mapcar, f, [cdr, l]]]]]
).
tmapcar() :-& 
  eval(
    [mapcar,
     [function, [lambda, [x], [car, [cdr, x]]]],
     [quote, [[1, 2], [3, 4]]]],
    tup()).
defun(maptwice, [f, l], [mapcar, [compose, f, f], l]).
defun(compose, [f, g], [function, [lambda, [x], [f, [g, x]]]]).
defun(twice, [f], [compose, f, f]).
tmaptwice() :-& 
  eval([maptwice, [function, cdr], [quote, [[a, 1, 2], [b, 3, 4]]]], tup()).
defmacro(if,
         [test, then, else],
         [list, [quote, cond], [list, test, then], [list, t, else]]).
tif() :-& 
  eval(
    [if, [if, t, [], 2], [if, a, b, c], [if, [], nn, [quote, thisistheresult]]]
,
    tup()).
teval() :-& eval([[lambda, [x, y], [eval, x]], [quote, y], 1], tup()).
teval() :-& eval([eval, [car, [quote, [[atom, 1], [atom, []]]]]], tup()).
defun(doublex, [x, y, x], [list, x, y, x]).

File /home/herfert/Project/hb-test/lisp.rfp created.
Database /home/herfert/Project/hb-test/lisp.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/lisp )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/mu-operator )
--------------------------------------------------------

naturals(N, N) :-& N.
naturals(N, V) :-& naturals(1+(N), V).
mu(F) :- 0 is F(naturals(0, R)) & R.
muc(F) :- 0 is F(naturals(0, R)), ! & R.
muo(F) :- once(0 is F(naturals(0, R))) & R.
foo(0) :-& 1.
foo(1) :-& 4.
foo(2) :-& 2.
foo(3) :-& 0.
foo(4) :-& 7.
foo(5) :-& 0.
foo(6) :-& 6.

File /home/herfert/Project/hb-test/mu-operator.rfp created.
Database /home/herfert/Project/hb-test/mu-operator.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/mu-operator )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/revise )
--------------------------------------------------------

revise(F, N, []) :-& tup().
revise(F, 1, [H | T]) :-& tup(F(H) | T).
revise(F, N, [H | T]) :-& tup(H | revise(F, 1-(N), T)).

File /home/herfert/Project/hb-test/revise.rfp created.
Database /home/herfert/Project/hb-test/revise.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/revise )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/serialisef )
--------------------------------------------------------

serialise(L) :- numbered(arrange(pairlists(L, R)), 1) & R.
pairlists([X | L], [Y | R]) :-& tup(pair[X, Y] | pairlists(L, R)).
pairlists([], []) :-& tup().
arrange([X | L]) :- partition(L, X, L1, L2),
                    T1 is arrange(L1),
                    T2 is arrange(L2) &
                    tree[T1, X, T2].
arrange([]) :-& void.
partition([X | L], X, L1, L2) :- partition(L, X, L1, L2).
partition([X | L], Y, [X | L1], L2) :- before(X, Y), partition(L, Y, L1, L2).
partition([X | L], Y, L1, [X | L2]) :- before(Y, X), partition(L, Y, L1, L2).
partition([], Y, [], []).
before(pair[X1, Y1], pair[X2, Y2]) :- string<(X1, X2).
numbered(tree[T1, pair[X, N1], T2], N0) :-& 
  numbered(T2, 1+(N1 is numbered(T1, N0))).
numbered(void, N) :-& N.

File /home/herfert/Project/hb-test/serialisef.rfp created.
Database /home/herfert/Project/hb-test/serialisef.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/serialisef )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/serialiser )
--------------------------------------------------------

serialise(L, R) :- pairlists(L, R, A), arrange(A, T), numbered(T, 1, N).
pairlists([X | L], [Y | R], [pair[X, Y] | A]) :- pairlists(L, R, A).
pairlists([], [], []).
arrange([X | L], tree[T1, X, T2]) :- partition(L, X, L1, L2),
                                     arrange(L1, T1),
                                     arrange(L2, T2).
arrange([], void).
partition([X | L], X, L1, L2) :- partition(L, X, L1, L2).
partition([X | L], Y, [X | L1], L2) :- before(X, Y), partition(L, Y, L1, L2).
partition([X | L], Y, L1, [X | L2]) :- before(Y, X), partition(L, Y, L1, L2).
partition([], Y, [], []).
before(pair[X1, Y1], pair[X2, Y2]) :- string<(X1, X2).
numbered(tree[T1, pair[X, N1], T2], N0, N) :- numbered(T1, N0, N1),
                                              N2 is +(N1, 1),
                                              numbered(T2, N2, N).
numbered(void, N, N).

File /home/herfert/Project/hb-test/serialiser.rfp created.
Database /home/herfert/Project/hb-test/serialiser.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/serialiser )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/signum )
--------------------------------------------------------

signum(X) :- <(X, 0) & -1.
signum(0) :-& 0.
signum(X) :- >(X, 0) & 1.
sigint(X) :- less(X, 0) & -1.
sigint(0) :-& 0.
sigint(X) :- greater(X, 0) & 1.
less(X, Y) :- negless(X, Y).
less(X, Y) :- posless(X, Y).
less(X, Y) :- neg(X), pos(Y).
negless(X, 0) :- neg(X).
negless(p[X], p[Y]) :- negless(X, Y).
posless(0, Y) :- pos(Y).
posless(s[X], s[Y]) :- posless(X, Y).
neg(p[0]).
neg(p[X]) :- neg(X).
pos(s[0]).
pos(s[X]) :- pos(X).

File /home/herfert/Project/hb-test/signum.rfp created.
Database /home/herfert/Project/hb-test/signum.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/signum )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/wang )
--------------------------------------------------------

work([], [], A, B) :- member(X, A), member(X, B), !.
work([X | L], R, A, B) :- atomic(X), !, work(L, R, [X | A], B).
work(L, [X | R], A, B) :- atomic(X), !, work(L, R, A, [X | B]).
work(L, [not[P] | R], A, B) :- !, work([P | L], R, A, B).
work([not[P] | L],
     R,
     A,
     B) :- !, work(L, [P | R], A, B).
work(L, [and[P, Q] | R], A, B) :- !,
                                  work(L, [P | R], A, B),
                                  work(L, [Q | R], A, B).
work([and[P, Q] | L],
     R,
     A,
     B) :- !, work([P, Q | L],
                   R,
                   A,
                   B).
work(L, [or[P, Q] | R], A, B) :- !, work(L, [P, Q | R], A, B).
work([or[P, Q] | L],
     R,
     A,
     B) :- !, work([P | L], R, A, B), work([Q | L], R, A, B).
work(L, [impl[P, Q] | R], A, B) :- !, work([P | L], [Q | R], A, B).
work([impl[P, Q] | L],
     R,
     A,
     B) :- !, work([Q | L], R, A, B), work(L, [P | R], A, B).
work(L, [equiv[P, Q] | R], A, B) :- !,
                                    work([P | L], [Q | R], A, B),
                                    work([Q | L], [P | R], A, B).
work([equiv[P, Q] | L],
     R,
     A,
     B) :- !, work([P, Q | L],
                   R,
                   A,
                   B), work(L, [P, Q | R], A, B).

File /home/herfert/Project/hb-test/wang.rfp created.
Database /home/herfert/Project/hb-test/wang.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/wang )



--------------------------------------------------------
       double-test( /home/herfert/Project/hb-test/wangtree )
--------------------------------------------------------

work([], [], A, B) :- member(X, A),
                      member(X, B),
                      ! &
                      both[X, wang[A, B]].
work([X | L], R, A, B) :- atomic(X), ! & work(L, R, [X | A], B).
work(L, [X | R], A, B) :- atomic(X), ! & work(L, R, A, [X | B]).
work(L, [not[P] | R], A, B) :- ! & right(not[P], work([P | L], R, A, B)).
work([not[P] | L],
     R,
     A,
     B) :- ! & left(not[P], work(L, [P | R], A, B)).
work(L, [and[P, Q] | R], A, B) :- ! &
                                  right(and[P, Q],
                                        work(L, [P | R], A, B),
                                        work(L, [Q | R], A, B)).
work([and[P, Q] | L],
     R,
     A,
     B) :- ! & left(and[P, Q], work([P, Q | L],
                                    R,
                                    A,
                                    B)).
work(L, [or[P, Q] | R], A, B) :- ! &
                                 right(or[P, Q], work(L, [P, Q | R], A, B)).
work([or[P, Q] | L],
     R,
     A,
     B) :- ! & left(or[P, Q], work([P | L], R, A, B), work([Q | L], R, A, B)).
work(L, [impl[P, Q] | R], A, B) :- ! &
                                   right(impl[P, Q],
                                         work([P | L], [Q | R], A, B)).
work([impl[P, Q] | L],
     R,
     A,
     B) :- ! &
           left(impl[P, Q], work([Q | L], R, A, B), work(L, [P | R], A, B)).
work(L, [equiv[P, Q] | R], A, B) :- ! &
                                    right(equiv[P, Q],
                                          work([P | L], [Q | R], A, B),
                                          work([Q | L], [P | R], A, B)).
work([equiv[P, Q] | L],
     R,
     A,
     B) :- ! &
           left(equiv[P, Q],
                work([P, Q | L],
                     R,
                     A,
                     B),
                work(L, [P, Q | R], A, B)).
right(| R) :-& right[| R].
left(| R) :-& left[| R].

File /home/herfert/Project/hb-test/wangtree.rfp created.
Database /home/herfert/Project/hb-test/wangtree.rfp consulted.
(equal db-old db-new)  ==>  t

End of:  double-test( /home/herfert/Project/hb-test/wangtree )



====================================
             Summary
====================================

/home/herfert/Project/hb-test/attval: t
/home/herfert/Project/hb-test/genints: t
/home/herfert/Project/hb-test/inv: t
/home/herfert/Project/hb-test/lisp: t
/home/herfert/Project/hb-test/mu-operator: t
/home/herfert/Project/hb-test/revise: t
/home/herfert/Project/hb-test/serialisef: t
/home/herfert/Project/hb-test/serialiser: t
/home/herfert/Project/hb-test/signum: t
/home/herfert/Project/hb-test/wang: t
/home/herfert/Project/hb-test/wangtree: t

All tests ok !

