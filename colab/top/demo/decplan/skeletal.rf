#|-------------------------------------------------------------
       this file contains the RELFUN part for ``decplan''

						 Werner Stein
    Fri Oct  2 10:29:51 MET 1992
-------------------------------------------------------------|#


(ft
  (decplan)
   (insert-tools-in-skp (gen-skp (root-id))))

#|-------------------------------------------------------------
  ####   ######  #    #  ######  #####     ##     #####  ######
 #    #  #       ##   #  #       #    #   #  #      #    #
 #       #####   # #  #  #####   #    #  #    #     #    #####
 #  ###  #       #  # #  #       #####   ######     #    #
 #    #  #       #   ##  #       #   #   #    #     #    #
  ####   ######  #    #  ######  #    #  #    #     #    ######
-------------------------------------------------------------|#

#|-------------------------------------------------------------
	feat-primitives: cylinder desc-tc asc-tc ring circle
	--> empty SKP
-------------------------------------------------------------|#
(ft
  (gen-skp _fid)
  (data cylinder _fid (tup))
  (tup skp))

(ft 
  (gen-skp _fid)
  (data ring _fid (tup ))
  (tup skp))

(ft
  (gen-skp _fid)
  (data circle _fid (tup ))
  (tup skp))

(ft 
  (gen-skp _fid)
  (data desc-tc _fid (tup ))
  (tup skp))

(ft 
  (gen-skp _fid)
  (data asc-tc _fid (tup ))
  (tup skp))

#|-------------------------------------------------------------
	The skp for a groove is either
	1) first roughing from left and then from right or
	2) first roughing from right and then from left
-------------------------------------------------------------|#
(ft
  (gen-skp _fid)
  (data groove _fid (tup ))
  (boundaries _fid _x1 _x2 _x3 _x4 _yl _yh)
  (tup skp (tup dir var)
       (tup kind contour)
       (tup var
	    (tup actions
		 (tup right contour 
		      (tup geo
			   (tup p _yh _x1)
			   (tup p _yl _x2)
			   (tup p _yl _x3)
			   (tup p _yh _x4))))
	    (tup actions 
		 (tup left contour  
		      (tup geo
			   (tup p _yh _x1)
			   (tup p _yl _x2)
			   (tup p _yl _x3)
			   (tup p _yh _x4)))))))

#|-------------------LTS== longturningsurface------------------
	The skp for a LTS is the merged skp of all skp in _sof
-------------------------------------------------------------|#
(ft 
  (gen-skp _fid)
  (data longturningsurface _fid (tup (tup sof (tup tup | _sof))))
  (merge&generate-skp _sof))

(ft
  (merge&generate-skp (tup ))
  (tup skp ))
(ft
  (merge&generate-skp _sof)
  (seperate-last _sof _but-last _last)
  (merge-skp (merge&generate-skp _but-last)
             (gen-skp _last)))

#|-------------RSH== rshoulder---------------------------------
-------------------------------------------------------------|#
(ft
  (gen-skp _fid)
  (data rshoulder _fid (tup (tup ground _lts)))
  (boundaries _fid _x1 _x2 _x3 _x4 _yl _yh)
  (merge-skp (tup skp
		  (tup dir right)
		  (tup kind lengthwise)
		  (tup s/d
		       (tup actions
			    (tup right lengthwise 
				 (tup geo
				      (tup p _yl _x1)
				      (tup p _yl _x2)
				      (tup p _yh _x3))))
		       (tup actions)))
	     (gen-skp _lts)
             ))

#|-------------LSH== lshoulder---------------------------------
-------------------------------------------------------------|#
(ft 
  (gen-skp _fid)
  (data lshoulder _fid (tup (tup ground _lts)))
  (boundaries _fid _x1 _x2 _x3 _x4 _yl _yh)
  (merge-skp (tup skp
		  (tup dir left)
		  (tup kind lengthwise)
		  (tup s/d
		       (tup actions
			    (tup left lengthwise  
				 (tup geo
				      (tup p _yh _x1)
				      (tup p _yl _x2)
				      (tup p _yl _x3))))
		       (tup actions)))
	     (gen-skp _lts)
	     ))


#|-------------------------------------------------------------
	#     #
	##   ##  ######  #####    ####   ######
	# # # #  #       #    #  #    #  #
	#  #  #  #####   #    #  #       #####
	#     #  #       #####   #  ###  #
	#     #  #       #   #   #    #  #
	#     #  ######  #    #   ####   ######
-------------------------------------------------------------|#

#|-----------one skp is empty----------------------------------
-------------------------------------------------------------|#
(ft
  (merge-skp (tup skp) _x)
  _x)

(ft 
  (merge-skp _x (tup skp))
  _x)

#|----if only one roughing kind is lengthwise------------------
      then set it to contour
-------------------------------------------------------------|#
(ft
  (merge-skp (tup skp _d1 (tup kind contour) _s/d1)
	     (tup skp _d2 (tup kind lengthwise) (tup s/d _a1 _a2)))
  (is _aa (set-dir&kind-act _d2
			    (tup kind contour)
			    _a1))
  (merge-skp (tup skp _d1 (tup kind contour) _s/d1)
	     (tup skp 
		  _d2
		  (tup kind contour)
		  (tup s/d _aa _a2))))
(ft
  (merge-skp (tup skp _d2 (tup kind lengthwise) (tup s/d _a1 _a2))
	     (tup skp _d1 (tup kind contour) _s/d1))
  (is _aa (set-dir&kind-act _d2
			    (tup kind contour)
			    _a1))
  (merge-skp (tup skp 
		  _d2
		  (tup kind contour)
		  (tup s/d _aa _a2))
	     (tup skp _d1 (tup kind contour) _s/d1)))

#|--------both directions are equal----------------------------
-------------------------------------------------------------|#
(ft 
  (merge-skp (tup skp
		  (tup dir _dir)
		  (tup kind _kind)
		  (tup s/d _a11 _a12))
	     (tup skp
		  (tup dir _dir)
		  (tup kind _kind)
		  (tup s/d _a21 _a22)))
  (left-or-right _dir)
  (contour-or-lengthwise _kind)
  (tup skp
       (tup dir _dir)
       (tup kind _kind)
       (tup s/d (merge-act _a11 _a21) (merge-act _a22 _a12))))
#|--------opposite directions ---------------------------------
-------------------------------------------------------------|#
(ft
  (merge-skp (tup skp
		  (tup dir _dir1)
		  (tup kind _kind)
		  (tup s/d _a11 _a12))
	     (tup skp
		  (tup dir _dir2)
		  (tup kind _kind)
		  (tup s/d _a21 _a22)))
  (is _dir1 (other-dir _dir2))
  (contour-or-lengthwise _kind)
  (tup skp
       (tup dir both)
       (tup kind _kind)
       (tup s/d
	    (merge-act _a11 (merge-act _a12 _a21))
	    _a22)))

#|--------one direction is both--------------------------------
     first try to insert back1 in skp and merge it with skp
     if this fails merge actions skp skp and back1 back2
-------------------------------------------------------------|#
(ft
  (merge-skp (tup skp
		  (tup dir _dir1)
		  (tup kind _kind)
		  (tup s/d _a11 _a12))
	     (tup skp
		  (tup dir _dir2)
		  (tup kind _kind)
		  (tup s/d _a21 _a22)))
  (contour-or-lengthwise _kind)
  (tup skp
       (tup dir both)
       (tup kind _kind)
       (tup s/d
	    (merge-act _a11 (insert _a12 _a21))
	    _a22)))

(ft
  (merge-skp (tup skp
		  (tup dir _dir1)
		  (tup kind _kind)
		  (tup s/d _a11 _a12))
	     (tup skp
		  (tup dir _dir2)
		  (tup kind _kind)
		  (tup s/d _a21 _a22)))
  (contour-or-lengthwise _kind)
  (tup skp
       (tup dir both)
       (tup kind _kind)
       (tup s/d
	    (merge-act _a11 _a21)
	    (merge-act _a22 _a12))))

#|-------if the direction is still variable--------------------
-------------------------------------------------------------|#
;-------------var-var----------------------------------------
(ft
  (merge-skp (tup skp
		  _var
		  _contour
		  (tup var _a11 _a12))
	     (tup skp
		  _var
		  _contour
		  (tup var _a21 _a22)))
  (tup skp 
       _var
       _contour
       (tup var
	    (tup actions | (merge-act _a11 _a21))
	    (tup actions | (merge-act _a22 _a12)))))

;-------------var-left/right----------------------------------------
(ft
  (merge-skp (tup skp
		  _var
		  _contour
		  (tup var _a11 _a12))
	     (tup skp
		  (tup dir _dir)
		  _kind
		  (tup s/d _a21 _a22)))
  (left-or-right _dir)
  (is (tup _na11 _na12) (choose-act-dir (tup _a11 _a12) _dir))
  (tup skp 
       (tup dir _dir)
       (tup kind contour)
       (tup s/d 
	    (merge-act _na11 _a21) 
	    (merge-act _a22 _na12))))

;-------------var-both----------------------------------------
(ft
  (merge-skp (tup skp
		  _var
		  _contour
		  (tup var _a11 _a12))
	     (tup skp
		  (tup dir both)
		  _kind
		  _s/d))
  (is _dir1 (left-most-dir (cdr _a21)))
  (merge-skp (tup skp
		  (tup dir _dir1)
		  (tup kind contour)
		  (tup s/d |
		       (choose-act-dir (tup _a11 _a12) _dir1)))
	     (tup skp 
		  (tup dir both)
		  _kind
		  _s/d)))

;-------------left/right-var----------------------------------------
(ft
  (merge-skp (tup skp
		  (tup dir _dir)
		  _kind
		  (tup s/d _a21 _a22))
	     (tup skp
		  _var
		  _contour
		  (tup var _a11 _a12)))
  (left-or-right _dir)
  (is (tup _na11 _na12) (choose-act-dir (tup _a11 _a12) _dir))
  (tup skp 
       (tup dir _dir)
       (tup kind contour)
       (tup s/d 
	    (merge-act _a21 _na11)
	    (merge-act _na12 _a22))))

;-------------both-var----------------------------------------
(ft
  (merge-skp (tup skp
		  (tup dir both)
		  _kind
		  _s/d)
	     (tup skp
		  _var
		  _contour
		  (tup var _a11 _a12)))
  (is _dir1 (right-most-dir (cdr _a21)))
  (merge-skp (tup skp 
		  (tup dir both)
		  _kind
		  _s/d)
	     (tup skp
		  (tup dir _dir1)
		  (tup kind contour)
		  (tup s/d |
		       (choose-act-dir (tup _a11 _a12) _dir1)))))

#|-------------------------------------------------------------
	#######
	   #      ####    ####   #        ####
	   #     #    #  #    #  #       #
	   #     #    #  #    #  #        ####
	   #     #    #  #    #  #            #
	   #     #    #  #    #  #       #    #
	   #      ####    ####   ######   ####
-------------------------------------------------------------|#
; global constants for demo version:

(ft (wp-material) high-alloy-steel)

(ft (quality) normal)

(ft (process) roughing)

; CONTAX tool selection:

(hn (tool-sel _process _cut-kind _wp-material _quality 
	      _alpha _beta _direction _tools)
  (rf-print -----------Contax-Call--------------)
  (rf-terpri)
  (rf-princ _process) (rf-princ \ )
  (rf-princ _cut-kind) (rf-princ \ )
  (rf-princ _wp-material) (rf-princ \ )
  (rf-princ _direction) (rf-princ \ )
  (rf-princ _alpha) (rf-princ \ )
  (rf-princ _beta) (rf-princ \ )
  (rf-terpri)
  (rf-print -----------Contax-Result------------)
  (cn reconsult "decplan.col")
  (pretty-print
   (is _tools (get-cn-tools
	       (cn global hard
		   ; (tup quality _quality)
		   (tup wp-material _wp-material)
		   (tup process _process)
		   (tup cutting _cut-kind)
		   (tup alpha _alpha)
		   (tup beta _beta)
		   (tup direction _direction)
		   (tup tool lathe-tools)
		   (tup holder holders)
		   (tup plate plate-geometries)
		   (tup edge-angle edge-angles)
		   (tup tc-edge-angle tc-edge-angles)
		   ;tool 
		   ;holder 
		   ;plate 
		   ;edge-angle 
		   ;tc-edge-angle
		   )
	       tool holder)))
  (rf-terpri)
  )

; get-cn-tools
; ------------

; extract a list of tools/holders from the return value
; of the CONTAX propagation

(ft (get-cn-tools (tup _vars | _values) _tool-var-name _holder-var-name)
  (is _tool-pos (find-pos _tool-var-name _vars))
  (is _holder-pos (find-pos _holder-var-name _vars))
  (get-cn-tools1 _values _tool-pos _holder-pos))

(ft (get-cn-tools1 (tup) _tool-pos _holder-pos)
  `(tup))

(ft (get-cn-tools1 (tup _h | _t) _tool-pos _holder-pos)
  (add-if-new (tup (rf-nth _tool-pos _h)
                   (rf-nth _holder-pos _h))
              (get-cn-tools1 _t _tool-pos _holder-pos)))

; find-pos
; --------

(ft (find-pos _element _list)
  (find-pos1 _element _list 0))

(ft (find-pos1 _element (tup _element | _rest) _no)
  _no)

(ft (find-pos1 _element (tup _h | _t) _no)
  (find-pos1 _element _t (1+ _no)))

; compute-alpha-angles
;---------------------
(ft 
  (compute-alpha-angles _alpha-max
			(tup _dir _kind
			     (tup geo _p1 _p2 _p3)))
  ;this is a shoulder
  _alpha-max)
(ft 
  (compute-alpha-angles _alpha-max
			(tup right _kind
			     (tup geo _p1 _p2 _p3 _p4)))
  ;this is a grouve
  (rf-max (tup _alpha-max | (compute-flank-angles (tup _p1 _p2)))))
(ft 
  (compute-alpha-angles _alpha-max
			(tup left _kind
			     (tup geo _p1 _p2 _p3 _p4)))
  ;this is a grouve
  (rf-max (tup _alpha-max | (compute-flank-angles (tup _p4 _p3)))))
(ft 
  (compute-beta-angles _beta-max
			(tup left _kind
			     (tup geo _p1 _p2 | _rest)))
  (rf-max (tup _beta-max | (compute-flank-angles (tup _p1 _p2)))))
(ft 
  (compute-beta-angles _beta-max
			(tup right _kind
			     (tup geo _p1 _p2 _p3)))
  (rf-max (tup _beta-max | (compute-flank-angles (tup _p3 _p2)))))
(ft 
  (compute-beta-angles _beta-max
			(tup right _kind
			     (tup geo _p1 _p2 _p3 _p4)))
  (rf-max (tup _beta-max | (compute-flank-angles (tup _p4 _p3)))))

; compute-flank-angles (only for descending flanks)
; -------------------------------------------------

(ft (compute-flank-angles (tup))
  (tup))

(ft (compute-flank-angles (tup (tup p _r _z)))
  (tup))

(ft (compute-flank-angles (tup (tup p _r1 _z)
			       (tup p _r2 _z) | _rest))   ; 90 deg ring
  (tup 90
       | (compute-flank-angles (tup (tup p _r2 _z) | _rest))))

(ft (compute-flank-angles (tup (tup p _r1 _z1)
			       (tup p _r2 _z2) | _rest))
  (tup (rad2rounded-deg (atan (/ (- _r1 _r2) (- _z2 _z1))))
       | (compute-flank-angles (tup (tup p _r2 _z2) | _rest))))

(ft (rad2rounded-deg _rad)
  (* (round (/ (+ (* _rad 57.295779513082323) 3) 3)) 3))

(ft
  (insert-tools-in-skp _skp)
  (is _skp (tup skp
		_dir
		_kind 
		(tup _act-type
		     (tup actions | _act1)
		     (tup actions | _act2))))
  (tup skp 
       _dir
       _kind
       (tup s/d
	    (tup actions |
		 (insert-tools (append-ft _act1 _act2)))
	    (tup actions))))

#|-------------------------------------------------------------
	       INSERT-TOOLS
	given a sequence of actions 
	returning a sequence of tools and maximal
		  subsequences using this tool
-------------------------------------------------------------|#
(ft
  (insert-tools (tup ))
  (tup ))
(ft 
  (insert-tools (tup _act | _actrest))
  (is _act (tup _dir _kind | _r))
  (is (tup _act+tools _rest) (tool-select (tup)
					  (tup _act | _actrest)
					  _dir _kind 0 0))
  (tup _act+tools | (insert-tools _rest)))

#|-------------------------------------------------------------
	       TOOL-SELECTION
	search a maximum sequence of actions
	       using a same tool
	returns a tuple: (tup *tool+act* *rest-act*)
-------------------------------------------------------------|#
(ft
  (tool-select _actlist1 (tup ) _dir _kind _alpha-max _beta-max)
  (is _tool (car (contax-tool-select _dir _kind _alpha-max _beta-max)))
  (tup (tup (tup tool | _tool) | _actlist1)
       (tup )))
(ft
  (tool-select _actlist1 _actlist2 _dir _kind _alpha-max _beta-max)
  (is _act (car _actlist2))
  (same-dir _act _dir)
  (tool-select (append-ft _actlist1  (tup _act))
	       (cdr _actlist2)
	       _dir
	       _kind
               (once `(compute-alpha-angles _alpha-max _act))
               (once `(compute-beta-angles _beta-max _act))))
(ft 
  (tool-select _actlist1 _actlist2 _dir _kind _alpha-max _beta-max)
  (is _tool (car (contax-tool-select _dir _kind _alpha-max _beta-max)))
  (tup (tup (tup tool | _tool) | _actlist1)
       _actlist2))

(ft 
  (contax-tool-select _dir _kind _alpha-max _beta-max)
  (tool-sel (process) _kind (wp-material) (quality)
	    _alpha-max _beta-max _dir _tools)
  _tools)
;   (tup (tup dnmm-71 tmaxp-pdl93)))

#|-------------------------------------------------------------
	   #
          # #    #    #  #    #
         #   #   #    #   #  #
        #     #  #    #    ##
        #######  #    #    ##
        #     #  #    #   #  #
        #     #   ####   #    #
-------------------------------------------------------------|#
(ft
  (root-id)
  lts-circ1-circ15)
;  (data workpiece _fid (tup ))
;  _fid)
(hn (contour-or-lengthwise contour))
(hn (contour-or-lengthwise lengthwise))
(ft (other-kind contour) lengthwise)
(ft (other-kind lengthwise) contour)
(hn (left-or-right left))
(hn (left-or-right right))
(ft (other-dir left) right)
(ft (other-dir right) left)

(ft 
  (choose-act-dir (tup _act1 _act2) right)
  (tup _act1 _act2))
(ft 
  (choose-act-dir (tup _act1 _act2) left)
  (tup _act2 _act1))

(hn 
  (seperate-last (tup ) (tup ) (tup )))
(hn
  (seperate-last (tup _e) (tup ) _e))
(hn 
  (seperate-last (tup _e | _r) (tup _e | _b-l-r) _a2)
  (seperate-last _r _b-l-r _a2))

(hn
  (same-dir (tup ) _dir))
(hn
  (same-dir (tup _dir | _rest) _dir))

#|-right-most and left-most directions of tup of actions-------
-------------------------------------------------------------|#
(ft
  (right-most-dir (tup (tup _dir | _rest)))
  _dir)
(ft
  (right-most-dir (tup _x | _rest))
  (right-most-dir _rest))
(ft
  (left-most-dir (tup (tup _dir |_rest) | _ract))
  _dir)


#|-boundaries for features-------------------------------------
	     y-h, y-l, x1, x2, x3, x4
       ..............................Y-high
       .\                  /
       . \                /.
       .  \              / .
       .   \------------/............Y-low
       .   .            .  .
      X1   X2          X3  X4
-------------------------------------------------------------|#
(ft 
  (cdr (tup ))
  (tup ))
(ft 
  (cdr (tup _x | _y))
  _y)
(ft
  (car (tup ))
  (tup ))
(ft 
  (car (tup _x | _y))
  _x)

(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data cylinder _feat
	(tup (tup center1 _x1)
	     (tup center2 _x2)
	     (tup radius1 _y1))))
(hn 
  (boundaries _feat _x1 _x1 _x3 _x4 _y1 _y2)
  (data ring _feat
	(tup (tup center1 _x1)
	     (tup radius1 _y1)
	     (tup radius2 _y2))))
(hn 
  (boundaries _feat _x1 _x1  _x3 _x4 0 _y2)
  (data circle _feat
	(tup (tup center1 _x1)
	     (tup radius2 _y2))))
(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data desc-tc _feat
	(tup (tup center1 _x1)
	     (tup center2 _x2)
	     (tup radius1 _y1)
	     (tup radius2 _y2))))
(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data asc-tc _feat
	(tup (tup center1 _x1)
	     (tup center2 _x2)
	     (tup radius1 _y1)
	     (tup radius2 _y2))))
(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data groove _feat
	(tup (tup left _lshid)
	     (tup right _rshid)))
  (boundaries _lshid _x1 _x2 _x3 _x14 _y1 _y2)
  (boundaries _rshid _x21 _x23 _x4 _x24 _y21 _y22))
(hn
  (boundaries _feat _x1 _x2 _x3 _x4 _y _y)
  (data longturningsurface _feat
	(tup (tup radius _y)
	     (tup leftmost _leftmost)
	     (tup rightmost _rightmost)))
  (boundaries _leftmost _x1 _x12 _x13 _x14 _y11 _y12)
  (boundaries _rightmost _x21 _x2 _x23 _x24 _y21 _y22))
(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data rshoulder _feat
	(tup (tup rightmost _r)
	     (tup ground _g)))
  (boundaries _r _x10 _x3 _x11 _x12 _y10 _y2)
  (boundaries _g _x1 _x2 _x21 _x22 _y1 _y20))
(hn 
  (boundaries _feat _x1 _x2 _x3 _x4 _y1 _y2)
  (data lshoulder _feat
	(tup (tup leftmost _l)
	     (tup ground _g)))
  (boundaries _l _x1 _x10 _x11 _x12 _y2 _y10)
  (boundaries _g _x2 _x3 _x21 _x22 _y1 _y20))

(ft 
  (merge-act (tup actions | _act1) (tup actions | _act2))
  (tup actions | (append-ft _act1 _act2)))

(ft
  (insert (tup actions) _act2)
  _act2)
(ft 
  (insert _act1 (tup actions))
  _act1)
(ft
  (insert (tup actions | _act1) (tup actions | _act2))
  (is _act1 (tup (tup _dira1 |_resta1) | _restaa1))
  (tup actions | (insert-h _act1 _act2 _dira1)))

;(ft
;  (insert-h _act1 (tup ) _dira1)
;  fail)
(ft
  (insert-h _act1 _act2 _dira1)
  (is _act2 (tup (tup _dira1 | _resta2) | _restaa2))
  (append-ft _act1 _act2))
(ft 
  (insert-h _act1 _act2 _dira1)
  (is _act2 (tup (tup (other-dir _dira1) | _resta2) | _restaa2))
  (tup (tup (other-dir _dira1) | _resta2) | (insert-h _act1 _restaa2 _dira1)))

(ft
  (append-ft (tup ) _x)
  _x)
(ft 
  (append-ft (tup _y | _z) _x)
  (tup _y | (append-ft _z _x)))

(ft (rf-nth 0 (tup _h | _t))   _h)
(ft (rf-nth _no (tup _h | _t))
  (rf-nth (1- _no) _t))

(ft
  (set-dir&kind-act (tup dir _dir)
		    (tup kind _kind)
		    (tup actions | _act))
  (tup actions | (set-d&k-act _dir _kind _act)))

(ft 
  (set-d&k-act _dir _kind (tup ))
  (tup ))
(ft 
  (set-d&k-act _dir _kind (tup (tup _d _k | _r) | _rest))
  (tup (tup _dir _kind | _r) | (set-d&k-act _dir _kind _rest)))

(ft (rf-max (tup _x)) _x)
(ft (rf-max (tup _h | _t))
    (max _h (rf-max _t)))

#|-------------------------------------------------------------
	 #######
	    #       ##    #    #   ####   #    #
            #      #  #    #  #   #    #  ##   #
  	    #     #    #    ##    #    #  # #  #
	    #     ######    ##    #    #  #  # #
	    #     #    #   #  #   #    #  #   ##
	    #     #    #  #    #   ####   #    #

	     	 ####     ##    #       #
		#    #   #  #   #       #
	 	#       #    #  #       #
	 	#       ######  #       #
	 	#    #  #    #  #       #
	  	 ####   #    #  ######  ######

-------------------------------------------------------------|#

(hn (data _concept _instance  _attr-terms)
    (member _instance (tx instances _concept))
    (data-attributes _instance _attr-terms))
(ft (data-attributes _instance (tup ))
    (tup ))
(ft (data-attributes _instance (tup (tup _attr _val)))
    (is _val (tx attr-filler _attr _instance))
    (tup (tup _attr _val)))
(ft (data-attributes _instance (tup (tup _attr _val) (tup _attr2 _val2) | _attr-terms))
    (is _val (tx attr-filler _attr _instance))
    (is _rest-terms (data-attributes _instance (tup (tup _attr2 _val2) | _attr-terms)))
    (tup (tup _attr _val) | _rest-terms))

(ft (add-if-new _tool _rest-tools)
    (member _tool _rest-tools)
     _rest-tools)

(ft (add-if-new _tool _rest-tools)
    (tup _tool | _rest-tools))


(hn (member _e (tup _e | _l)))
(hn (member _e (tup _a | _l)) (member _e _l))

#|-------------------------------------------------------------
-------------------------------------------------------------|#

(ft (tup ) `(tup ))
(ft (tup _x | _y) `(tup _x | _y))

